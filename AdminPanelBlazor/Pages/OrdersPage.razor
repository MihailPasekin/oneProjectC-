@page "/orderPage"

@using AdminPanelBlazor.Models
@using AdminPanelBlazor.Services
@using AdminPanelBlazor.Interfaces
@using EComersObjectLib.SapObjects;
@using EComersObjectLib.Objects;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.Security.Claims

@inject NavigationManager navigationmanager
@inject IOinvService OinvService
@inject INavigation navigationParams
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Admin, Operator")]

<PageTitle>Order Page</PageTitle>
<h3 class="colorFont"> Order Page </h3>

<body>
    <table border=2 cellspacing="0" cellpadding="10" class="model_table , colorFont">
        <thead class="model_table">
                <tr>
                    <th>DocEntry</th>
                    <th>CardCode</th>
                    <th>CardName</th>
                    <th>PayType</th>
                    <th>DocDate</th>
                    <th>DocTotal</th>
                    <th>Comments</th>
                    <th>Confirm</th>
                    <th>OrderItems</th>
                </tr>
                @if (Model != null)
                {
                    if (Model.Count > 0)
                    {
                        @foreach (var order in Model)
                        {
                            <tr>
                                <td>@order.DocEntry</td>
                                <td>@order.CardCode</td>
                                <td>@order.CardName</td>
                                <td>
                                    @switch (order.GroupNum)
                                    {
                                        case -1:
                                            <text>"Наличные"</text>
                                            ;
                                            break;
                                        case 1:
                                            <text>"При отгрузке"</text>
                                            ;
                                            break;
                                        case 2:
                                            <text>"Кредит 7"</text>
                                            ;
                                            break;
                                        case 3:
                                            <text>"Кредит 14"</text>
                                            ;
                                            break;
                                        case 4:
                                            <text>"Кредит 30"</text>
                                            ;
                                            break;
                                        case 5:
                                            <text>"Перечисление"</text>
                                            ;
                                            break;
                                        case 6:
                                            <text>"Консигнация"</text>
                                            ;
                                            break;
                                        case 7:
                                            <text>"Реализация"</text>
                                            ;
                                            break;
                                    }
                                </td>
                                <td>@order.DocDate.ToShortDateString()</td>
                                <td>@order.DocTotal</td>
                                <td>@order.Comments</td>
                                <td>
                                <input name="selectedOrders" value="@order.DocEntry" type="checkbox" @onchange="eventArgs => { CheckboxClicked(order.DocEntry, eventArgs.Value); }" />
                                </td>
                                <td>
                                    <button class="div_right_livt" @onclick="(()=>NavigatorPageItem(order.DocEntry))" value="@order.DocEntry" >
                                        Товары
                                    </button>

                                </td>
                            </tr>
                        }
                    }
                }
            </thead>
        </table>
    <div style="padding-top:20px">
    </div>
        <div>
            <button class=" btn-lg btn-primary, input_color2" @onclick="HandleSubmit" >Отправить данные</button>
        </div>
</body>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int empId { get; set; }

    private List<ORDR> Model;
    public List<int> selectedOrders = new List<int>();
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        navigationParams.ClearNavigationStack();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            string region = claims.Where(p => p.Type == "Region").First().Value;
            Model = (await OinvService.GetSapOrdersByRegion(region));
        }
        else
        {
            await Task.CompletedTask;
            return;
        }
       
       
        await Task.CompletedTask;
        //SummCheckedInvoice();
    }

    private async Task HandleSubmit()
    {
        //SummCheckedInvoice();
        await OinvService.OnPostCreateDelivery(selectedOrders);
        Model = (await OinvService.GetSapOrders());
        await Task.CompletedTask;
    }

    private async Task NavigatorPageItem(int id)
    {
        navigationParams.SetPrevParams(new Dictionary<string, string>() { { "orderPage", "" } });
        navigationmanager.NavigateTo($"orderitempage/{id}", false);
        await Task.CompletedTask;
    }

    public void CheckboxClicked(int order, object? eventArgs)
    {
        selectedOrders.Add(order);
    }
}
