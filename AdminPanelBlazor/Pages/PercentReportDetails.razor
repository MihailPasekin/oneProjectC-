@page "/percentreportdetails"

@using AdminPanelBlazor.Interfaces;
@using EComersObjectLib.Objects;

@inject NavigationManager navigationmanager
@inject INavigation navigationParams
@inject IAccountingDetail AccountingDetailService

<dody>
<h3>Подробности отчета "Проценты"</h3>
    
    <table border=2 cellspacing="0" cellpadding="10" class="model_table , colorFont">
        <thead class="model_table">
            <tr>
                <th>Номер документа</th>
                <th>Дата</th>
                <th>Код заказщика</th>
                <th>Имя заказчика</th>
                <th>Сумма заказа</th>
                <th>Товары</th>
                
                <th></th>
            </tr>
            @if (details != null)
            {
                @foreach (var percentDetail in details)
                {
                    <tr>
                        <td>@percentDetail.DocNum</td>
                        <td>@percentDetail.DocDate.ToString("dd.MM.yyyy")</td>
                        <td>@percentDetail.CardCode</td>
                        <td>@percentDetail.Name</td>
                        <td>@percentDetail.Sum</td>
                        <td>
                            <button class="div_right_livt" @onclick="(()=>NavigatorPageItem(percentDetail.DocEntry))" value="@percentDetail.DocEntry" name="itemId">
                                Товары
                            </button>

                        </td>
                    </tr>

                }
            }
        </thead>
    </table>
    <div style="padding-top:20px">
        <button class=" btn-lg btn-primary, input_color2" @onclick="(()=>GoToPercentReport())" type="submit">Вернуться к отчету</button>
    </div>
</dody>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string id { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string From { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string To { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string JopTitle { get; set; }

    public List<PercentDeliveryAgent> details { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //if (DateTime.TryParse(fromDate, out DateTime date))
        switch (JopTitle)
        {
            case "agent":
                details = await AccountingDetailService.GetPercentDetailsAgent(From.Replace("_", "."), To.Replace("_", "."), id);
                break;
            case "delivery":
                details = await AccountingDetailService.GetPercentDetailsDelivery(From.Replace("_", "."), To.Replace("_", "."), id);
                break;
            case "supervisor":
                details = await AccountingDetailService.GetPercentDetailsSupervisor(From.Replace("_", "."), To.Replace("_", "."), id);
                break;
        }

        await Task.CompletedTask;

    }

    protected override async void OnParametersSet()
    {
        From = From ?? DateTime.Now.Date.ToString("yyyy_MM_dd");
        To = To ?? DateTime.Now.Date.ToString("yyyy_MM_dd");

        //DateTime.TryParseExact(From, "yyyy_MM_dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out fromDate);
        //DateTime.TryParseExact(To, "yyyy_MM_dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out toDate);

        switch (JopTitle)
        {
            case "agent":
                details = await AccountingDetailService.GetPercentDetailsAgent(From.Replace("_", "."), To.Replace("_", "."), id);
                break;
            case "delivery":
                details = await AccountingDetailService.GetPercentDetailsDelivery(From.Replace("_", "."), To.Replace("_", "."), id);
                break;
            case "supervisor":
                details = await AccountingDetailService.GetPercentDetailsSupervisor(From.Replace("_", "."), To.Replace("_", "."), id);
                break;
        }

        await Task.CompletedTask;
    }

    public void NavigatorPageItem(int docEntry)
    {
        //id={id}&From={From}&To={To}&JopTitle={JopTitle}
        navigationParams.SetPrevParams(new Dictionary<string, string>() { { "percentreportdetails", $"id={id}&From={From}&To={To}&JopTitle={JopTitle}" } });
        navigationmanager.NavigateTo($"invoiceItemPage?id={docEntry}", false);
    }
    public void GoToPercentReport()
    {
        Dictionary<string, string> param = navigationParams.GetPrevParams();
        navigationmanager.NavigateTo($"percentreport?from={param["from"]}&to={param["to"]}", false);
    }
}
