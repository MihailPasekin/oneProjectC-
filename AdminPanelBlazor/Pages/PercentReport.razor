@page "/percentreport"

@using AdminPanelBlazor.Models
@using AdminPanelBlazor.Services
@using AdminPanelBlazor.Interfaces
@using EComersObjectLib.Objects;
@using Microsoft.JSInterop;
@using System.IO;
@using System.Globalization;

@inject ExcelService excelService
@inject Microsoft.JSInterop.IJSRuntime JS
@inject NavigationManager navigationmanager
@inject INavigation navigationParams
@inject IAccounting AccountingService
<body class="body ,colorFont">

    <div class="row" style="padding-top:30px">
        <div class='col-sm-2'>
            <h3 class="colorFont">С даты</h3>
        </div>

        <div class='col-sm-2'>
            <InputDate @bind-Value="FromDate"></InputDate>
        </div>
    </div>

    <div class="row">
        <div class='col-sm-2'>
            <h3 class="colorFont">По дату</h3>
        </div>

        <div class='col-sm-2'>
            <InputDate @bind-Value="ToDate"></InputDate>
        </div>
    </div>
    <div>
        <button class=" btn-lg btn-primary, input_color2" @onclick="(()=>GetPercentReportAsync())" type="submit">Показать отчет</button>
    </div>
    <div style="padding:30px"></div>
     @if (allPercents != null)
    {
        @foreach (var percent in allPercents)
        {
            @switch (percent.First().JopTitle){
                case "supervisor":
                    <h3> Супервайзер </h3>
                break;
                case "delivery":
                    <h3> Экспедитор </h3>
                break;
                case "agent":
                    <h3> Торговый агент </h3>
                break;
            }

            <table border=2 cellspacing="0" cellpadding="10" class="model_table , colorFont">
                <thead class="model_table">
                    <tr>
                        @if (percent.First().JopTitle != "supervisor")
                        {
                            <th>Код</th>
                        }else{
                            <th></th>
                        }
                        <th>Имя</th>
                        <th>Сумма</th>
                        <th>Комиссия</th>
                        <th></th>                        
                    </tr>

                    @foreach (var okReportLines in percent)
                    {
                        <tr>
                            @if (percent.First().JopTitle != "supervisor")
                            {
                                <td>@okReportLines.Code</td>
                            }else{
                                <td></td>
                            }
                            <td>@okReportLines.Name</td>
                            <td>@Math.Round(okReportLines.Sum, 2)</td>
                            <td>@Math.Round(okReportLines.Commission, 2)</td>
                            @if (percent.First().JopTitle != "supervisor") 
                            {
                                <td><button class="div_right_livt" @onclick="(() => NavigatorPagePercentDetails(okReportLines.Code , FromDate.Date, ToDate.Date, okReportLines.JopTitle))" value="@okReportLines.Code" name="visitId">Подробности</button></td>
                            }
                            else
                            {
                                string bufval = okReportLines.Name.Replace(" ", "_").Replace("#", "-");

                                <td><button class="div_right_livt" @onclick="(() => NavigatorPagePercentDetails(bufval,FromDate.Date, ToDate.Date, okReportLines.JopTitle))" value="@okReportLines.Name" name="visitId">Подробности</button></td>
                            }
                        </tr>
                    }<tr>
                        <td></td>
                        <td style="float:right">Итого:</td>
                        <td>@Math.Round(percent.Sum(p=>p.Sum),2)</td>
                        <td>@Math.Round(percent.Sum(p=>p.Commission),2)</td>
                        <td></td>
                    </tr>
                    
                </thead>
            </table>
        }
    }
    <div style="padding:10px">
    </div>
    <button class=" btn-lg btn-primary, input_color2" @onclick="@CreateDocument">Скачать Excel</button>
</body>

@code {
    private List<List<Percent>> allPercents = new List<List<Percent>>();
    private DateTime fromDate = DateTime.Now.Date;
    private DateTime toDate = DateTime.Now.Date;
    private DateTime FromDate { get { return fromDate; } set { fromDate = value; } }
    private DateTime ToDate { get { return toDate; } set { toDate = value; } }
    private double test; 
    [Parameter]
    [SupplyParameterFromQuery]
    public string? From { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? To { get; set; }

    protected override async Task OnInitializedAsync()
    {
        navigationParams.ClearNavigationStack();
        From = From ?? DateTime.Now.Date.ToString("yyyy_MM_dd");
        To = To ?? DateTime.Now.Date.ToString("yyyy_MM_dd");
        fromDate = DateTime.Now.Date;
        toDate = DateTime.Now.Date;
        allPercents = await AccountingService.GetPercentAsync(From.Replace("_", "."), To.Replace("_", "."));
        await Task.CompletedTask;
    }

    protected override async void OnParametersSet()
    {
        From = From ?? DateTime.Now.Date.ToString("yyyy_MM_dd");
        To = To ?? DateTime.Now.Date.ToString("yyyy_MM_dd");

        DateTime.TryParseExact(From, "yyyy_MM_dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out fromDate);
        DateTime.TryParseExact(To, "yyyy_MM_dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out toDate);
        
        allPercents = await AccountingService.GetPercentAsync(From.Replace("_", "."), To.Replace("_", "."));

        await Task.CompletedTask;
    }

    private void NavigatorPagePercentDetails(string id, DateTime fromDate, DateTime toDate, string JopTitle)
    {
        From = fromDate.ToString("yyyy_MM_dd");
        To = toDate.ToString("yyyy_MM_dd");
        navigationParams.SetPrevParams(new Dictionary<string, string>() { { "from", $"{fromDate.Date.ToString("yyyy_MM_dd")}" }, { "to", $"{toDate.Date.ToString("yyyy_MM_dd")}" } });
        navigationmanager.NavigateTo($"percentreportdetails?id={id}&From={From}&To={To}&JopTitle={JopTitle}", false);
    }
    protected async Task GetPercentReportAsync()
    {
        From = fromDate.Date.ToString("yyyy_MM_dd");
        To = toDate.Date.ToString("yyyy_MM_dd");
        allPercents = await AccountingService.GetPercentAsync(From.Replace("_", "."), To.Replace("_", "."));
        await Task.CompletedTask;
    }
    protected async void CreateDocument()
    {

        await excelService.GenerateWeatherPercentAsync(FromDate, ToDate, JS, allPercents, "export.xlsx");
    }
}
