using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using ScExpertDbLib.model;
using Attribute = ScExpertDbLib.model.Attribute;
using Task = ScExpertDbLib.model.Task;

namespace ScExpertDbLib;

public partial class ScexpertContext : DbContext
{
    public ScexpertContext()
    {
    }

    public ScexpertContext(DbContextOptions<ScexpertContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Adjdetloadatt> Adjdetloadatts { get; set; }

    public virtual DbSet<Adjustment> Adjustments { get; set; }

    public virtual DbSet<Adjustmentdetail> Adjustmentdetails { get; set; }

    public virtual DbSet<Alternatestreet> Alternatestreets { get; set; }

    public virtual DbSet<Asndetail> Asndetails { get; set; }

    public virtual DbSet<Asrsaisle> Asrsaisles { get; set; }

    public virtual DbSet<Asrsdeliverylocation> Asrsdeliverylocations { get; set; }

    public virtual DbSet<Asrshandofflocation> Asrshandofflocations { get; set; }

    public virtual DbSet<Asrsmfc> Asrsmfcs { get; set; }

    public virtual DbSet<Asrsservicelocation> Asrsservicelocations { get; set; }

    public virtual DbSet<Asrssubsystem> Asrssubsystems { get; set; }

    public virtual DbSet<Asrstask> Asrstasks { get; set; }

    public virtual DbSet<Attachment> Attachments { get; set; }

    public virtual DbSet<Attribute> Attributes { get; set; }

    public virtual DbSet<Attributevalidator> Attributevalidators { get; set; }

    public virtual DbSet<Audit> Audits { get; set; }

    public virtual DbSet<Auditstatus> Auditstatuses { get; set; }

    public virtual DbSet<AvailableInboundLine> AvailableInboundLines { get; set; }

    public virtual DbSet<Billingadditional> Billingadditionals { get; set; }

    public virtual DbSet<Billingagreementdetail> Billingagreementdetails { get; set; }

    public virtual DbSet<Billingagreementfilter> Billingagreementfilters { get; set; }

    public virtual DbSet<Billingagreementheader> Billingagreementheaders { get; set; }

    public virtual DbSet<Billingchargesdetail> Billingchargesdetails { get; set; }

    public virtual DbSet<Billingchargesdocument> Billingchargesdocuments { get; set; }

    public virtual DbSet<Billingchargesheader> Billingchargesheaders { get; set; }

    public virtual DbSet<Billingchargesload> Billingchargesloads { get; set; }

    public virtual DbSet<Billingload> Billingloads { get; set; }

    public virtual DbSet<Billingplugin> Billingplugins { get; set; }

    public virtual DbSet<Billingpriceequation> Billingpriceequations { get; set; }

    public virtual DbSet<Billingpriceequationsdailyparam> Billingpriceequationsdailyparams { get; set; }

    public virtual DbSet<Billingpriceequationsdailyparamsvalue> Billingpriceequationsdailyparamsvalues { get; set; }

    public virtual DbSet<Billingpriceequationsparam> Billingpriceequationsparams { get; set; }

    public virtual DbSet<Billingpricelistdetail> Billingpricelistdetails { get; set; }

    public virtual DbSet<Billingpricelistheader> Billingpricelistheaders { get; set; }

    public virtual DbSet<Bom> Boms { get; set; }

    public virtual DbSet<Carrier> Carriers { get; set; }

    public virtual DbSet<Codelist> Codelists { get; set; }

    public virtual DbSet<Codelistallowedit> Codelistallowedits { get; set; }

    public virtual DbSet<Codelistdetail> Codelistdetails { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<Companycontact> Companycontacts { get; set; }

    public virtual DbSet<Companydelivery> Companydeliveries { get; set; }

    public virtual DbSet<Compservicetime> Compservicetimes { get; set; }

    public virtual DbSet<Consignee> Consignees { get; set; }

    public virtual DbSet<Consigneebysku> Consigneebyskus { get; set; }

    public virtual DbSet<Consigneeplanpolicy> Consigneeplanpolicies { get; set; }

    public virtual DbSet<Consigneeputaway> Consigneeputaways { get; set; }

    public virtual DbSet<Consolidation> Consolidations { get; set; }

    public virtual DbSet<Consolidationdetail> Consolidationdetails { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<Container> Containers { get; set; }

    public virtual DbSet<Containerorder> Containerorders { get; set; }

    public virtual DbSet<Containerparallel> Containerparallels { get; set; }

    public virtual DbSet<Containertotal> Containertotals { get; set; }

    public virtual DbSet<Contload> Contloads { get; set; }

    public virtual DbSet<Countbook> Countbooks { get; set; }

    public virtual DbSet<Countbookaudit> Countbookaudits { get; set; }

    public virtual DbSet<Counter> Counters { get; set; }

    public virtual DbSet<Counting> Countings { get; set; }

    public virtual DbSet<Currentdate> Currentdates { get; set; }

    public virtual DbSet<Cyclecount> Cyclecounts { get; set; }

    public virtual DbSet<Delivery> Deliveries { get; set; }

    public virtual DbSet<Depot> Depots { get; set; }

    public virtual DbSet<Documentsslassign> Documentsslassigns { get; set; }

    public virtual DbSet<Doorschedule> Doorschedules { get; set; }

    public virtual DbSet<Drivertaskstran> Drivertaskstrans { get; set; }

    public virtual DbSet<Emptyhupickuppolicy> Emptyhupickuppolicies { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<Eventsregistration> Eventsregistrations { get; set; }

    public virtual DbSet<ExpectedAsnload> ExpectedAsnloads { get; set; }

    public virtual DbSet<Fixroute> Fixroutes { get; set; }

    public virtual DbSet<Fixroutesstop> Fixroutesstops { get; set; }

    public virtual DbSet<Flowthroughdetail> Flowthroughdetails { get; set; }

    public virtual DbSet<Flowthroughheader> Flowthroughheaders { get; set; }

    public virtual DbSet<Flowthroughload> Flowthroughloads { get; set; }

    public virtual DbSet<Handelingunittype> Handelingunittypes { get; set; }

    public virtual DbSet<Handlingequipment> Handlingequipments { get; set; }

    public virtual DbSet<Handlingunitstoragetemplate> Handlingunitstoragetemplates { get; set; }

    public virtual DbSet<Handlingunitstoragetemplatedetail> Handlingunitstoragetemplatedetails { get; set; }

    public virtual DbSet<Handlingunittransaction> Handlingunittransactions { get; set; }

    public virtual DbSet<Handoff> Handoffs { get; set; }

    public virtual DbSet<Hetype> Hetypes { get; set; }

    public virtual DbSet<Inboundorddetail> Inboundorddetails { get; set; }

    public virtual DbSet<Inboundorderview> Inboundorderviews { get; set; }

    public virtual DbSet<Inboundordheader> Inboundordheaders { get; set; }

    public virtual DbSet<InvCountGrid> InvCountGrids { get; set; }

    public virtual DbSet<InvSkuOpenOrder> InvSkuOpenOrders { get; set; }

    public virtual DbSet<Inventoryattributelist> Inventoryattributelists { get; set; }

    public virtual DbSet<Inventorytran> Inventorytrans { get; set; }

    public virtual DbSet<Invload> Invloads { get; set; }

    public virtual DbSet<Invloadinregion> Invloadinregions { get; set; }

    public virtual DbSet<Invstatus> Invstatuses { get; set; }

    public virtual DbSet<JobSchedule> JobSchedules { get; set; }

    public virtual DbSet<Label> Labels { get; set; }

    public virtual DbSet<Laborcalculationmethod> Laborcalculationmethods { get; set; }

    public virtual DbSet<Laborcalculationparameter> Laborcalculationparameters { get; set; }

    public virtual DbSet<Laborhandlingfactor> Laborhandlingfactors { get; set; }

    public virtual DbSet<Laborperformanceaudit> Laborperformanceaudits { get; set; }

    public virtual DbSet<Labortaskcalculation> Labortaskcalculations { get; set; }

    public virtual DbSet<Laborusercounter> Laborusercounters { get; set; }

    public virtual DbSet<Laborusercountercalculation> Laborusercountercalculations { get; set; }

    public virtual DbSet<Laboruserinformation> Laboruserinformations { get; set; }

    public virtual DbSet<LblCont> LblConts { get; set; }

    public virtual DbSet<LblContShip> LblContShips { get; set; }

    public virtual DbSet<LblLoad> LblLoads { get; set; }

    public virtual DbSet<LblLoadShip> LblLoadShips { get; set; }

    public virtual DbSet<LblLocation> LblLocations { get; set; }

    public virtual DbSet<LblOutboundOrder> LblOutboundOrders { get; set; }

    public virtual DbSet<LblPick> LblPicks { get; set; }

    public virtual DbSet<LblSku> LblSkus { get; set; }

    public virtual DbSet<LblTransshipment> LblTransshipments { get; set; }

    public virtual DbSet<Load> Loads { get; set; }

    public virtual DbSet<LoadUom> LoadUoms { get; set; }

    public virtual DbSet<Loadattribute> Loadattributes { get; set; }

    public virtual DbSet<LoadingPlanVehicleLocation> LoadingPlanVehicleLocations { get; set; }

    public virtual DbSet<Loadingplan> Loadingplans { get; set; }

    public virtual DbSet<Loadingplanpolicy> Loadingplanpolicies { get; set; }

    public virtual DbSet<Loadingplanview> Loadingplanviews { get; set; }

    public virtual DbSet<Loadingpolicieslookup> Loadingpolicieslookups { get; set; }

    public virtual DbSet<Loadsaccessibility> Loadsaccessibilities { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<Mapbitmap> Mapbitmaps { get; set; }

    public virtual DbSet<Mapdispobj> Mapdispobjs { get; set; }

    public virtual DbSet<Mapnetwork> Mapnetworks { get; set; }

    public virtual DbSet<Mapnetworkdistance> Mapnetworkdistances { get; set; }

    public virtual DbSet<Mappoint> Mappoints { get; set; }

    public virtual DbSet<Mappointtype> Mappointtypes { get; set; }

    public virtual DbSet<Mapterritory> Mapterritories { get; set; }

    public virtual DbSet<Mapterritoryboundary> Mapterritoryboundaries { get; set; }

    public virtual DbSet<Mapterritoryset> Mapterritorysets { get; set; }

    public virtual DbSet<Mhe> Mhes { get; set; }

    public virtual DbSet<Mheedgetype> Mheedgetypes { get; set; }

    public virtual DbSet<Orderheaderview> Orderheaderviews { get; set; }

    public virtual DbSet<Orderload> Orderloads { get; set; }

    public virtual DbSet<Orderrequirement> Orderrequirements { get; set; }

    public virtual DbSet<Ordersroutingparam> Ordersroutingparams { get; set; }

    public virtual DbSet<OutboundOrderPack> OutboundOrderPacks { get; set; }

    public virtual DbSet<Outboundorbomdetail> Outboundorbomdetails { get; set; }

    public virtual DbSet<Outboundordetail> Outboundordetails { get; set; }

    public virtual DbSet<Outboundordetailattribute> Outboundordetailattributes { get; set; }

    public virtual DbSet<Outboundorheader> Outboundorheaders { get; set; }

    public virtual DbSet<Outboundorheaderparam> Outboundorheaderparams { get; set; }

    public virtual DbSet<Outordertypeparam> Outordertypeparams { get; set; }

    public virtual DbSet<Packinglistdetail> Packinglistdetails { get; set; }

    public virtual DbSet<Packinglistheader> Packinglistheaders { get; set; }

    public virtual DbSet<Parallelpick> Parallelpicks { get; set; }

    public virtual DbSet<Parallelpickdetail> Parallelpickdetails { get; set; }

    public virtual DbSet<Pickdetail> Pickdetails { get; set; }

    public virtual DbSet<Pickdetailattribute> Pickdetailattributes { get; set; }

    public virtual DbSet<Pickheader> Pickheaders { get; set; }

    public virtual DbSet<Pickheaderview> Pickheaderviews { get; set; }

    public virtual DbSet<Pickingpolicy> Pickingpolicies { get; set; }

    public virtual DbSet<Pickloc> Picklocs { get; set; }

    public virtual DbSet<Picktaskspriority> Picktaskspriorities { get; set; }

    public virtual DbSet<Pickup> Pickups { get; set; }

    public virtual DbSet<Planparallelreleasestrategy> Planparallelreleasestrategies { get; set; }

    public virtual DbSet<Planstrategybreak> Planstrategybreaks { get; set; }

    public virtual DbSet<Planstrategydetail> Planstrategydetails { get; set; }

    public virtual DbSet<Planstrategyheader> Planstrategyheaders { get; set; }

    public virtual DbSet<Planstrategyrelease> Planstrategyreleases { get; set; }

    public virtual DbSet<Planstrategyscoring> Planstrategyscorings { get; set; }

    public virtual DbSet<PointedContact> PointedContacts { get; set; }

    public virtual DbSet<Pointscluster> Pointsclusters { get; set; }

    public virtual DbSet<Processvalidator> Processvalidators { get; set; }

    public virtual DbSet<Putawaypolicy> Putawaypolicies { get; set; }

    public virtual DbSet<Putawaypolicydetail> Putawaypolicydetails { get; set; }

    public virtual DbSet<Putawaypolicyscoring> Putawaypolicyscorings { get; set; }

    public virtual DbSet<Receiptdetail> Receiptdetails { get; set; }

    public virtual DbSet<Receiptdetailsku> Receiptdetailskus { get; set; }

    public virtual DbSet<Receiptheader> Receiptheaders { get; set; }

    public virtual DbSet<Receiptheaderview> Receiptheaderviews { get; set; }

    public virtual DbSet<Receivingexception> Receivingexceptions { get; set; }

    public virtual DbSet<RepCompanyByConsigee> RepCompanyByConsigees { get; set; }

    public virtual DbSet<RepCompanyByConsignee> RepCompanyByConsignees { get; set; }

    public virtual DbSet<RepContentList> RepContentLists { get; set; }

    public virtual DbSet<RepDriverManifest> RepDriverManifests { get; set; }

    public virtual DbSet<RepFlowthroughDelNote> RepFlowthroughDelNotes { get; set; }

    public virtual DbSet<RepFlowthrowghDelNote> RepFlowthrowghDelNotes { get; set; }

    public virtual DbSet<RepInvAdj> RepInvAdjs { get; set; }

    public virtual DbSet<RepInvByLoc> RepInvByLocs { get; set; }

    public virtual DbSet<RepInvBySku> RepInvBySkus { get; set; }

    public virtual DbSet<RepInvByStatus> RepInvByStatuses { get; set; }

    public virtual DbSet<RepInvOnHold> RepInvOnHolds { get; set; }

    public virtual DbSet<RepInvTran> RepInvTrans { get; set; }

    public virtual DbSet<RepLoadByStatus> RepLoadByStatuses { get; set; }

    public virtual DbSet<RepLoadingWorkSheet> RepLoadingWorkSheets { get; set; }

    public virtual DbSet<RepLocationStat> RepLocationStats { get; set; }

    public virtual DbSet<RepOutboundDelNote> RepOutboundDelNotes { get; set; }

    public virtual DbSet<RepPackingList> RepPackingLists { get; set; }

    public virtual DbSet<RepPickByItem> RepPickByItems { get; set; }

    public virtual DbSet<RepPickByOrder> RepPickByOrders { get; set; }

    public virtual DbSet<RepPickList> RepPickLists { get; set; }

    public virtual DbSet<RepPickLoc> RepPickLocs { get; set; }

    public virtual DbSet<RepPickerEfficiency> RepPickerEfficiencies { get; set; }

    public virtual DbSet<RepPickingPlanShort> RepPickingPlanShorts { get; set; }

    public virtual DbSet<RepProforma> RepProformas { get; set; }

    public virtual DbSet<RepPutAwayWorksheet> RepPutAwayWorksheets { get; set; }

    public virtual DbSet<RepReceivingByConsignee> RepReceivingByConsignees { get; set; }

    public virtual DbSet<RepReceivingBySku> RepReceivingBySkus { get; set; }

    public virtual DbSet<RepReceivingDetail> RepReceivingDetails { get; set; }

    public virtual DbSet<RepReceivingDiscrepancy> RepReceivingDiscrepancies { get; set; }

    public virtual DbSet<RepReceivingManifest> RepReceivingManifests { get; set; }

    public virtual DbSet<RepReceivingSummary> RepReceivingSummaries { get; set; }

    public virtual DbSet<RepReceivingWorksheet> RepReceivingWorksheets { get; set; }

    public virtual DbSet<RepRerShipSku> RepRerShipSkus { get; set; }

    public virtual DbSet<RepShipBranch> RepShipBranches { get; set; }

    public virtual DbSet<RepShipDesc> RepShipDescs { get; set; }

    public virtual DbSet<RepShipDetail> RepShipDetails { get; set; }

    public virtual DbSet<RepShipList> RepShipLists { get; set; }

    public virtual DbSet<RepShipMan> RepShipMen { get; set; }

    public virtual DbSet<RepShipSum> RepShipSums { get; set; }

    public virtual DbSet<RepShippedOrder> RepShippedOrders { get; set; }

    public virtual DbSet<RepTranshipmentDelNote> RepTranshipmentDelNotes { get; set; }

    public virtual DbSet<Replenishment> Replenishments { get; set; }

    public virtual DbSet<ReplenishmentView> ReplenishmentViews { get; set; }

    public virtual DbSet<Replpolicy> Replpolicies { get; set; }

    public virtual DbSet<Replpolicydetail> Replpolicydetails { get; set; }

    public virtual DbSet<Replpolicyscoring> Replpolicyscorings { get; set; }

    public virtual DbSet<Result> Results { get; set; }

    public virtual DbSet<Route> Routes { get; set; }

    public virtual DbSet<Routebreak> Routebreaks { get; set; }

    public virtual DbSet<Routebreaktype> Routebreaktypes { get; set; }

    public virtual DbSet<Routecolor> Routecolors { get; set; }

    public virtual DbSet<Routepackage> Routepackages { get; set; }

    public virtual DbSet<Routestop> Routestops { get; set; }

    public virtual DbSet<Routestopdetail> Routestopdetails { get; set; }

    public virtual DbSet<Routestopstatus> Routestopstatuses { get; set; }

    public virtual DbSet<Routestoptask> Routestoptasks { get; set; }

    public virtual DbSet<Routestoptaskitem> Routestoptaskitems { get; set; }

    public virtual DbSet<Routestoptaskpackage> Routestoptaskpackages { get; set; }

    public virtual DbSet<Routetask> Routetasks { get; set; }

    public virtual DbSet<Routingconstraint> Routingconstraints { get; set; }

    public virtual DbSet<Routinglog> Routinglogs { get; set; }

    public virtual DbSet<Routingorder> Routingorders { get; set; }

    public virtual DbSet<Routingparam> Routingparams { get; set; }

    public virtual DbSet<Routingplanstrategy> Routingplanstrategies { get; set; }

    public virtual DbSet<Routingpolicybreak> Routingpolicybreaks { get; set; }

    public virtual DbSet<Routingpolicyvehicleallocation> Routingpolicyvehicleallocations { get; set; }

    public virtual DbSet<Routingrequirement> Routingrequirements { get; set; }

    public virtual DbSet<Routingset> Routingsets { get; set; }

    public virtual DbSet<Routingsetorder> Routingsetorders { get; set; }

    public virtual DbSet<Routingstrategydetail> Routingstrategydetails { get; set; }

    public virtual DbSet<Routingstrategyheader> Routingstrategyheaders { get; set; }

    public virtual DbSet<Routingtimeparam> Routingtimeparams { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<Serviceleveldefinition> Serviceleveldefinitions { get; set; }

    public virtual DbSet<Shift> Shifts { get; set; }

    public virtual DbSet<Shiftdetail> Shiftdetails { get; set; }

    public virtual DbSet<Shiftmaster> Shiftmasters { get; set; }

    public virtual DbSet<Shiftmastertimeblock> Shiftmastertimeblocks { get; set; }

    public virtual DbSet<Shiftschedule> Shiftschedules { get; set; }

    public virtual DbSet<Shifttaskdelay> Shifttaskdelays { get; set; }

    public virtual DbSet<Shifttimeblock> Shifttimeblocks { get; set; }

    public virtual DbSet<Shiftuserclock> Shiftuserclocks { get; set; }

    public virtual DbSet<Shipment> Shipments { get; set; }

    public virtual DbSet<ShipmentAssignOrder> ShipmentAssignOrders { get; set; }

    public virtual DbSet<Shipmentassignment> Shipmentassignments { get; set; }

    public virtual DbSet<Shipmentdetailsview> Shipmentdetailsviews { get; set; }

    public virtual DbSet<Shipmentload> Shipmentloads { get; set; }

    public virtual DbSet<Shipmentrequirement> Shipmentrequirements { get; set; }

    public virtual DbSet<Shipmentview> Shipmentviews { get; set; }

    public virtual DbSet<Site> Sites { get; set; }

    public virtual DbSet<Sku> Skus { get; set; }

    public virtual DbSet<Skuattribute> Skuattributes { get; set; }

    public virtual DbSet<Skuattributelist> Skuattributelists { get; set; }

    public virtual DbSet<Skubylocation> Skubylocations { get; set; }

    public virtual DbSet<Skucl> Skucls { get; set; }

    public virtual DbSet<Skuclsatt> Skuclsatts { get; set; }

    public virtual DbSet<Skuclsloadatt> Skuclsloadatts { get; set; }

    public virtual DbSet<Skuclsloaddetatt> Skuclsloaddetatts { get; set; }

    public virtual DbSet<Skusubstitute> Skusubstitutes { get; set; }

    public virtual DbSet<Skuuom> Skuuoms { get; set; }

    public virtual DbSet<Skuuomdesc> Skuuomdescs { get; set; }

    public virtual DbSet<Staginglaneassignment> Staginglaneassignments { get; set; }

    public virtual DbSet<StorageBillingBase> StorageBillingBases { get; set; }

    public virtual DbSet<Synonym> Synonyms { get; set; }

    public virtual DbSet<SysUser> SysUsers { get; set; }

    public virtual DbSet<TalkmanGetPick> TalkmanGetPicks { get; set; }

    public virtual DbSet<TalkmanLogin> TalkmanLogins { get; set; }

    public virtual DbSet<TalkmanPick> TalkmanPicks { get; set; }

    public virtual DbSet<TalkmanPickingInfo> TalkmanPickingInfos { get; set; }

    public virtual DbSet<TalkmanTaskAssignment> TalkmanTaskAssignments { get; set; }

    public virtual DbSet<TalkmanVoiceList> TalkmanVoiceLists { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<Taskassignpolicydetail> Taskassignpolicydetails { get; set; }

    public virtual DbSet<Taskassignpolicyheader> Taskassignpolicyheaders { get; set; }

    public virtual DbSet<Taskpolicyscoring> Taskpolicyscorings { get; set; }

    public virtual DbSet<Transport> Transports { get; set; }

    public virtual DbSet<Transportationorder> Transportationorders { get; set; }

    public virtual DbSet<Transshipment> Transshipments { get; set; }

    public virtual DbSet<Unroutedorder> Unroutedorders { get; set; }

    public virtual DbSet<Useravailabletask> Useravailabletasks { get; set; }

    public virtual DbSet<Userskill> Userskills { get; set; }

    public virtual DbSet<Usertaskassignment> Usertaskassignments { get; set; }

    public virtual DbSet<Userwharea> Userwhareas { get; set; }

    public virtual DbSet<VAdditionalRoutingRequirement> VAdditionalRoutingRequirements { get; set; }

    public virtual DbSet<VAdjustment> VAdjustments { get; set; }

    public virtual DbSet<VAllocationOnHand> VAllocationOnHands { get; set; }

    public virtual DbSet<VAsndetail> VAsndetails { get; set; }

    public virtual DbSet<VAudit> VAudits { get; set; }

    public virtual DbSet<VBillingChargesByRunIddetail> VBillingChargesByRunIddetails { get; set; }

    public virtual DbSet<VBillingChargesByRunIdheader> VBillingChargesByRunIdheaders { get; set; }

    public virtual DbSet<VBillingChargesPerChargeText> VBillingChargesPerChargeTexts { get; set; }

    public virtual DbSet<VBillingChargesPerClient> VBillingChargesPerClients { get; set; }

    public virtual DbSet<VBillingChargesPerTransactionType> VBillingChargesPerTransactionTypes { get; set; }

    public virtual DbSet<VBillingChargesPerTransactionTypeSixMonth> VBillingChargesPerTransactionTypeSixMonths { get; set; }

    public virtual DbSet<VBillingLoad> VBillingLoads { get; set; }

    public virtual DbSet<VBillingagreementdetail> VBillingagreementdetails { get; set; }

    public virtual DbSet<VCancelLoadReceive> VCancelLoadReceives { get; set; }

    public virtual DbSet<VClusterPointDist> VClusterPointDists { get; set; }

    public virtual DbSet<VCompContact> VCompContacts { get; set; }

    public virtual DbSet<VCompany> VCompanies { get; set; }

    public virtual DbSet<VCompanyContact> VCompanyContacts { get; set; }

    public virtual DbSet<VCompletedPutawayTasksPerPutRegion> VCompletedPutawayTasksPerPutRegions { get; set; }

    public virtual DbSet<VCompletedReplTasksPerPickRegion> VCompletedReplTasksPerPickRegions { get; set; }

    public virtual DbSet<VConsolidationDetail> VConsolidationDetails { get; set; }

    public virtual DbSet<VContactbatchmatch> VContactbatchmatches { get; set; }

    public virtual DbSet<VContactfordistacecalc> VContactfordistacecalcs { get; set; }

    public virtual DbSet<VContainerContent> VContainerContents { get; set; }

    public virtual DbSet<VContainerLoad> VContainerLoads { get; set; }

    public virtual DbSet<VContainerLoadsDetail> VContainerLoadsDetails { get; set; }

    public virtual DbSet<VContainerLoadsPlanner> VContainerLoadsPlanners { get; set; }

    public virtual DbSet<VCountBook> VCountBooks { get; set; }

    public virtual DbSet<VCountBookDiscrepancy> VCountBookDiscrepancies { get; set; }

    public virtual DbSet<VCountBookLocationSummary> VCountBookLocationSummaries { get; set; }

    public virtual DbSet<VCountBookTask> VCountBookTasks { get; set; }

    public virtual DbSet<VCountJob> VCountJobs { get; set; }

    public virtual DbSet<VCurrentUsersPerformance> VCurrentUsersPerformances { get; set; }

    public virtual DbSet<VDashBoardDailyRoute> VDashBoardDailyRoutes { get; set; }

    public virtual DbSet<VDashBoardRoute> VDashBoardRoutes { get; set; }

    public virtual DbSet<VDashBoardTruck> VDashBoardTrucks { get; set; }

    public virtual DbSet<VDeliveryArrivalStatusPerWeek> VDeliveryArrivalStatusPerWeeks { get; set; }

    public virtual DbSet<VDeliveryPackageProgressPercent> VDeliveryPackageProgressPercents { get; set; }

    public virtual DbSet<VDeliveryProgress> VDeliveryProgresses { get; set; }

    public virtual DbSet<VDeliveryProgressPerDay> VDeliveryProgressPerDays { get; set; }

    public virtual DbSet<VDeliveryProgressRouteCompletedStop> VDeliveryProgressRouteCompletedStops { get; set; }

    public virtual DbSet<VDeliveryProgressRoutePackage> VDeliveryProgressRoutePackages { get; set; }

    public virtual DbSet<VDeliveryProgressRouteStop> VDeliveryProgressRouteStops { get; set; }

    public virtual DbSet<VDeliveryProgressSucccesfulCompletedPerDay> VDeliveryProgressSucccesfulCompletedPerDays { get; set; }

    public virtual DbSet<VDeliveryProgressTotalPerDay> VDeliveryProgressTotalPerDays { get; set; }

    public virtual DbSet<VDeliveryStopProgressPercent> VDeliveryStopProgressPercents { get; set; }

    public virtual DbSet<VDisassmbleWorkOrderBom> VDisassmbleWorkOrderBoms { get; set; }

    public virtual DbSet<VDistanceMatrix> VDistanceMatrices { get; set; }

    public virtual DbSet<VFlowthroughdetail> VFlowthroughdetails { get; set; }

    public virtual DbSet<VGaparam> VGaparams { get; set; }

    public virtual DbSet<VHandOff> VHandOffs { get; set; }

    public virtual DbSet<VInboundContact> VInboundContacts { get; set; }

    public virtual DbSet<VInboundorddetail> VInboundorddetails { get; set; }

    public virtual DbSet<VInboundordheader> VInboundordheaders { get; set; }

    public virtual DbSet<VInvOnHoldNotification> VInvOnHoldNotifications { get; set; }

    public virtual DbSet<VInventoryByConsignee> VInventoryByConsignees { get; set; }

    public virtual DbSet<VInventoryByLocation> VInventoryByLocations { get; set; }

    public virtual DbSet<VInventorytran> VInventorytrans { get; set; }

    public virtual DbSet<VInvloadsku> VInvloadskus { get; set; }

    public virtual DbSet<VLaborFromLocation> VLaborFromLocations { get; set; }

    public virtual DbSet<VLaborMhe> VLaborMhes { get; set; }

    public virtual DbSet<VLaborSku> VLaborSkus { get; set; }

    public virtual DbSet<VLaborSkuuom> VLaborSkuuoms { get; set; }

    public virtual DbSet<VLaborTask> VLaborTasks { get; set; }

    public virtual DbSet<VLaborToLocation> VLaborToLocations { get; set; }

    public virtual DbSet<VLimboAdjustNotification> VLimboAdjustNotifications { get; set; }

    public virtual DbSet<VLimboSku> VLimboSkus { get; set; }

    public virtual DbSet<VLoad> VLoads { get; set; }

    public virtual DbSet<VLoadCycleCount> VLoadCycleCounts { get; set; }

    public virtual DbSet<VLoadCycleCountNumLoad> VLoadCycleCountNumLoads { get; set; }

    public virtual DbSet<VLoadExpired> VLoadExpireds { get; set; }

    public virtual DbSet<VLoadPreExpired> VLoadPreExpireds { get; set; }

    public virtual DbSet<VLoadattributesdesk> VLoadattributesdesks { get; set; }

    public virtual DbSet<VLoadingContainer> VLoadingContainers { get; set; }

    public virtual DbSet<VLoadingLoad> VLoadingLoads { get; set; }

    public virtual DbSet<VLoadingNoteAddSku> VLoadingNoteAddSkus { get; set; }

    public virtual DbSet<VLoadingNoteContainer> VLoadingNoteContainers { get; set; }

    public virtual DbSet<VLoadingNoteCreateContainer> VLoadingNoteCreateContainers { get; set; }

    public virtual DbSet<VLoadsCont> VLoadsConts { get; set; }

    public virtual DbSet<VLoadsPutaway> VLoadsPutaways { get; set; }

    public virtual DbSet<VLocationCycleCount> VLocationCycleCounts { get; set; }

    public virtual DbSet<VLocationCycleCountNumLocation> VLocationCycleCountNumLocations { get; set; }

    public virtual DbSet<VLocationGrid> VLocationGrids { get; set; }

    public virtual DbSet<VLocationHutypeContent> VLocationHutypeContents { get; set; }

    public virtual DbSet<VLocationOccupancy> VLocationOccupancies { get; set; }

    public virtual DbSet<VLocationOccupancySummary> VLocationOccupancySummaries { get; set; }

    public virtual DbSet<VLocationProblemNotification> VLocationProblemNotifications { get; set; }

    public virtual DbSet<VMainAvailableTasksByType> VMainAvailableTasksByTypes { get; set; }

    public virtual DbSet<VMainEmptyLocation> VMainEmptyLocations { get; set; }

    public virtual DbSet<VMainInvSt> VMainInvSts { get; set; }

    public virtual DbSet<VMainOutboundStatus> VMainOutboundStatuses { get; set; }

    public virtual DbSet<VMainPicksPerHourT> VMainPicksPerHourTs { get; set; }

    public virtual DbSet<VMainRecShp> VMainRecShps { get; set; }

    public virtual DbSet<VMainTopPicker> VMainTopPickers { get; set; }

    public virtual DbSet<VMainWarehouseActivity> VMainWarehouseActivities { get; set; }

    public virtual DbSet<VMapTerritory> VMapTerritories { get; set; }

    public virtual DbSet<VMapterritoryboundary> VMapterritoryboundaries { get; set; }

    public virtual DbSet<VMobileAsndetail> VMobileAsndetails { get; set; }

    public virtual DbSet<VMobileCld1> VMobileCld1s { get; set; }

    public virtual DbSet<VMobileCmx1> VMobileCmx1s { get; set; }

    public virtual DbSet<VMobileCnt2> VMobileCnt2s { get; set; }

    public virtual DbSet<VMobileCntpwcnf> VMobileCntpwcnfs { get; set; }

    public virtual DbSet<VMobileCnttask> VMobileCnttasks { get; set; }

    public virtual DbSet<VMobileCnttask0> VMobileCnttask0s { get; set; }

    public virtual DbSet<VMobileCnttask1> VMobileCnttask1s { get; set; }

    public virtual DbSet<VMobileCnttaskverfication> VMobileCnttaskverfications { get; set; }

    public virtual DbSet<VMobileDel> VMobileDels { get; set; }

    public virtual DbSet<VMobileEvachu1> VMobileEvachu1s { get; set; }

    public virtual DbSet<VMobileLoadInq1> VMobileLoadInq1s { get; set; }

    public virtual DbSet<VMobileLocconttask2> VMobileLocconttask2s { get; set; }

    public virtual DbSet<VMobileMov2> VMobileMov2s { get; set; }

    public virtual DbSet<VMobileParpck1> VMobileParpck1s { get; set; }

    public virtual DbSet<VMobilePck> VMobilePcks { get; set; }

    public virtual DbSet<VMobileReceiveById1> VMobileReceiveById1s { get; set; }

    public virtual DbSet<VMobileReceiveById2> VMobileReceiveById2s { get; set; }

    public virtual DbSet<VMobileRepl1> VMobileRepl1s { get; set; }

    public virtual DbSet<VMobileRepl2> VMobileRepl2s { get; set; }

    public virtual DbSet<VMobileRpk2> VMobileRpk2s { get; set; }

    public virtual DbSet<VMobileShipOrder1> VMobileShipOrder1s { get; set; }

    public virtual DbSet<VMobileSkuInq2> VMobileSkuInq2s { get; set; }

    public virtual DbSet<VMobileTaskManager> VMobileTaskManagers { get; set; }

    public virtual DbSet<VOpenPickDetailsPerPickRegion> VOpenPickDetailsPerPickRegions { get; set; }

    public virtual DbSet<VOrderShipNotification> VOrderShipNotifications { get; set; }

    public virtual DbSet<VOrderShipShortNotification> VOrderShipShortNotifications { get; set; }

    public virtual DbSet<VOrdersAutomation> VOrdersAutomations { get; set; }

    public virtual DbSet<VOrdersAutomationShipmentAssign> VOrdersAutomationShipmentAssigns { get; set; }

    public virtual DbSet<VOrdersAutomationWaveAssign> VOrdersAutomationWaveAssigns { get; set; }

    public virtual DbSet<VOrdersContact> VOrdersContacts { get; set; }

    public virtual DbSet<VOrdersParam> VOrdersParams { get; set; }

    public virtual DbSet<VOutboundContact> VOutboundContacts { get; set; }

    public virtual DbSet<VOutboundOrderAssignToSl> VOutboundOrderAssignToSls { get; set; }

    public virtual DbSet<VOutboundOrderHeader> VOutboundOrderHeaders { get; set; }

    public virtual DbSet<VOutboundOrderSubstitutionSku> VOutboundOrderSubstitutionSkus { get; set; }

    public virtual DbSet<VOutboundOrdersStatus> VOutboundOrdersStatuses { get; set; }

    public virtual DbSet<VOutboundorderLoad> VOutboundorderLoads { get; set; }

    public virtual DbSet<VOutboundordetail> VOutboundordetails { get; set; }

    public virtual DbSet<VPackingList> VPackingLists { get; set; }

    public virtual DbSet<VPackingListHeader> VPackingListHeaders { get; set; }

    public virtual DbSet<VParallelPickingDetail> VParallelPickingDetails { get; set; }

    public virtual DbSet<VPickLabel> VPickLabels { get; set; }

    public virtual DbSet<VPickLoc> VPickLocs { get; set; }

    public virtual DbSet<VPickLocAllocationInventory> VPickLocAllocationInventories { get; set; }

    public virtual DbSet<VPickdetail> VPickdetails { get; set; }

    public virtual DbSet<VPlannerInventory> VPlannerInventories { get; set; }

    public virtual DbSet<VProductionOrder> VProductionOrders { get; set; }

    public virtual DbSet<VPutAway> VPutAways { get; set; }

    public virtual DbSet<VPutAwayBkp> VPutAwayBkps { get; set; }

    public virtual DbSet<VPutAwayPvw> VPutAwayPvws { get; set; }

    public virtual DbSet<VPutAwayVw> VPutAwayVws { get; set; }

    public virtual DbSet<VPutawayLocationContent> VPutawayLocationContents { get; set; }

    public virtual DbSet<VReceipLoad> VReceipLoads { get; set; }

    public virtual DbSet<VReceiptAppointment> VReceiptAppointments { get; set; }

    public virtual DbSet<VReceiptDetail> VReceiptDetails { get; set; }

    public virtual DbSet<VReceiptSummary> VReceiptSummaries { get; set; }

    public virtual DbSet<VReceivingexception> VReceivingexceptions { get; set; }

    public virtual DbSet<VRecieptClosedNotification> VRecieptClosedNotifications { get; set; }

    public virtual DbSet<VReplanRoute> VReplanRoutes { get; set; }

    public virtual DbSet<VReplanRunId> VReplanRunIds { get; set; }

    public virtual DbSet<VReplenishment> VReplenishments { get; set; }

    public virtual DbSet<VReplenishmentInventory> VReplenishmentInventories { get; set; }

    public virtual DbSet<VRoute> VRoutes { get; set; }

    public virtual DbSet<VRouteDepartedNotification> VRouteDepartedNotifications { get; set; }

    public virtual DbSet<VRouteGeneralTask> VRouteGeneralTasks { get; set; }

    public virtual DbSet<VRouteHeaderView> VRouteHeaderViews { get; set; }

    public virtual DbSet<VRoutePackage> VRoutePackages { get; set; }

    public virtual DbSet<VRouteReturnedNotification> VRouteReturnedNotifications { get; set; }

    public virtual DbSet<VRouteSetDisplay> VRouteSetDisplays { get; set; }

    public virtual DbSet<VRouteStop> VRouteStops { get; set; }

    public virtual DbSet<VRouteStopPkgSum> VRouteStopPkgSums { get; set; }

    public virtual DbSet<VRouteStopTaskGroup> VRouteStopTaskGroups { get; set; }

    public virtual DbSet<VRouteStopTasksAssign> VRouteStopTasksAssigns { get; set; }

    public virtual DbSet<VRouteStopsHeader1> VRouteStopsHeaders1 { get; set; }

    public virtual DbSet<VRouteTasksCashReceive> VRouteTasksCashReceives { get; set; }

    public virtual DbSet<VRoutingAssignOrder> VRoutingAssignOrders { get; set; }

    public virtual DbSet<VRoutingAssignRequirement> VRoutingAssignRequirements { get; set; }

    public virtual DbSet<VRoutingPolicyStartEndPoint> VRoutingPolicyStartEndPoints { get; set; }

    public virtual DbSet<VRoutingRequirementActiveRoute> VRoutingRequirementActiveRoutes { get; set; }

    public virtual DbSet<VRoutingResource> VRoutingResources { get; set; }

    public virtual DbSet<VRoutingSetAvailableRequirement> VRoutingSetAvailableRequirements { get; set; }

    public virtual DbSet<VRoutingSetRequirement> VRoutingSetRequirements { get; set; }

    public virtual DbSet<VRoutingVehicleAvailability> VRoutingVehicleAvailabilities { get; set; }

    public virtual DbSet<VRoutingplanstrategy> VRoutingplanstrategies { get; set; }

    public virtual DbSet<VRoutingpolicyvehicleallocation> VRoutingpolicyvehicleallocations { get; set; }

    public virtual DbSet<VRoutingpolicyvehicleallocationbase> VRoutingpolicyvehicleallocationbases { get; set; }

    public virtual DbSet<VRoutingrequirementsplaceUnrouted> VRoutingrequirementsplaceUnrouteds { get; set; }

    public virtual DbSet<VRoutingset> VRoutingsets { get; set; }

    public virtual DbSet<VRoutingsetUnassignedRequirement> VRoutingsetUnassignedRequirements { get; set; }

    public virtual DbSet<VRoutingsetUnassignedRequirements1> VRoutingsetUnassignedRequirements1s { get; set; }

    public virtual DbSet<VSchedulerYardAppointment> VSchedulerYardAppointments { get; set; }

    public virtual DbSet<VSerialManifest> VSerialManifests { get; set; }

    public virtual DbSet<VShift> VShifts { get; set; }

    public virtual DbSet<VShiftCurrentPerformance> VShiftCurrentPerformances { get; set; }

    public virtual DbSet<VShiftPerformance> VShiftPerformances { get; set; }

    public virtual DbSet<VShiftPerformanceSummary> VShiftPerformanceSummaries { get; set; }

    public virtual DbSet<VShiftTaskPerformance> VShiftTaskPerformances { get; set; }

    public virtual DbSet<VShiftUsersPerformance> VShiftUsersPerformances { get; set; }

    public virtual DbSet<VShipingManifestDetail> VShipingManifestDetails { get; set; }

    public virtual DbSet<VShipingManifestHeader> VShipingManifestHeaders { get; set; }

    public virtual DbSet<VShipment> VShipments { get; set; }

    public virtual DbSet<VShipmentAppointment> VShipmentAppointments { get; set; }

    public virtual DbSet<VShipmentLoad> VShipmentLoads { get; set; }

    public virtual DbSet<VShipmentShippedNotification> VShipmentShippedNotifications { get; set; }

    public virtual DbSet<VShipmentSummary> VShipmentSummaries { get; set; }

    public virtual DbSet<VShipmentUnloadingLoad> VShipmentUnloadingLoads { get; set; }

    public virtual DbSet<VShipmentassignment> VShipmentassignments { get; set; }

    public virtual DbSet<VShippedFutureOutbound> VShippedFutureOutbounds { get; set; }

    public virtual DbSet<VShippedOutboundOrdersWeekly> VShippedOutboundOrdersWeeklies { get; set; }

    public virtual DbSet<VShippedOutboundWeekly> VShippedOutboundWeeklies { get; set; }

    public virtual DbSet<VShowCompContact> VShowCompContacts { get; set; }

    public virtual DbSet<VShowRoute> VShowRoutes { get; set; }

    public virtual DbSet<VShowRouteInfoDetail> VShowRouteInfoDetails { get; set; }

    public virtual DbSet<VShowRouteStatistic> VShowRouteStatistics { get; set; }

    public virtual DbSet<VShowRoutingSet> VShowRoutingSets { get; set; }

    public virtual DbSet<VShowUnrouted> VShowUnrouteds { get; set; }

    public virtual DbSet<VShowVehiclePosition> VShowVehiclePositions { get; set; }

    public virtual DbSet<VSku> VSkus { get; set; }

    public virtual DbSet<VSkuSubstitute> VSkuSubstitutes { get; set; }

    public virtual DbSet<VSkucode> VSkucodes { get; set; }

    public virtual DbSet<VSl> VSls { get; set; }

    public virtual DbSet<VSlplanner> VSlplanners { get; set; }

    public virtual DbSet<VSnapShot> VSnapShots { get; set; }

    public virtual DbSet<VSourceRoutingrequirement> VSourceRoutingrequirements { get; set; }

    public virtual DbSet<VTask> VTasks { get; set; }

    public virtual DbSet<VTaskPerformanceSummary> VTaskPerformanceSummaries { get; set; }

    public virtual DbSet<VTodayDelivery> VTodayDeliveries { get; set; }

    public virtual DbSet<VUserPerformanceSummary> VUserPerformanceSummaries { get; set; }

    public virtual DbSet<VUserTaskAssignment> VUserTaskAssignments { get; set; }

    public virtual DbSet<VUsersClockIn> VUsersClockIns { get; set; }

    public virtual DbSet<VVehicleDriver> VVehicleDrivers { get; set; }

    public virtual DbSet<VVehicleLastPo> VVehicleLastPos { get; set; }

    public virtual DbSet<VVehiclePosition> VVehiclePositions { get; set; }

    public virtual DbSet<VVehiclePositionSearch> VVehiclePositionSearches { get; set; }

    public virtual DbSet<VVehicleRoute> VVehicleRoutes { get; set; }

    public virtual DbSet<VVehiclepositionsshvpGrid> VVehiclepositionsshvpGrids { get; set; }

    public virtual DbSet<VWaveAssignOrder> VWaveAssignOrders { get; set; }

    public virtual DbSet<VWaveHeader> VWaveHeaders { get; set; }

    public virtual DbSet<VWaveOrderSummary> VWaveOrderSummaries { get; set; }

    public virtual DbSet<VWavePicksSummary> VWavePicksSummaries { get; set; }

    public virtual DbSet<VWaveProgressPerDay> VWaveProgressPerDays { get; set; }

    public virtual DbSet<VWaveReleasedNtf> VWaveReleasedNtfs { get; set; }

    public virtual DbSet<VWaveassignment> VWaveassignments { get; set; }

    public virtual DbSet<VWhactivity> VWhactivities { get; set; }

    public virtual DbSet<VWhactivityViewer> VWhactivityViewers { get; set; }

    public virtual DbSet<VWhlocationsViewer> VWhlocationsViewers { get; set; }

    public virtual DbSet<VWhmapEdge> VWhmapEdges { get; set; }

    public virtual DbSet<VWhmapNode> VWhmapNodes { get; set; }

    public virtual DbSet<VWorkOrderBom> VWorkOrderBoms { get; set; }

    public virtual DbSet<VWorkOrderCompleteNotification> VWorkOrderCompleteNotifications { get; set; }

    public virtual DbSet<VWorkOrderDisAssembleLoad> VWorkOrderDisAssembleLoads { get; set; }

    public virtual DbSet<VWorkOrderHeader> VWorkOrderHeaders { get; set; }

    public virtual DbSet<VWorkOrderLoad> VWorkOrderLoads { get; set; }

    public virtual DbSet<VWorkOrderSelectLoad> VWorkOrderSelectLoads { get; set; }

    public virtual DbSet<VWorkOrderValueAdded> VWorkOrderValueAddeds { get; set; }

    public virtual DbSet<VYardAppointment> VYardAppointments { get; set; }

    public virtual DbSet<VYardAppointmentsDoorResource> VYardAppointmentsDoorResources { get; set; }

    public virtual DbSet<VYardAppointmentsRequirement> VYardAppointmentsRequirements { get; set; }

    public virtual DbSet<VYardEquipmentDisplayTypesId> VYardEquipmentDisplayTypesIds { get; set; }

    public virtual DbSet<VYardGatesActivityAudit> VYardGatesActivityAudits { get; set; }

    public virtual DbSet<VYardLocation> VYardLocations { get; set; }

    public virtual DbSet<VYardMovement> VYardMovements { get; set; }

    public virtual DbSet<VYardVehiclesPosition> VYardVehiclesPositions { get; set; }

    public virtual DbSet<VZoneReplCurrentInventoryLevel> VZoneReplCurrentInventoryLevels { get; set; }

    public virtual DbSet<VZoneReplenishment> VZoneReplenishments { get; set; }

    public virtual DbSet<VZonereplinventorylevel> VZonereplinventorylevels { get; set; }

    public virtual DbSet<Vcomp> Vcomps { get; set; }

    public virtual DbSet<Vdepot> Vdepots { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    public virtual DbSet<Vehiclecontainer> Vehiclecontainers { get; set; }

    public virtual DbSet<Vehicledriver> Vehicledrivers { get; set; }

    public virtual DbSet<Vehiclelocation> Vehiclelocations { get; set; }

    public virtual DbSet<Vehicleposition> Vehiclepositions { get; set; }

    public virtual DbSet<Vehicleroute> Vehicleroutes { get; set; }

    public virtual DbSet<Vehicleroutepoint> Vehicleroutepoints { get; set; }

    public virtual DbSet<Vehicletype> Vehicletypes { get; set; }

    public virtual DbSet<Vehicletypebayheight> Vehicletypebayheights { get; set; }

    public virtual DbSet<Vehicletypebaywidth> Vehicletypebaywidths { get; set; }

    public virtual DbSet<Vehicletypesidewidth> Vehicletypesidewidths { get; set; }

    public virtual DbSet<Vehicletypetransportationclass> Vehicletypetransportationclasses { get; set; }

    public virtual DbSet<Vgeneraltask> Vgeneraltasks { get; set; }

    public virtual DbSet<Vrouteheader> Vrouteheaders { get; set; }

    public virtual DbSet<VroutestopsHeader> VroutestopsHeaders { get; set; }

    public virtual DbSet<Vxdockdeliveryloc> Vxdockdeliverylocs { get; set; }

    public virtual DbSet<Warehousearea> Warehouseareas { get; set; }

    public virtual DbSet<Warehousemapaisle> Warehousemapaisles { get; set; }

    public virtual DbSet<Warehousemapaislesedge> Warehousemapaislesedges { get; set; }

    public virtual DbSet<Warehousemapedge> Warehousemapedges { get; set; }

    public virtual DbSet<Warehousemapnode> Warehousemapnodes { get; set; }

    public virtual DbSet<Wave> Waves { get; set; }

    public virtual DbSet<WaveControlManager> WaveControlManagers { get; set; }

    public virtual DbSet<Waveassignment> Waveassignments { get; set; }

    public virtual DbSet<Waveexception> Waveexceptions { get; set; }

    public virtual DbSet<Wavetask> Wavetasks { get; set; }

    public virtual DbSet<Wavetype> Wavetypes { get; set; }

    public virtual DbSet<Whactivity> Whactivities { get; set; }

    public virtual DbSet<Workorderbom> Workorderboms { get; set; }

    public virtual DbSet<Workorderheader> Workorderheaders { get; set; }

    public virtual DbSet<Xdockdeliveryloc> Xdockdeliverylocs { get; set; }

    public virtual DbSet<YardAppointmentsDoorTimeSlot> YardAppointmentsDoorTimeSlots { get; set; }

    public virtual DbSet<YardDoorsEndTimePerDay> YardDoorsEndTimePerDays { get; set; }

    public virtual DbSet<YardDoorsStartTimePerDay> YardDoorsStartTimePerDays { get; set; }

    public virtual DbSet<Yardappointment> Yardappointments { get; set; }

    public virtual DbSet<Yardcheckin> Yardcheckins { get; set; }

    public virtual DbSet<Yardcheckout> Yardcheckouts { get; set; }

    public virtual DbSet<Yardequipment> Yardequipments { get; set; }

    public virtual DbSet<Yardlocation> Yardlocations { get; set; }

    public virtual DbSet<Yardmovement> Yardmovements { get; set; }

    public virtual DbSet<Yardparameter> Yardparameters { get; set; }

    public virtual DbSet<Zonereplinventorylevel> Zonereplinventorylevels { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=192.168.2.108;Initial Catalog=SCEXPERT;User ID=sa;Password=sta@0303;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<Adjdetloadatt>(entity =>
        {
            entity.HasKey(e => new { e.Adjustment, e.Adjustmentline, e.Loadattname });

            entity.ToTable("ADJDETLOADATT");

            entity.Property(e => e.Adjustment)
                .HasMaxLength(10)
                .HasColumnName("ADJUSTMENT");
            entity.Property(e => e.Adjustmentline).HasColumnName("ADJUSTMENTLINE");
            entity.Property(e => e.Loadattname)
                .HasMaxLength(20)
                .HasColumnName("LOADATTNAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Dateattribute)
                .HasColumnType("datetime")
                .HasColumnName("DATEATTRIBUTE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Intattribute).HasColumnName("INTATTRIBUTE");
            entity.Property(e => e.Txtattribute)
                .HasMaxLength(20)
                .HasColumnName("TXTATTRIBUTE");
        });

        modelBuilder.Entity<Adjustment>(entity =>
        {
            entity.HasKey(e => e.Adjustment1).HasName("PK__ADJUSTME__6B1063FF4A203B18");

            entity.ToTable("ADJUSTMENT");

            entity.Property(e => e.Adjustment1)
                .HasMaxLength(10)
                .HasColumnName("ADJUSTMENT");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneeref)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEEREF");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Invadjrc)
                .HasMaxLength(10)
                .HasColumnName("INVADJRC");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<Adjustmentdetail>(entity =>
        {
            entity.HasKey(e => new { e.Adjustment, e.Adjustmentline });

            entity.ToTable("ADJUSTMENTDETAIL");

            entity.Property(e => e.Adjustment)
                .HasMaxLength(10)
                .HasColumnName("ADJUSTMENT");
            entity.Property(e => e.Adjustmentline).HasColumnName("ADJUSTMENTLINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
        });

        modelBuilder.Entity<Alternatestreet>(entity =>
        {
            entity.HasKey(e => new { e.Cityname, e.Street });

            entity.ToTable("ALTERNATESTREETS");

            entity.Property(e => e.Cityname)
                .HasMaxLength(22)
                .HasColumnName("CITYNAME");
            entity.Property(e => e.Street)
                .HasMaxLength(22)
                .HasColumnName("STREET");
            entity.Property(e => e.Fullstreetname)
                .HasMaxLength(22)
                .HasColumnName("FULLSTREETNAME");
        });

        modelBuilder.Entity<Asndetail>(entity =>
        {
            entity.HasKey(e => e.Asnid).HasName("PK__ASNDETAI__DCFDEE95227655D8");

            entity.ToTable("ASNDETAIL");

            entity.Property(e => e.Asnid)
                .HasMaxLength(20)
                .HasColumnName("ASNID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(50)
                .HasColumnName("LOADID");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<Asrsaisle>(entity =>
        {
            entity.HasKey(e => new { e.Aisle, e.Mfcid });

            entity.ToTable("ASRSAISLE");

            entity.Property(e => e.Aisle)
                .HasMaxLength(20)
                .HasColumnName("AISLE");
            entity.Property(e => e.Mfcid)
                .HasMaxLength(20)
                .HasColumnName("MFCID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<Asrsdeliverylocation>(entity =>
        {
            entity.HasKey(e => new { e.Fromaisle, e.Toaisle, e.Tasktype });

            entity.ToTable("ASRSDELIVERYLOCATION");

            entity.Property(e => e.Fromaisle)
                .HasMaxLength(20)
                .HasColumnName("FROMAISLE");
            entity.Property(e => e.Toaisle)
                .HasMaxLength(20)
                .HasColumnName("TOAISLE");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(20)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Deliverylocation)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYLOCATION");
        });

        modelBuilder.Entity<Asrshandofflocation>(entity =>
        {
            entity.HasKey(e => new { e.Mfcid, e.Aisle, e.Fromlocation });

            entity.ToTable("ASRSHANDOFFLOCATIONS");

            entity.Property(e => e.Mfcid)
                .HasMaxLength(20)
                .HasColumnName("MFCID");
            entity.Property(e => e.Aisle)
                .HasMaxLength(20)
                .HasColumnName("AISLE");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
        });

        modelBuilder.Entity<Asrsmfc>(entity =>
        {
            entity.ToTable("ASRSMFC");

            entity.Property(e => e.Id)
                .HasMaxLength(20)
                .HasColumnName("ID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Instructioncounter)
                .HasMaxLength(20)
                .HasColumnName("INSTRUCTIONCOUNTER");
            entity.Property(e => e.Messagequeue)
                .HasMaxLength(50)
                .HasColumnName("MESSAGEQUEUE");
            entity.Property(e => e.Rejectlocation)
                .HasMaxLength(20)
                .HasColumnName("REJECTLOCATION");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Subsystemid)
                .HasMaxLength(20)
                .HasColumnName("SUBSYSTEMID");
        });

        modelBuilder.Entity<Asrsservicelocation>(entity =>
        {
            entity.HasKey(e => new { e.Mfcid, e.Location });

            entity.ToTable("ASRSSERVICELOCATIONS");

            entity.Property(e => e.Mfcid)
                .HasMaxLength(20)
                .HasColumnName("MFCID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Locationtype)
                .HasMaxLength(20)
                .HasColumnName("LOCATIONTYPE");
        });

        modelBuilder.Entity<Asrssubsystem>(entity =>
        {
            entity.ToTable("ASRSSUBSYSTEM");

            entity.Property(e => e.Id)
                .HasMaxLength(20)
                .HasColumnName("ID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Autosendnexttask).HasColumnName("AUTOSENDNEXTTASK");
            entity.Property(e => e.Buffersize).HasColumnName("BUFFERSIZE");
            entity.Property(e => e.Completepickoperation).HasColumnName("COMPLETEPICKOPERATION");
            entity.Property(e => e.Completeputawayoperation).HasColumnName("COMPLETEPUTAWAYOPERATION");
            entity.Property(e => e.Completereplenishoperation).HasColumnName("COMPLETEREPLENISHOPERATION");
            entity.Property(e => e.Createtaskwhileanotherexist).HasColumnName("CREATETASKWHILEANOTHEREXIST");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Findnewlocifrejected).HasColumnName("FINDNEWLOCIFREJECTED");
            entity.Property(e => e.Firsttaskonhold).HasColumnName("FIRSTTASKONHOLD");
            entity.Property(e => e.Fixedlocation).HasColumnName("FIXEDLOCATION");
            entity.Property(e => e.Handlehumovecompleted).HasColumnName("HANDLEHUMOVECOMPLETED");
            entity.Property(e => e.Handlehumovestarted).HasColumnName("HANDLEHUMOVESTARTED");
            entity.Property(e => e.Ignoreinductionlocation).HasColumnName("IGNOREINDUCTIONLOCATION");
            entity.Property(e => e.Managebuffer).HasColumnName("MANAGEBUFFER");
            entity.Property(e => e.Manualputawaymode).HasColumnName("MANUALPUTAWAYMODE");
            entity.Property(e => e.Mixcontainertask).HasColumnName("MIXCONTAINERTASK");
            entity.Property(e => e.Putawayreplcont).HasColumnName("PUTAWAYREPLCONT");
            entity.Property(e => e.Reverseputawaylocation).HasColumnName("REVERSEPUTAWAYLOCATION");
            entity.Property(e => e.Sendhuininductionlocation).HasColumnName("SENDHUININDUCTIONLOCATION");
            entity.Property(e => e.Sendmovehurequest).HasColumnName("SENDMOVEHUREQUEST");
            entity.Property(e => e.Sendpwreqonmovereq).HasColumnName("SENDPWREQONMOVEREQ");
            entity.Property(e => e.Sendtorejectlocation).HasColumnName("SENDTOREJECTLOCATION");
            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .HasColumnName("TYPE");
            entity.Property(e => e.Waithudestinationrequest).HasColumnName("WAITHUDESTINATIONREQUEST");
        });

        modelBuilder.Entity<Asrstask>(entity =>
        {
            entity.HasKey(e => new { e.Connectionid, e.Asrstaskid, e.Mfcid });

            entity.ToTable("ASRSTASK");

            entity.Property(e => e.Connectionid)
                .HasMaxLength(20)
                .HasColumnName("CONNECTIONID");
            entity.Property(e => e.Asrstaskid)
                .HasMaxLength(20)
                .HasColumnName("ASRSTASKID");
            entity.Property(e => e.Mfcid)
                .HasMaxLength(20)
                .HasColumnName("MFCID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Executiondate)
                .HasColumnType("datetime")
                .HasColumnName("EXECUTIONDATE");
            entity.Property(e => e.Executionlocation)
                .HasMaxLength(20)
                .HasColumnName("EXECUTIONLOCATION");
            entity.Property(e => e.Fromloc)
                .HasMaxLength(20)
                .HasColumnName("FROMLOC");
            entity.Property(e => e.Fromsublocation)
                .HasMaxLength(20)
                .HasColumnName("FROMSUBLOCATION");
            entity.Property(e => e.Huid)
                .HasMaxLength(20)
                .HasColumnName("HUID");
            entity.Property(e => e.Priority)
                .HasMaxLength(20)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.Rejectreason)
                .HasMaxLength(20)
                .HasColumnName("REJECTREASON");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Toloc)
                .HasMaxLength(20)
                .HasColumnName("TOLOC");
            entity.Property(e => e.Tosublocation)
                .HasMaxLength(20)
                .HasColumnName("TOSUBLOCATION");
            entity.Property(e => e.Whtask)
                .HasMaxLength(20)
                .HasColumnName("WHTASK");
        });

        modelBuilder.Entity<Attachment>(entity =>
        {
            entity.HasKey(e => e.Documentid);

            entity.ToTable("ATTACHMENT");

            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Documentdata)
                .HasColumnType("image")
                .HasColumnName("DOCUMENTDATA");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Attribute>(entity =>
        {
            entity.HasKey(e => new { e.Pkeytype, e.Pkey1, e.Pkey2, e.Pkey3 });

            entity.ToTable("ATTRIBUTE");

            entity.Property(e => e.Pkeytype)
                .HasMaxLength(10)
                .HasColumnName("PKEYTYPE");
            entity.Property(e => e.Pkey1)
                .HasMaxLength(20)
                .HasColumnName("PKEY1");
            entity.Property(e => e.Pkey2)
                .HasMaxLength(20)
                .HasColumnName("PKEY2");
            entity.Property(e => e.Pkey3)
                .HasMaxLength(20)
                .HasColumnName("PKEY3");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Attributevalidator>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__ATTRIBUT__D9C1FA01B4A38F64");

            entity.ToTable("ATTRIBUTEVALIDATOR");

            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .HasColumnName("NAME");
            entity.Property(e => e.Assemblydll)
                .HasMaxLength(50)
                .HasColumnName("ASSEMBLYDLL");
            entity.Property(e => e.Assemblydllpath)
                .HasMaxLength(100)
                .HasColumnName("ASSEMBLYDLLPATH");
            entity.Property(e => e.Classname)
                .HasMaxLength(50)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
        });

        modelBuilder.Entity<Audit>(entity =>
        {
            entity.HasKey(e => e.Auditid).HasName("PK__AUDIT__FDB8F3D510973AAC");

            entity.ToTable("AUDIT");

            entity.Property(e => e.Auditid)
                .HasMaxLength(20)
                .HasColumnName("AUDITID");
            entity.Property(e => e.Activitydate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVITYDATE");
            entity.Property(e => e.Activitytime)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ACTIVITYTIME");
            entity.Property(e => e.Activitytype)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITYTYPE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Document)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Documentline).HasColumnName("DOCUMENTLINE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(20)
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromcontainer)
                .HasMaxLength(20)
                .HasColumnName("FROMCONTAINER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromloc)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("FROMLOC");
            entity.Property(e => e.Fromqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FROMQTY");
            entity.Property(e => e.Fromstatus)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("FROMSTATUS");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Packageid)
                .HasMaxLength(20)
                .HasColumnName("PACKAGEID");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
            entity.Property(e => e.Terminaltype)
                .HasMaxLength(20)
                .HasColumnName("TERMINALTYPE");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Toloc)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("TOLOC");
            entity.Property(e => e.Toqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TOQTY");
            entity.Property(e => e.Tostatus)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("TOSTATUS");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Yardequipmentid)
                .HasMaxLength(20)
                .HasColumnName("YARDEQUIPMENTID");
        });

        modelBuilder.Entity<Auditstatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AUDITSTATUSES");

            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .HasColumnName("CODE");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
        });

        modelBuilder.Entity<AvailableInboundLine>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AvailableInboundLines");

            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(20)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inputuom)
                .HasMaxLength(10)
                .HasColumnName("INPUTUOM");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("inventorystatus");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Pkey1)
                .HasMaxLength(20)
                .HasColumnName("PKEY1");
            entity.Property(e => e.Pkey2)
                .HasMaxLength(20)
                .HasColumnName("PKEY2");
            entity.Property(e => e.Pkey3)
                .HasMaxLength(20)
                .HasColumnName("PKEY3");
            entity.Property(e => e.Pkeytype)
                .HasMaxLength(10)
                .HasColumnName("PKEYTYPE");
            entity.Property(e => e.Qtyadjusted)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYADJUSTED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Billingadditional>(entity =>
        {
            entity.HasKey(e => e.Tranid);

            entity.ToTable("BILLINGADDITIONAL");

            entity.Property(e => e.Tranid)
                .HasMaxLength(10)
                .HasColumnName("TRANID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Amount)
                .HasMaxLength(255)
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Istotalamount).HasColumnName("ISTOTALAMOUNT");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Reftranid)
                .HasMaxLength(50)
                .HasColumnName("REFTRANID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trandate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("TRANDATE");
            entity.Property(e => e.Trantype)
                .HasMaxLength(10)
                .HasColumnName("TRANTYPE");
            entity.Property(e => e.Units)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Unitstype)
                .HasMaxLength(10)
                .HasColumnName("UNITSTYPE");
        });

        modelBuilder.Entity<Billingagreementdetail>(entity =>
        {
            entity.HasKey(e => new { e.Agreementname, e.Consignee, e.Line });

            entity.ToTable("BILLINGAGREEMENTDETAIL");

            entity.Property(e => e.Agreementname)
                .HasMaxLength(10)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Line).HasColumnName("LINE");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ACTIVE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Billbasis)
                .HasMaxLength(10)
                .HasColumnName("BILLBASIS");
            entity.Property(e => e.Chargedescription)
                .HasMaxLength(255)
                .HasColumnName("CHARGEDESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Handlingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNITTYPE");
            entity.Property(e => e.Isstoragerange).HasColumnName("ISSTORAGERANGE");
            entity.Property(e => e.Lastrundate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("LASTRUNDATE");
            entity.Property(e => e.Maxperrun)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("MAXPERRUN");
            entity.Property(e => e.Maxpertran)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("MAXPERTRAN");
            entity.Property(e => e.Minperrun)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("MINPERRUN");
            entity.Property(e => e.Minpertran)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("MINPERTRAN");
            entity.Property(e => e.Nextrundate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("NEXTRUNDATE");
            entity.Property(e => e.Period)
                .HasMaxLength(20)
                .HasColumnName("PERIOD");
            entity.Property(e => e.Periodtype)
                .HasMaxLength(10)
                .HasColumnName("PERIODTYPE");
            entity.Property(e => e.Pluginid).HasColumnName("PLUGINID");
            entity.Property(e => e.Priceequation)
                .HasMaxLength(20)
                .HasColumnName("PRICEEQUATION");
            entity.Property(e => e.Pricelist)
                .HasMaxLength(20)
                .HasColumnName("PRICELIST");
            entity.Property(e => e.Priceperunit)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PRICEPERUNIT");
            entity.Property(e => e.Runcondition)
                .HasMaxLength(20)
                .HasColumnName("RUNCONDITION");
            entity.Property(e => e.Startdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Storagegracedays).HasColumnName("STORAGEGRACEDAYS");
            entity.Property(e => e.Storagepartialperiod).HasColumnName("STORAGEPARTIALPERIOD");
            entity.Property(e => e.Storageperiodtime)
                .HasMaxLength(20)
                .HasColumnName("STORAGEPERIODTIME");
            entity.Property(e => e.Storageperiodtype)
                .HasMaxLength(20)
                .HasColumnName("STORAGEPERIODTYPE");
        });

        modelBuilder.Entity<Billingagreementfilter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_BILLINGAGREEMENTSTORAGEFILTERS");

            entity.ToTable("BILLINGAGREEMENTFILTERS");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Agreementline).HasColumnName("AGREEMENTLINE");
            entity.Property(e => e.Agreementname)
                .HasMaxLength(20)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Comparisontype)
                .HasMaxLength(20)
                .HasColumnName("COMPARISONTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fieldname)
                .HasMaxLength(150)
                .HasColumnName("FIELDNAME");
            entity.Property(e => e.Fieldvalue)
                .HasMaxLength(150)
                .HasColumnName("FIELDVALUE");
        });

        modelBuilder.Entity<Billingagreementheader>(entity =>
        {
            entity.HasKey(e => new { e.Name, e.Consignee });

            entity.ToTable("BILLINGAGREEMENTHEADER");

            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .HasColumnName("NAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ACTIVE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Autopostcharges).HasColumnName("AUTOPOSTCHARGES");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Lastrundate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("LASTRUNDATE");
            entity.Property(e => e.Maxvalue)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MAXVALUE");
            entity.Property(e => e.Minvalue).HasColumnName("MINVALUE");
            entity.Property(e => e.Nextrundate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("NEXTRUNDATE");
            entity.Property(e => e.Performadoc)
                .HasMaxLength(50)
                .HasColumnName("PERFORMADOC");
            entity.Property(e => e.Period)
                .HasMaxLength(20)
                .HasColumnName("PERIOD");
            entity.Property(e => e.Periodtype)
                .HasMaxLength(10)
                .HasColumnName("PERIODTYPE");
            entity.Property(e => e.Priceequation)
                .HasMaxLength(20)
                .HasColumnName("PRICEEQUATION");
            entity.Property(e => e.Startdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasDefaultValueSql("(N'OK')")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<Billingchargesdetail>(entity =>
        {
            entity.HasKey(e => new { e.Chargeid, e.Chargeline });

            entity.ToTable("BILLINGCHARGESDETAIL");

            entity.Property(e => e.Chargeid)
                .HasMaxLength(10)
                .HasColumnName("CHARGEID");
            entity.Property(e => e.Chargeline).HasColumnName("CHARGELINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Agreementline).HasColumnName("AGREEMENTLINE");
            entity.Property(e => e.Agreementname)
                .HasMaxLength(20)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Billfromdate)
                .HasColumnType("datetime")
                .HasColumnName("BILLFROMDATE");
            entity.Property(e => e.Billtodate)
                .HasColumnType("datetime")
                .HasColumnName("BILLTODATE");
            entity.Property(e => e.Billtotal).HasColumnName("BILLTOTAL");
            entity.Property(e => e.Chargetext)
                .HasMaxLength(255)
                .HasColumnName("CHARGETEXT");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
        });

        modelBuilder.Entity<Billingchargesdocument>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BILLINGCHARGESDOCUMENTS");

            entity.Property(e => e.Chargeid)
                .HasMaxLength(20)
                .HasColumnName("CHARGEID");
            entity.Property(e => e.Chargeline).HasColumnName("CHARGELINE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Transactiontype)
                .HasMaxLength(20)
                .HasColumnName("TRANSACTIONTYPE");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Value)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALUE");
        });

        modelBuilder.Entity<Billingchargesheader>(entity =>
        {
            entity.HasKey(e => e.Chargeid);

            entity.ToTable("BILLINGCHARGESHEADER");

            entity.Property(e => e.Chargeid)
                .HasMaxLength(10)
                .HasColumnName("CHARGEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Agreementname)
                .HasMaxLength(10)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Billfromdate)
                .HasColumnType("datetime")
                .HasColumnName("BILLFROMDATE");
            entity.Property(e => e.Billingrunid)
                .HasMaxLength(10)
                .HasColumnName("BILLINGRUNID");
            entity.Property(e => e.Billtodate)
                .HasColumnType("datetime")
                .HasColumnName("BILLTODATE");
            entity.Property(e => e.Billtotal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("BILLTOTAL");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<Billingchargesload>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BILLINGCHARGESLOADS");

            entity.Property(e => e.Chargeid)
                .HasMaxLength(20)
                .HasColumnName("CHARGEID");
            entity.Property(e => e.Chargeline)
                .HasMaxLength(50)
                .HasColumnName("CHARGELINE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(50)
                .HasColumnName("LOADID");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Transactiondate)
                .HasMaxLength(20)
                .HasColumnName("TRANSACTIONDATE");
            entity.Property(e => e.Transactiontype)
                .HasMaxLength(50)
                .HasColumnName("TRANSACTIONTYPE");
            entity.Property(e => e.Unitprice)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("UNITPRICE");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Unitsperuom)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPERUOM");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Uomvolume)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("UOMVOLUME");
            entity.Property(e => e.Uomweight)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("UOMWEIGHT");
        });

        modelBuilder.Entity<Billingload>(entity =>
        {
            entity.ToTable("BILLINGLOADS");

            entity.Property(e => e.Billingloadid)
                .HasMaxLength(20)
                .HasColumnName("BILLINGLOADID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Currentqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CURRENTQTY");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Lastdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTDATE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<Billingplugin>(entity =>
        {
            entity.HasKey(e => e.Pluginid);

            entity.ToTable("BILLINGPLUGINS");

            entity.Property(e => e.Pluginid).HasColumnName("PLUGINID");
            entity.Property(e => e.Class)
                .HasMaxLength(100)
                .HasColumnName("CLASS");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Dll)
                .HasMaxLength(300)
                .HasColumnName("DLL");
            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Billingpriceequation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BILLINGPRICEEQUATION");

            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Calculationequation)
                .HasMaxLength(2000)
                .HasColumnName("CALCULATIONEQUATION");
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Priceequationid)
                .HasMaxLength(20)
                .HasColumnName("PRICEEQUATIONID");
        });

        modelBuilder.Entity<Billingpriceequationsdailyparam>(entity =>
        {
            entity.HasKey(e => e.Paramid).HasName("PK_BILLINGDAILYPRICEFACTORPARAMS");

            entity.ToTable("BILLINGPRICEEQUATIONSDAILYPARAMS");

            entity.Property(e => e.Paramid)
                .HasMaxLength(20)
                .HasColumnName("PARAMID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Paramdescription)
                .HasMaxLength(50)
                .HasColumnName("PARAMDESCRIPTION");
        });

        modelBuilder.Entity<Billingpriceequationsdailyparamsvalue>(entity =>
        {
            entity.HasKey(e => new { e.Paramid, e.Paramdate }).HasName("PK_BILLINGDAILYPRICEFACTORPARAMSVALUES");

            entity.ToTable("BILLINGPRICEEQUATIONSDAILYPARAMSVALUES");

            entity.Property(e => e.Paramid)
                .HasMaxLength(20)
                .HasColumnName("PARAMID");
            entity.Property(e => e.Paramdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("PARAMDATE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Paramvalue)
                .HasMaxLength(20)
                .HasColumnName("PARAMVALUE");
        });

        modelBuilder.Entity<Billingpriceequationsparam>(entity =>
        {
            entity.HasKey(e => e.Paramid).HasName("PK_BILLINGFIXEDPRICEFACTORPARAMS");

            entity.ToTable("BILLINGPRICEEQUATIONSPARAMS");

            entity.Property(e => e.Paramid)
                .HasMaxLength(20)
                .HasColumnName("PARAMID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Paramdescription)
                .HasMaxLength(50)
                .HasColumnName("PARAMDESCRIPTION");
            entity.Property(e => e.Paramvalue)
                .HasMaxLength(20)
                .HasColumnName("PARAMVALUE");
        });

        modelBuilder.Entity<Billingpricelistdetail>(entity =>
        {
            entity.HasKey(e => new { e.Pricelistname, e.Line });

            entity.ToTable("BILLINGPRICELISTDETAIL");

            entity.Property(e => e.Pricelistname)
                .HasMaxLength(10)
                .HasColumnName("PRICELISTNAME");
            entity.Property(e => e.Line).HasColumnName("LINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Maxunits)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MAXUNITS");
            entity.Property(e => e.Minunits)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MINUNITS");
            entity.Property(e => e.Price).HasColumnName("PRICE");
        });

        modelBuilder.Entity<Billingpricelistheader>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK_BILLINGPRICELIST");

            entity.ToTable("BILLINGPRICELISTHEADER");

            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .HasColumnName("NAME");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ACTIVE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Isdaterange).HasColumnName("ISDATERANGE");
            entity.Property(e => e.Pricelisttype)
                .HasMaxLength(10)
                .HasColumnName("PRICELISTTYPE");
        });

        modelBuilder.Entity<Bom>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Bomsku, e.Partsku });

            entity.ToTable("BOM");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Bomsku)
                .HasMaxLength(50)
                .HasColumnName("BOMSKU");
            entity.Property(e => e.Partsku)
                .HasMaxLength(50)
                .HasColumnName("PARTSKU");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Bomorder)
                .HasMaxLength(10)
                .HasColumnName("BOMORDER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Partqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PARTQTY");
        });

        modelBuilder.Entity<Carrier>(entity =>
        {
            entity.HasKey(e => e.Carrier1).HasName("PK__CARRIER__9F713A59D95F6F31");

            entity.ToTable("CARRIER");

            entity.Property(e => e.Carrier1)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Carriername)
                .HasMaxLength(50)
                .HasColumnName("CARRIERNAME");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
        });

        modelBuilder.Entity<Codelist>(entity =>
        {
            entity.HasKey(e => e.Code).HasName("PK__CODELIST__AA1D4378CE5BB705");

            entity.ToTable("CODELIST");

            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CODE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allowedit)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ALLOWEDIT");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Codelistallowedit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CODELISTALLOWEDIT");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allowedit).HasColumnName("ALLOWEDIT");
            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CODE");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Codelistdetail>(entity =>
        {
            entity.HasKey(e => new { e.Codelistcode, e.Code });

            entity.ToTable("CODELISTDETAIL");

            entity.Property(e => e.Codelistcode)
                .HasMaxLength(20)
                .HasColumnName("CODELISTCODE");
            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .HasColumnName("CODE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Companytype, e.Company1 }).IsClustered(false);

            entity.ToTable("COMPANY");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Company1)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Defaultcontact)
                .HasMaxLength(20)
                .HasColumnName("DEFAULTCONTACT");
            entity.Property(e => e.Deliverycomments)
                .HasMaxLength(255)
                .HasColumnName("DELIVERYCOMMENTS");
            entity.Property(e => e.Deliverynotelayout)
                .HasMaxLength(50)
                .HasColumnName("DELIVERYNOTELAYOUT");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Mixpicking)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("MIXPICKING");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Prefunloadingside)
                .HasMaxLength(10)
                .HasColumnName("PREFUNLOADINGSIDE");
            entity.Property(e => e.Servicetime).HasColumnName("SERVICETIME");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<Companycontact>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Company, e.Companytype, e.Contactid });

            entity.ToTable("COMPANYCONTACTS");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Checkpointsite)
                .HasMaxLength(20)
                .HasColumnName("CHECKPOINTSITE");
            entity.Property(e => e.Contacttype)
                .HasMaxLength(20)
                .HasColumnName("CONTACTTYPE");
            entity.Property(e => e.Deliveryconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYCONFIRMATIONTYPE");
            entity.Property(e => e.Deliverysite)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSITE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fixedservicetime).HasColumnName("FIXEDSERVICETIME");
            entity.Property(e => e.Pickupconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("PICKUPCONFIRMATIONTYPE");
            entity.Property(e => e.Pickupsite)
                .HasMaxLength(20)
                .HasColumnName("PICKUPSITE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
        });

        modelBuilder.Entity<Companydelivery>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Companytype, e.Company });

            entity.ToTable("COMPANYDELIVERY");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allowmixcontainer)
                .HasDefaultValueSql("((1))")
                .HasColumnName("ALLOWMIXCONTAINER");
            entity.Property(e => e.Delwin1end).HasColumnName("DELWIN1END");
            entity.Property(e => e.Delwin1strt).HasColumnName("DELWIN1STRT");
            entity.Property(e => e.Delwin2end).HasColumnName("DELWIN2END");
            entity.Property(e => e.Delwin2strt).HasColumnName("DELWIN2STRT");
            entity.Property(e => e.Delwin3end).HasColumnName("DELWIN3END");
            entity.Property(e => e.Delwin3strt).HasColumnName("DELWIN3STRT");
            entity.Property(e => e.Delwin4end).HasColumnName("DELWIN4END");
            entity.Property(e => e.Delwin4strt).HasColumnName("DELWIN4STRT");
            entity.Property(e => e.Delwin5end).HasColumnName("DELWIN5END");
            entity.Property(e => e.Delwin5strt).HasColumnName("DELWIN5STRT");
            entity.Property(e => e.Delwin6end).HasColumnName("DELWIN6END");
            entity.Property(e => e.Delwin6strt).HasColumnName("DELWIN6STRT");
            entity.Property(e => e.Delwin7end).HasColumnName("DELWIN7END");
            entity.Property(e => e.Delwin7strt).HasColumnName("DELWIN7STRT");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Shippingcontainer)
                .HasMaxLength(20)
                .HasColumnName("SHIPPINGCONTAINER");
        });

        modelBuilder.Entity<Compservicetime>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Company, e.Companytype, e.Contact, e.Priority });

            entity.ToTable("COMPSERVICETIME");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasDefaultValueSql("('')")
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasDefaultValueSql("('')")
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Contact)
                .HasMaxLength(20)
                .HasColumnName("CONTACT");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Friclose).HasColumnName("FRICLOSE");
            entity.Property(e => e.Friopen).HasColumnName("FRIOPEN");
            entity.Property(e => e.Monclose).HasColumnName("MONCLOSE");
            entity.Property(e => e.Monopen).HasColumnName("MONOPEN");
            entity.Property(e => e.Satclose).HasColumnName("SATCLOSE");
            entity.Property(e => e.Satopen).HasColumnName("SATOPEN");
            entity.Property(e => e.Sunclose).HasColumnName("SUNCLOSE");
            entity.Property(e => e.Sunopen).HasColumnName("SUNOPEN");
            entity.Property(e => e.Thuclose).HasColumnName("THUCLOSE");
            entity.Property(e => e.Thuopen).HasColumnName("THUOPEN");
            entity.Property(e => e.Tueclose).HasColumnName("TUECLOSE");
            entity.Property(e => e.Tueopen).HasColumnName("TUEOPEN");
            entity.Property(e => e.Wedclose).HasColumnName("WEDCLOSE");
            entity.Property(e => e.Wedopen).HasColumnName("WEDOPEN");
        });

        modelBuilder.Entity<Consignee>(entity =>
        {
            entity.HasKey(e => e.Consignee1).HasName("PK__CONSIGNE__5773E256CCB7BF60");

            entity.ToTable("CONSIGNEE");

            entity.Property(e => e.Consignee1)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Autoprintloadlabelrcv)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AUTOPRINTLOADLABELRCV");
            entity.Property(e => e.Billingaccount)
                .HasMaxLength(20)
                .HasColumnName("BILLINGACCOUNT");
            entity.Property(e => e.Billingperformadoc)
                .HasMaxLength(50)
                .HasColumnName("BILLINGPERFORMADOC");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Credit).HasColumnName("CREDIT");
            entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");
            entity.Property(e => e.Cubelimit).HasColumnName("CUBELIMIT");
            entity.Property(e => e.Cyclecounting).HasColumnName("CYCLECOUNTING");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Flowthroughloadlabel)
                .HasMaxLength(50)
                .HasColumnName("FLOWTHROUGHLOADLABEL");
            entity.Property(e => e.Generateloadid)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("GENERATELOADID");
            entity.Property(e => e.Loaddetaillbl)
                .HasMaxLength(50)
                .HasColumnName("LOADDETAILLBL");
            entity.Property(e => e.Loadlabel)
                .HasMaxLength(50)
                .HasColumnName("LOADLABEL");
            entity.Property(e => e.Mixshipping)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("MIXSHIPPING");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Packinglist)
                .HasMaxLength(50)
                .HasColumnName("PACKINGLIST");
            entity.Property(e => e.Packmultipleorders)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("PACKMULTIPLEORDERS");
            entity.Property(e => e.Rcvmanifest)
                .HasMaxLength(50)
                .HasColumnName("RCVMANIFEST");
            entity.Property(e => e.Receivingloc)
                .HasMaxLength(50)
                .HasColumnName("RECEIVINGLOC");
            entity.Property(e => e.Replanplanshort)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("REPLANPLANSHORT");
            entity.Property(e => e.Shippartiaload)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("SHIPPARTIALOAD");
            entity.Property(e => e.Shippingmanifest)
                .HasMaxLength(50)
                .HasColumnName("SHIPPINGMANIFEST");
            entity.Property(e => e.Shpcartonlbl)
                .HasMaxLength(50)
                .HasColumnName("SHPCARTONLBL");
            entity.Property(e => e.Shpcontainerlbl)
                .HasMaxLength(50)
                .HasColumnName("SHPCONTAINERLBL");
            entity.Property(e => e.Skulabel)
                .HasMaxLength(50)
                .HasColumnName("SKULABEL");
        });

        modelBuilder.Entity<Consigneebysku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CONSIGNEEBYSKU");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSONHOLD");
        });

        modelBuilder.Entity<Consigneeplanpolicy>(entity =>
        {
            entity.HasKey(e => e.Planpolicyid);

            entity.ToTable("CONSIGNEEPLANPOLICY");

            entity.Property(e => e.Planpolicyid).HasColumnName("PLANPOLICYID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Drivingtimefactor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DRIVINGTIMEFACTOR");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromlineunits)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FROMLINEUNITS");
            entity.Property(e => e.Fromlinevalue)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FROMLINEVALUE");
            entity.Property(e => e.Fromlinevolume).HasColumnName("FROMLINEVOLUME");
            entity.Property(e => e.Fromorderlines).HasColumnName("FROMORDERLINES");
            entity.Property(e => e.Fromorderlineweight).HasColumnName("FROMORDERLINEWEIGHT");
            entity.Property(e => e.Fromorderunits)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FROMORDERUNITS");
            entity.Property(e => e.Fromordervalue)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FROMORDERVALUE");
            entity.Property(e => e.Fromordervolume)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FROMORDERVOLUME");
            entity.Property(e => e.Fromorderweight).HasColumnName("FROMORDERWEIGHT");
            entity.Property(e => e.Hazclass)
                .HasMaxLength(20)
                .HasColumnName("HAZCLASS");
            entity.Property(e => e.Invstatus)
                .HasMaxLength(20)
                .HasColumnName("INVSTATUS");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Policyid)
                .HasMaxLength(20)
                .HasColumnName("POLICYID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Route)
                .HasMaxLength(10)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Tolineunits)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TOLINEUNITS");
            entity.Property(e => e.Tolinevalue)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TOLINEVALUE");
            entity.Property(e => e.Tolinevolume).HasColumnName("TOLINEVOLUME");
            entity.Property(e => e.Toorderlines).HasColumnName("TOORDERLINES");
            entity.Property(e => e.Toorderlineweight).HasColumnName("TOORDERLINEWEIGHT");
            entity.Property(e => e.Toorderunits)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TOORDERUNITS");
            entity.Property(e => e.Toordervalue).HasColumnName("TOORDERVALUE");
            entity.Property(e => e.Toordervolume).HasColumnName("TOORDERVOLUME");
            entity.Property(e => e.Toorderweight).HasColumnName("TOORDERWEIGHT");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Unloadingtype)
                .HasMaxLength(20)
                .HasColumnName("UNLOADINGTYPE");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
            entity.Property(e => e.Velocity)
                .HasMaxLength(10)
                .HasColumnName("VELOCITY");
        });

        modelBuilder.Entity<Consigneeputaway>(entity =>
        {
            entity.HasKey(e => e.Putawayid).HasName("PK__CONSIGNE__DCDD018227608322");

            entity.ToTable("CONSIGNEEPUTAWAY");

            entity.Property(e => e.Putawayid).HasColumnName("PUTAWAYID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Hazclass)
                .HasMaxLength(50)
                .HasColumnName("HAZCLASS");
            entity.Property(e => e.Hutype)
                .HasMaxLength(50)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Policyid)
                .HasMaxLength(20)
                .HasColumnName("POLICYID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Putawaypolicy)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("PUTAWAYPOLICY");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Storageclass)
                .HasMaxLength(20)
                .HasColumnName("STORAGECLASS");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Velocity)
                .HasMaxLength(10)
                .HasColumnName("VELOCITY");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Consolidation>(entity =>
        {
            entity.HasKey(e => e.Consolidateid).HasName("PK__CONSOLID__C9C6CD10D0C6026A");

            entity.ToTable("CONSOLIDATION");

            entity.Property(e => e.Consolidateid)
                .HasMaxLength(10)
                .HasColumnName("CONSOLIDATEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handlingunittype)
                .HasMaxLength(10)
                .HasColumnName("HANDLINGUNITTYPE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(10)
                .HasColumnName("USAGETYPE");
        });

        modelBuilder.Entity<Consolidationdetail>(entity =>
        {
            entity.HasKey(e => new { e.Consolidateid, e.Consolidateline });

            entity.ToTable("CONSOLIDATIONDETAIL");

            entity.Property(e => e.Consolidateid)
                .HasMaxLength(10)
                .HasColumnName("CONSOLIDATEID");
            entity.Property(e => e.Consolidateline).HasColumnName("CONSOLIDATELINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromcontainer)
                .HasMaxLength(20)
                .HasColumnName("FROMCONTAINER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.HasKey(e => e.Contactid).HasName("PK__CONTACT__799118687580A45D");

            entity.ToTable("CONTACT");

            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<Container>(entity =>
        {
            entity.HasKey(e => e.Container1);

            entity.ToTable("CONTAINER");

            entity.Property(e => e.Container1)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Activitystatus)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Inhandoff)
                .HasDefaultValueSql("((0))")
                .HasColumnName("INHANDOFF");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Oncontainer)
                .HasMaxLength(20)
                .HasColumnName("ONCONTAINER");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(10)
                .HasColumnName("USAGETYPE");
        });

        modelBuilder.Entity<Containerorder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CONTAINERORDERS");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Containerparallel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CONTAINERPARALLEL");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Containertotal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CONTAINERTOTAL");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Contload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CONTLOADS");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
        });

        modelBuilder.Entity<Countbook>(entity =>
        {
            entity.HasKey(e => new { e.Countbook1, e.Countbookrunid });

            entity.ToTable("COUNTBOOK");

            entity.Property(e => e.Countbook1)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOK");
            entity.Property(e => e.Countbookrunid)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOKRUNID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Closedate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSEDATE");
            entity.Property(e => e.Counttype)
                .HasMaxLength(20)
                .HasColumnName("COUNTTYPE");
            entity.Property(e => e.Createdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasColumnName("NOTE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<Countbookaudit>(entity =>
        {
            entity.HasKey(e => new { e.Countbook, e.Countid, e.Countbookrunid, e.Loadid, e.Location });

            entity.ToTable("COUNTBOOKAUDIT");

            entity.Property(e => e.Countbook)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOK");
            entity.Property(e => e.Countid)
                .HasMaxLength(20)
                .HasColumnName("COUNTID");
            entity.Property(e => e.Countbookrunid)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOKRUNID");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("LOCATION");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Countdate)
                .HasColumnType("datetime")
                .HasColumnName("COUNTDATE");
            entity.Property(e => e.Countqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COUNTQTY");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expectedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EXPECTEDQTY");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<Counter>(entity =>
        {
            entity.HasKey(e => e.Counter1);

            entity.ToTable("COUNTER");

            entity.Property(e => e.Counter1)
                .HasMaxLength(20)
                .HasColumnName("COUNTER");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Counterval).HasColumnName("COUNTERVAL");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fillchar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasColumnName("FILLCHAR");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Prefix)
                .HasMaxLength(10)
                .HasColumnName("PREFIX");
        });

        modelBuilder.Entity<Counting>(entity =>
        {
            entity.HasKey(e => e.Countid);

            entity.ToTable("COUNTING");

            entity.Property(e => e.Countid)
                .HasMaxLength(20)
                .HasColumnName("COUNTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Countbook)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOK");
            entity.Property(e => e.Countbookrunid)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOKRUNID");
            entity.Property(e => e.Counttype)
                .HasMaxLength(20)
                .HasColumnName("COUNTTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<Currentdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CURRENTDATE");

            entity.Property(e => e.Currentdate1)
                .HasColumnType("datetime")
                .HasColumnName("CURRENTDATE");
        });

        modelBuilder.Entity<Cyclecount>(entity =>
        {
            entity.HasKey(e => e.Warehousearea).HasName("PK__CYCLECOU__71F58CCF347A0DC9");

            entity.ToTable("CYCLECOUNT");

            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ACTIVE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Cyclesdayint).HasColumnName("CYCLESDAYINT");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Delivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DELIVERIES");

            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))")
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Huqty).HasColumnName("HUQTY");
            entity.Property(e => e.Hutype)
                .HasMaxLength(10)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ORDERVALUE");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Trip)
                .HasMaxLength(20)
                .HasColumnName("TRIP");
            entity.Property(e => e.Volume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VOLUME");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Depot>(entity =>
        {
            entity.HasKey(e => e.Depotname).HasName("PK__DEPOT__9BACAFC404858860");

            entity.ToTable("DEPOT");

            entity.Property(e => e.Depotname)
                .HasMaxLength(20)
                .HasColumnName("DEPOTNAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Contact)
                .HasMaxLength(20)
                .HasColumnName("CONTACT");
            entity.Property(e => e.Depottype)
                .HasMaxLength(10)
                .HasColumnName("DEPOTTYPE");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Documentsslassign>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DOCUMENTSSLASSIGN");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Doctype)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DOCTYPE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
        });

        modelBuilder.Entity<Doorschedule>(entity =>
        {
            entity.HasKey(e => e.Scheduleid);

            entity.ToTable("DOORSCHEDULE");

            entity.Property(e => e.Scheduleid)
                .HasMaxLength(20)
                .HasColumnName("SCHEDULEID");
            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
            entity.Property(e => e.Yardappointmentid)
                .HasMaxLength(20)
                .HasColumnName("YARDAPPOINTMENTID");
            entity.Property(e => e.Yardequipmentid)
                .HasMaxLength(20)
                .HasColumnName("YARDEQUIPMENTID");
        });

        modelBuilder.Entity<Drivertaskstran>(entity =>
        {
            entity.HasKey(e => e.Drivertaskid).HasName("PK__DRIVERTA__3E9D57CD35880146");

            entity.ToTable("DRIVERTASKSTRANS");

            entity.Property(e => e.Drivertaskid)
                .HasMaxLength(20)
                .HasColumnName("DRIVERTASKID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Drivertasktype)
                .HasMaxLength(20)
                .HasColumnName("DRIVERTASKTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stdtime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("STDTIME");
        });

        modelBuilder.Entity<Emptyhupickuppolicy>(entity =>
        {
            entity.HasKey(e => new { e.Pickregion, e.Hutype, e.Emptyhulocation, e.Taskpriority });

            entity.ToTable("EMPTYHUPICKUPPOLICY");

            entity.Property(e => e.Pickregion)
                .HasMaxLength(20)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Emptyhulocation)
                .HasMaxLength(20)
                .HasColumnName("EMPTYHULOCATION");
            entity.Property(e => e.Taskpriority).HasColumnName("TASKPRIORITY");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.Eventid).HasName("PK__EVENTS__6B1BA9B94812FE0A");

            entity.ToTable("EVENTS");

            entity.Property(e => e.Eventid)
                .ValueGeneratedNever()
                .HasColumnName("EVENTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Eventtranstype)
                .HasMaxLength(20)
                .HasColumnName("EVENTTRANSTYPE");
            entity.Property(e => e.Eventtype)
                .HasMaxLength(50)
                .HasColumnName("EVENTTYPE");
        });

        modelBuilder.Entity<Eventsregistration>(entity =>
        {
            entity.HasKey(e => new { e.Eventid, e.Queuename });

            entity.ToTable("EVENTSREGISTRATION");

            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Queuename)
                .HasMaxLength(50)
                .HasColumnName("QUEUENAME");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Synchronize).HasColumnName("SYNCHRONIZE");
        });

        modelBuilder.Entity<ExpectedAsnload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ExpectedASNLoads");

            entity.Property(e => e.Asnid)
                .HasMaxLength(20)
                .HasColumnName("ASNID");
            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Huid)
                .HasMaxLength(20)
                .HasColumnName("HUID");
            entity.Property(e => e.Loadid)
                .HasMaxLength(50)
                .HasColumnName("LOADID");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Transportreference)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTREFERENCE");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<Fixroute>(entity =>
        {
            entity.HasKey(e => e.Routename);

            entity.ToTable("FIXROUTES");

            entity.Property(e => e.Routename)
                .HasMaxLength(10)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Routeshcedid)
                .HasMaxLength(20)
                .HasColumnName("ROUTESHCEDID");
        });

        modelBuilder.Entity<Fixroutesstop>(entity =>
        {
            entity.HasKey(e => new { e.Routename, e.Stop, e.Company });

            entity.ToTable("FIXROUTESSTOPS");

            entity.Property(e => e.Routename)
                .HasMaxLength(10)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Stop)
                .HasMaxLength(50)
                .HasColumnName("STOP");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Flowthroughdetail>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Flowthrough, e.Flowthroughline });

            entity.ToTable("FLOWTHROUGHDETAIL");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Flowthrough)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGH");
            entity.Property(e => e.Flowthroughline)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGHLINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(20)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inputuom)
                .HasMaxLength(10)
                .HasColumnName("INPUTUOM");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypacked)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("QTYPACKED");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Qtyverified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYVERIFIED");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<Flowthroughheader>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Flowthrough });

            entity.ToTable("FLOWTHROUGHHEADER");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Flowthrough)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGH");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Receivedfrom)
                .HasMaxLength(20)
                .HasColumnName("RECEIVEDFROM");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDELIVERYDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduledarrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDARRIVALDATE");
            entity.Property(e => e.Scheduleddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDELIVERYDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Sourcecompanytype)
                .HasMaxLength(10)
                .HasColumnName("SOURCECOMPANYTYPE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanytype)
                .HasMaxLength(10)
                .HasColumnName("TARGETCOMPANYTYPE");
        });

        modelBuilder.Entity<Flowthroughload>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Flowthrough, e.Flowthroughline, e.Loadid });

            entity.ToTable("FLOWTHROUGHLOAD");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Flowthrough)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGH");
            entity.Property(e => e.Flowthroughline)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGHLINE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Handelingunittype>(entity =>
        {
            entity.HasKey(e => e.Container).HasName("PK__HANDELIN__29868D3EAF029CF4");

            entity.ToTable("HANDELINGUNITTYPE");

            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Containercube).HasColumnName("CONTAINERCUBE");
            entity.Property(e => e.Containerdesc)
                .HasMaxLength(50)
                .HasColumnName("CONTAINERDESC");
            entity.Property(e => e.Containerweight).HasColumnName("CONTAINERWEIGHT");
            entity.Property(e => e.Cubecapacity).HasColumnName("CUBECAPACITY");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Heightcalc)
                .HasMaxLength(10)
                .HasColumnName("HEIGHTCALC");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Weightcapacity).HasColumnName("WEIGHTCAPACITY");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<Handlingequipment>(entity =>
        {
            entity.HasKey(e => e.Handlingequipment1).HasName("PK__HANDLING__ED908968D31A27B3");

            entity.ToTable("HANDLINGEQUIPMENT");

            entity.Property(e => e.Handlingequipment1)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGEQUIPMENT");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allowshareaisle)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ALLOWSHAREAISLE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fastthreshold).HasColumnName("FASTTHRESHOLD");
            entity.Property(e => e.Mhecongestionfactor).HasColumnName("MHECONGESTIONFACTOR");
            entity.Property(e => e.Mhehorizontalconst).HasColumnName("MHEHORIZONTALCONST");
            entity.Property(e => e.Mhehorizontalvariable).HasColumnName("MHEHORIZONTALVARIABLE");
            entity.Property(e => e.Mobilitycode)
                .HasMaxLength(10)
                .HasDefaultValueSql("(N'A')")
                .HasColumnName("MOBILITYCODE");
            entity.Property(e => e.Slowthreshold).HasColumnName("SLOWTHRESHOLD");
            entity.Property(e => e.Walkthreshold).HasColumnName("WALKTHRESHOLD");
            entity.Property(e => e.Weightcapacity).HasColumnName("WEIGHTCAPACITY");
        });

        modelBuilder.Entity<Handlingunitstoragetemplate>(entity =>
        {
            entity.HasKey(e => e.Hustoragetemplateid);

            entity.ToTable("HANDLINGUNITSTORAGETEMPLATE");

            entity.Property(e => e.Hustoragetemplateid)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Hustoragetemplatename)
                .HasMaxLength(50)
                .HasColumnName("HUSTORAGETEMPLATENAME");
        });

        modelBuilder.Entity<Handlingunitstoragetemplatedetail>(entity =>
        {
            entity.HasKey(e => new { e.Hustoragetemplateid, e.Hustoragetemplateline, e.Handlingunit });

            entity.ToTable("HANDLINGUNITSTORAGETEMPLATEDETAIL");

            entity.Property(e => e.Hustoragetemplateid)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATEID");
            entity.Property(e => e.Hustoragetemplateline).HasColumnName("HUSTORAGETEMPLATELINE");
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handlingunitqty).HasColumnName("HANDLINGUNITQTY");
        });

        modelBuilder.Entity<Handlingunittransaction>(entity =>
        {
            entity.HasKey(e => e.Transactionid).HasName("PK__HANDLING__356DA90E0DBD97A7");

            entity.ToTable("HANDLINGUNITTRANSACTION");

            entity.Property(e => e.Transactionid)
                .HasMaxLength(20)
                .HasColumnName("TRANSACTIONID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Huqty)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("HUQTY");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Transactiondate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("TRANSACTIONDATE");
            entity.Property(e => e.Transactiontype)
                .HasMaxLength(20)
                .HasColumnName("TRANSACTIONTYPE");
            entity.Property(e => e.Transactiontypeid)
                .HasMaxLength(20)
                .HasColumnName("TRANSACTIONTYPEID");
        });

        modelBuilder.Entity<Handoff>(entity =>
        {
            entity.HasKey(e => new { e.Fromhandoffregion, e.Tohandoffregion, e.Priority });

            entity.ToTable("HANDOFF");

            entity.Property(e => e.Fromhandoffregion)
                .HasMaxLength(20)
                .HasColumnName("FROMHANDOFFREGION");
            entity.Property(e => e.Tohandoffregion)
                .HasMaxLength(20)
                .HasColumnName("TOHANDOFFREGION");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handofflocation)
                .HasMaxLength(20)
                .HasColumnName("HANDOFFLOCATION");
        });

        modelBuilder.Entity<Hetype>(entity =>
        {
            entity.HasKey(e => new { e.Handlingequipment, e.Mhctype });

            entity.ToTable("HETYPE");

            entity.Property(e => e.Handlingequipment)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGEQUIPMENT");
            entity.Property(e => e.Mhctype)
                .HasMaxLength(20)
                .HasColumnName("MHCTYPE");
            entity.Property(e => e.Access).HasColumnName("ACCESS");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Inboundorddetail>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Orderid, e.Orderline }).IsClustered(false);

            entity.ToTable("INBOUNDORDDETAIL");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(20)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inputuom)
                .HasMaxLength(10)
                .HasColumnName("INPUTUOM");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Lastreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTRECEIPTDATE");
            entity.Property(e => e.Qtyadjusted)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYADJUSTED");
            entity.Property(e => e.Qtyordered)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORDERED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<Inboundorderview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("INBOUNDORDERVIEW");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Fullyreceived).HasColumnName("fullyreceived");
            entity.Property(e => e.Hostorderid)
                .HasMaxLength(50)
                .HasColumnName("HOSTORDERID");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Receivedfrom)
                .HasMaxLength(20)
                .HasColumnName("RECEIVEDFROM");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<Inboundordheader>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Orderid }).IsClustered(false);

            entity.ToTable("INBOUNDORDHEADER");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Hostorderid)
                .HasMaxLength(50)
                .HasColumnName("HOSTORDERID");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Receivedfrom)
                .HasMaxLength(20)
                .HasColumnName("RECEIVEDFROM");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<InvCountGrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvCountGrid");

            entity.Property(e => e.Accessibility)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ACCESSIBILITY");
            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastcountuser)
                .HasMaxLength(20)
                .HasColumnName("LASTCOUNTUSER");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Lastmoveuser)
                .HasMaxLength(20)
                .HasColumnName("LASTMOVEUSER");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Laststatusrc)
                .HasMaxLength(10)
                .HasColumnName("LASTSTATUSRC");
            entity.Property(e => e.Laststatususer)
                .HasMaxLength(20)
                .HasColumnName("LASTSTATUSUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Sublocation)
                .HasMaxLength(20)
                .HasColumnName("SUBLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
        });

        modelBuilder.Entity<InvSkuOpenOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvSkuOpenOrders");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.QtyInOpenInboundOrders)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("qtyInOpenInboundOrders");
            entity.Property(e => e.QtyInOpenOutboundOrders)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("qtyInOpenOutboundOrders");
            entity.Property(e => e.QtyInOpenReceipts)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("qtyInOpenReceipts");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSONHOLD");
        });

        modelBuilder.Entity<Inventoryattributelist>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__INVENTOR__D9C1FA0187160D5B");

            entity.ToTable("INVENTORYATTRIBUTELIST");

            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .HasColumnName("NAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Inventorytran>(entity =>
        {
            entity.HasKey(e => e.Invtrans).HasName("PK__INVENTOR__2231F355E785628F");

            entity.ToTable("INVENTORYTRANS");

            entity.HasIndex(e => new { e.Consignee, e.Sku }, "IX_INVENTORYTRANS_SKU").HasFillFactor(75);

            entity.HasIndex(e => new { e.Consignee, e.Sku, e.Invtrntype }, "IX_SKU_TRAN_TYPE").HasFillFactor(75);

            entity.Property(e => e.Invtrans)
                .HasMaxLength(10)
                .HasColumnName("INVTRANS");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Cube).HasColumnName("CUBE");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Invtrntype)
                .HasMaxLength(10)
                .HasColumnName("INVTRNTYPE");
            entity.Property(e => e.Line).HasColumnName("LINE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Posttranqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("POSTTRANQTY");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(20)
                .HasColumnName("REASONCODE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("TRANDATE");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Invload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("INVLOAD");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastcountuser)
                .HasMaxLength(20)
                .HasColumnName("LASTCOUNTUSER");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Lastmoveuser)
                .HasMaxLength(20)
                .HasColumnName("LASTMOVEUSER");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Laststatusrc)
                .HasMaxLength(10)
                .HasColumnName("LASTSTATUSRC");
            entity.Property(e => e.Laststatususer)
                .HasMaxLength(20)
                .HasColumnName("LASTSTATUSUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Loaduomdesc)
                .HasMaxLength(50)
                .HasColumnName("LOADUOMDESC");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Sublocation)
                .HasMaxLength(20)
                .HasColumnName("SUBLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSONHOLD");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
        });

        modelBuilder.Entity<Invloadinregion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("INVLOADINREGION");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSONHOLD");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<Invstatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("INVSTATUSES");

            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .HasColumnName("CODE");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
        });

        modelBuilder.Entity<JobSchedule>(entity =>
        {
            entity.HasKey(e => new { e.Name, e.AssemblyDll, e.ClassName }).HasName("PK_job_schedule");

            entity.ToTable("JOB_SCHEDULE");

            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.AssemblyDll)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("assembly_dll");
            entity.Property(e => e.ClassName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("class_name");
            entity.Property(e => e.Arguments)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("arguments");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Enabled).HasColumnName("enabled");
            entity.Property(e => e.Interval).HasColumnName("interval");
            entity.Property(e => e.LastLog)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("last_log");
            entity.Property(e => e.LastRun)
                .HasColumnType("datetime")
                .HasColumnName("last_run");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("last_status");
            entity.Property(e => e.Running).HasColumnName("running");
        });

        modelBuilder.Entity<Label>(entity =>
        {
            entity.HasKey(e => e.Labelname).HasName("PK__LABELS__700BF367FFDDDE67");

            entity.ToTable("LABELS");

            entity.Property(e => e.Labelname)
                .HasMaxLength(20)
                .HasColumnName("LABELNAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Defaultprinter)
                .HasMaxLength(50)
                .HasColumnName("DEFAULTPRINTER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Filetype)
                .HasMaxLength(10)
                .HasColumnName("FILETYPE");
            entity.Property(e => e.Formatfile)
                .HasMaxLength(100)
                .HasColumnName("FORMATFILE");
            entity.Property(e => e.Labeldesc)
                .HasMaxLength(50)
                .HasColumnName("LABELDESC");
        });

        modelBuilder.Entity<Laborcalculationmethod>(entity =>
        {
            entity.HasKey(e => e.Calculationid).HasName("PK__LABORCAL__233DB32D01D1DB87");

            entity.ToTable("LABORCALCULATIONMETHODS");

            entity.Property(e => e.Calculationid)
                .HasMaxLength(20)
                .HasColumnName("CALCULATIONID");
            entity.Property(e => e.Calculationdesc)
                .HasMaxLength(100)
                .HasColumnName("CALCULATIONDESC");
            entity.Property(e => e.Calculationequation)
                .HasMaxLength(200)
                .HasColumnName("CALCULATIONEQUATION");
        });

        modelBuilder.Entity<Laborcalculationparameter>(entity =>
        {
            entity.HasKey(e => e.Parameterid).HasName("PK__LABORCAL__CA918780AD80EB01");

            entity.ToTable("LABORCALCULATIONPARAMETERS");

            entity.Property(e => e.Parameterid)
                .HasMaxLength(50)
                .HasColumnName("PARAMETERID");
            entity.Property(e => e.Parameterdesc)
                .HasMaxLength(500)
                .HasColumnName("PARAMETERDESC");
            entity.Property(e => e.Parametervalue)
                .HasMaxLength(50)
                .HasColumnName("PARAMETERVALUE");
        });

        modelBuilder.Entity<Laborhandlingfactor>(entity =>
        {
            entity.HasKey(e => new { e.Employeeid, e.Laborfactortype });

            entity.ToTable("LABORHANDLINGFACTOR");

            entity.Property(e => e.Employeeid)
                .HasMaxLength(50)
                .HasColumnName("EMPLOYEEID");
            entity.Property(e => e.Laborfactortype)
                .HasMaxLength(50)
                .HasColumnName("LABORFACTORTYPE");
        });

        modelBuilder.Entity<Laborperformanceaudit>(entity =>
        {
            entity.HasKey(e => e.Assignmentid).HasName("PK__LABORPER__F994F36FEF259978");

            entity.ToTable("LABORPERFORMANCEAUDIT");

            entity.Property(e => e.Assignmentid)
                .HasMaxLength(20)
                .HasColumnName("ASSIGNMENTID");
            entity.Property(e => e.Actualtime).HasColumnName("ACTUALTIME");
            entity.Property(e => e.Distancestandarttime).HasColumnName("DISTANCESTANDARTTIME");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endtime).HasColumnName("ENDTIME");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Standarttime).HasColumnName("STANDARTTIME");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startlocation)
                .HasMaxLength(20)
                .HasColumnName("STARTLOCATION");
            entity.Property(e => e.Starttime).HasColumnName("STARTTIME");
            entity.Property(e => e.Taskid)
                .HasMaxLength(20)
                .HasColumnName("TASKID");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(20)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Terminaltype)
                .HasMaxLength(20)
                .HasColumnName("TERMINALTYPE");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Traveldistance).HasColumnName("TRAVELDISTANCE");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<Labortaskcalculation>(entity =>
        {
            entity.HasKey(e => new { e.Tasktype, e.Laborcalcid });

            entity.ToTable("LABORTASKCALCULATION");

            entity.Property(e => e.Tasktype)
                .HasMaxLength(20)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Laborcalcid)
                .HasMaxLength(20)
                .HasColumnName("LABORCALCID");
            entity.Property(e => e.Defaultmhetype)
                .HasMaxLength(20)
                .HasColumnName("DEFAULTMHETYPE");
            entity.Property(e => e.Generictime).HasColumnName("GENERICTIME");
            entity.Property(e => e.Indirectflag).HasColumnName("INDIRECTFLAG");
            entity.Property(e => e.Newassigment)
                .HasMaxLength(20)
                .HasColumnName("NEWASSIGMENT");
            entity.Property(e => e.Tasksubtype)
                .HasMaxLength(10)
                .HasColumnName("TASKSUBTYPE");
        });

        modelBuilder.Entity<Laborusercounter>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Laborcounterid });

            entity.ToTable("LABORUSERCOUNTERS");

            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .HasColumnName("USERID");
            entity.Property(e => e.Laborcounterid)
                .HasMaxLength(50)
                .HasColumnName("LABORCOUNTERID");
            entity.Property(e => e.Laborcounterlastresetdate)
                .HasColumnType("datetime")
                .HasColumnName("LABORCOUNTERLASTRESETDATE");
            entity.Property(e => e.Laborcountervalue)
                .HasMaxLength(50)
                .HasColumnName("LABORCOUNTERVALUE");
        });

        modelBuilder.Entity<Laborusercountercalculation>(entity =>
        {
            entity.HasKey(e => e.Laborcounterid);

            entity.ToTable("LABORUSERCOUNTERCALCULATIONS");

            entity.Property(e => e.Laborcounterid)
                .HasMaxLength(10)
                .HasColumnName("LABORCOUNTERID");
            entity.Property(e => e.Countercalculation)
                .HasMaxLength(50)
                .HasColumnName("COUNTERCALCULATION");
            entity.Property(e => e.Laborcounterdescription)
                .HasMaxLength(50)
                .HasColumnName("LABORCOUNTERDESCRIPTION");
            entity.Property(e => e.Laborcounterscope)
                .HasMaxLength(10)
                .HasColumnName("LABORCOUNTERSCOPE");
        });

        modelBuilder.Entity<Laboruserinformation>(entity =>
        {
            entity.HasKey(e => e.Employeeid).HasName("PK__LABORUSE__8F06515B5A5BE530");

            entity.ToTable("LABORUSERINFORMATION");

            entity.Property(e => e.Employeeid)
                .HasMaxLength(50)
                .HasColumnName("EMPLOYEEID");
            entity.Property(e => e.Address)
                .HasMaxLength(100)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.Employeename)
                .HasMaxLength(50)
                .HasColumnName("EMPLOYEENAME");
            entity.Property(e => e.Employeestartdate)
                .HasColumnType("datetime")
                .HasColumnName("EMPLOYEESTARTDATE");
            entity.Property(e => e.Employeestatus)
                .HasMaxLength(20)
                .HasColumnName("EMPLOYEESTATUS");
            entity.Property(e => e.Phonenumber)
                .HasMaxLength(10)
                .HasColumnName("PHONENUMBER");
            entity.Property(e => e.Shift)
                .HasMaxLength(20)
                .HasColumnName("SHIFT");
            entity.Property(e => e.Socialsecuritynumber)
                .HasMaxLength(20)
                .HasColumnName("SOCIALSECURITYNUMBER");
        });

        modelBuilder.Entity<LblCont>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lblCont");

            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Oncontainer)
                .HasMaxLength(20)
                .HasColumnName("ONCONTAINER");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(10)
                .HasColumnName("USAGETYPE");
        });

        modelBuilder.Entity<LblContShip>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lblContShip");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Carriername)
                .HasMaxLength(50)
                .HasColumnName("CARRIERNAME");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Comptypedesc)
                .HasMaxLength(50)
                .HasColumnName("COMPTYPEDESC");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(53)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Oncontainer)
                .HasMaxLength(20)
                .HasColumnName("ONCONTAINER");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Outordtypedesc)
                .HasMaxLength(50)
                .HasColumnName("OUTORDTYPEDESC");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(10)
                .HasColumnName("USAGETYPE");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<LblLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lblLoad");

            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<LblLoadShip>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lblLoadShip");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Carriername)
                .HasMaxLength(50)
                .HasColumnName("CARRIERNAME");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Comptypedesc)
                .HasMaxLength(50)
                .HasColumnName("COMPTYPEDESC");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(53)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Othersku)
                .HasMaxLength(50)
                .HasColumnName("OTHERSKU");
            entity.Property(e => e.Outordtypedesc)
                .HasMaxLength(50)
                .HasColumnName("OUTORDTYPEDESC");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Skushortdesc)
                .HasMaxLength(50)
                .HasColumnName("SKUSHORTDESC");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Uomdesc)
                .HasMaxLength(50)
                .HasColumnName("UOMDESC");
            entity.Property(e => e.Uomunits).HasColumnName("uomunits");
            entity.Property(e => e.Vendorsku)
                .HasMaxLength(50)
                .HasColumnName("VENDORSKU");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<LblLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lblLocation");

            entity.Property(e => e.Accessibleloads).HasColumnName("ACCESSIBLELOADS");
            entity.Property(e => e.Accesstype)
                .HasMaxLength(10)
                .HasColumnName("ACCESSTYPE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Congestionregion)
                .HasMaxLength(20)
                .HasColumnName("CONGESTIONREGION");
            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Heightfromfloor).HasColumnName("HEIGHTFROMFLOOR");
            entity.Property(e => e.Hustoragetemplate)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATE");
            entity.Property(e => e.Inhandoff)
                .HasMaxLength(20)
                .HasColumnName("INHANDOFF");
            entity.Property(e => e.Inventory).HasColumnName("INVENTORY");
            entity.Property(e => e.Laborhufacing)
                .HasMaxLength(20)
                .HasColumnName("LABORHUFACING");
            entity.Property(e => e.Laborinserttype)
                .HasMaxLength(20)
                .HasColumnName("LABORINSERTTYPE");
            entity.Property(e => e.Laborpicktype)
                .HasMaxLength(20)
                .HasColumnName("LABORPICKTYPE");
            entity.Property(e => e.Laborreachtype)
                .HasMaxLength(20)
                .HasColumnName("LABORREACHTYPE");
            entity.Property(e => e.Laborretrievetype)
                .HasMaxLength(20)
                .HasColumnName("LABORRETRIEVETYPE");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastmovein)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEIN");
            entity.Property(e => e.Lastmoveout)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEOUT");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Locaccessibility)
                .HasMaxLength(20)
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Locmhtype)
                .HasMaxLength(10)
                .HasColumnName("LOCMHTYPE");
            entity.Property(e => e.Locsortorder)
                .HasMaxLength(20)
                .HasColumnName("LOCSORTORDER");
            entity.Property(e => e.Locstoragetype)
                .HasMaxLength(10)
                .HasColumnName("LOCSTORAGETYPE");
            entity.Property(e => e.Loctpickype)
                .HasMaxLength(10)
                .HasColumnName("LOCTPICKYPE");
            entity.Property(e => e.Locusagetype)
                .HasMaxLength(10)
                .HasColumnName("LOCUSAGETYPE");
            entity.Property(e => e.Looseid).HasColumnName("LOOSEID");
            entity.Property(e => e.Outhandoff)
                .HasMaxLength(20)
                .HasColumnName("OUTHANDOFF");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picksfromlastcount).HasColumnName("PICKSFROMLASTCOUNT");
            entity.Property(e => e.Problemflag).HasColumnName("PROBLEMFLAG");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.Xcoordinate).HasColumnName("XCOORDINATE");
            entity.Property(e => e.Ycoordinate).HasColumnName("YCOORDINATE");
            entity.Property(e => e.Zcoordinate).HasColumnName("ZCOORDINATE");
            entity.Property(e => e.Zpicking)
                .HasMaxLength(20)
                .HasColumnName("ZPICKING");
        });

        modelBuilder.Entity<LblOutboundOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lblOutboundOrder");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Comptypedesc)
                .HasMaxLength(50)
                .HasColumnName("comptypedesc");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Defaultcontact)
                .HasMaxLength(20)
                .HasColumnName("DEFAULTCONTACT");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordertypedesc)
                .HasMaxLength(50)
                .HasColumnName("ordertypedesc");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<LblPick>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lblPick");

            entity.Property(e => e.Adjqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ADJQTY");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Comptypedesc)
                .HasMaxLength(50)
                .HasColumnName("COMPTYPEDESC");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Othersku)
                .HasMaxLength(50)
                .HasColumnName("OTHERSKU");
            entity.Property(e => e.Outordtypedesc)
                .HasMaxLength(50)
                .HasColumnName("OUTORDTYPEDESC");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picksortorder)
                .HasMaxLength(10)
                .HasColumnName("PICKSORTORDER");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Skushortdesc)
                .HasMaxLength(50)
                .HasColumnName("SKUSHORTDESC");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Unitprice).HasColumnName("UNITPRICE");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Uomdesc)
                .HasMaxLength(50)
                .HasColumnName("UOMDESC");
            entity.Property(e => e.Uomunits).HasColumnName("UOMUNITS");
            entity.Property(e => e.Velocity)
                .HasMaxLength(10)
                .HasColumnName("VELOCITY");
            entity.Property(e => e.Vendorsku)
                .HasMaxLength(50)
                .HasColumnName("VENDORSKU");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<LblSku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lblSKU");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Baseitem)
                .HasMaxLength(10)
                .HasColumnName("BASEITEM");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Counttolerance).HasColumnName("COUNTTOLERANCE");
            entity.Property(e => e.Cyclecountint).HasColumnName("CYCLECOUNTINT");
            entity.Property(e => e.Dailydemand)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DAILYDEMAND");
            entity.Property(e => e.Dailypicks)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DAILYPICKS");
            entity.Property(e => e.Defaultrecuom)
                .HasMaxLength(10)
                .HasColumnName("DEFAULTRECUOM");
            entity.Property(e => e.Defaultuom)
                .HasMaxLength(10)
                .HasColumnName("DEFAULTUOM");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fifoindifference).HasColumnName("FIFOINDIFFERENCE");
            entity.Property(e => e.Hazclass)
                .HasMaxLength(20)
                .HasColumnName("HAZCLASS");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Initialstatus)
                .HasMaxLength(10)
                .HasColumnName("INITIALSTATUS");
            entity.Property(e => e.Inventory).HasColumnName("INVENTORY");
            entity.Property(e => e.Lastcyclecount)
                .HasColumnType("datetime")
                .HasColumnName("LASTCYCLECOUNT");
            entity.Property(e => e.Lowlimitcount).HasColumnName("LOWLIMITCOUNT");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Newsku).HasColumnName("NEWSKU");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Onsitemax)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("ONSITEMAX");
            entity.Property(e => e.Onsitemin)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("ONSITEMIN");
            entity.Property(e => e.Oportunityrelpflag).HasColumnName("OPORTUNITYRELPFLAG");
            entity.Property(e => e.Othersku)
                .HasMaxLength(50)
                .HasColumnName("OTHERSKU");
            entity.Property(e => e.Overpickpct)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OVERPICKPCT");
            entity.Property(e => e.Overreceivepct)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OVERRECEIVEPCT");
            entity.Property(e => e.Picksortorder)
                .HasMaxLength(10)
                .HasColumnName("PICKSORTORDER");
            entity.Property(e => e.Picture)
                .HasMaxLength(10)
                .HasColumnName("PICTURE");
            entity.Property(e => e.Preflocation)
                .HasMaxLength(20)
                .HasColumnName("PREFLOCATION");
            entity.Property(e => e.Prefputregion)
                .HasMaxLength(10)
                .HasColumnName("PREFPUTREGION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Skushortdesc)
                .HasMaxLength(50)
                .HasColumnName("SKUSHORTDESC");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Storageclass)
                .HasMaxLength(20)
                .HasColumnName("STORAGECLASS");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Unitprice).HasColumnName("UNITPRICE");
            entity.Property(e => e.Velocity)
                .HasMaxLength(10)
                .HasColumnName("VELOCITY");
            entity.Property(e => e.Vendorsku)
                .HasMaxLength(50)
                .HasColumnName("VENDORSKU");
        });

        modelBuilder.Entity<LblTransshipment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("lblTransshipment");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expectedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EXPECTEDQTY");
            entity.Property(e => e.Expectedweight)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EXPECTEDWEIGHT");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Receivedfrom)
                .HasMaxLength(20)
                .HasColumnName("RECEIVEDFROM");
            entity.Property(e => e.Receivedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RECEIVEDQTY");
            entity.Property(e => e.Receiveweight)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RECEIVEWEIGHT");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDELIVERYDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduledarrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDARRIVALDATE");
            entity.Property(e => e.Scheduleddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDELIVERYDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Sourcecompanytype)
                .HasMaxLength(10)
                .HasColumnName("SOURCECOMPANYTYPE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanytype)
                .HasMaxLength(10)
                .HasColumnName("TARGETCOMPANYTYPE");
            entity.Property(e => e.Transshipment)
                .HasMaxLength(20)
                .HasColumnName("TRANSSHIPMENT");
        });

        modelBuilder.Entity<Load>(entity =>
        {
            entity.HasKey(e => e.Loadid).HasName("PK__LOADS__CB88025783080529");

            entity.ToTable("LOADS");

            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Accessibility)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ACCESSIBILITY");
            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasDefaultValueSql("('')")
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastcountuser)
                .HasMaxLength(20)
                .HasColumnName("LASTCOUNTUSER");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Lastmoveuser)
                .HasMaxLength(20)
                .HasColumnName("LASTMOVEUSER");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Laststatusrc)
                .HasMaxLength(10)
                .HasColumnName("LASTSTATUSRC");
            entity.Property(e => e.Laststatususer)
                .HasMaxLength(20)
                .HasColumnName("LASTSTATUSUSER");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Sublocation)
                .HasMaxLength(20)
                .HasColumnName("SUBLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
        });

        modelBuilder.Entity<LoadUom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LoadUOM");

            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .HasColumnName("CODE");
            entity.Property(e => e.Codelistcode)
                .HasMaxLength(20)
                .HasColumnName("CODELISTCODE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<Loadattribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LOADATTRIBUTES");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.HandlingUnitType).HasMaxLength(20);
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastcountuser)
                .HasMaxLength(20)
                .HasColumnName("LASTCOUNTUSER");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Lastmoveuser)
                .HasMaxLength(20)
                .HasColumnName("LASTMOVEUSER");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Laststatusrc)
                .HasMaxLength(10)
                .HasColumnName("LASTSTATUSRC");
            entity.Property(e => e.Laststatususer)
                .HasMaxLength(20)
                .HasColumnName("LASTSTATUSUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Loaduomdesc)
                .HasMaxLength(50)
                .HasColumnName("LOADUOMdesc");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Pkey1)
                .HasMaxLength(20)
                .HasColumnName("PKEY1");
            entity.Property(e => e.Pkey2)
                .HasMaxLength(20)
                .HasColumnName("PKEY2");
            entity.Property(e => e.Pkey3)
                .HasMaxLength(20)
                .HasColumnName("PKEY3");
            entity.Property(e => e.Pkeytype)
                .HasMaxLength(10)
                .HasColumnName("PKEYTYPE");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Sublocation)
                .HasMaxLength(20)
                .HasColumnName("SUBLOCATION");
            entity.Property(e => e.Touom)
                .HasMaxLength(10)
                .HasColumnName("TOUOM");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSONHOLD");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<LoadingPlanVehicleLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LoadingPlanVehicleLocations");

            entity.Property(e => e.Bay).HasColumnName("BAY");
            entity.Property(e => e.Depth).HasColumnName("DEPTH");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Level)
                .HasMaxLength(20)
                .HasColumnName("LEVEL");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Side)
                .HasMaxLength(20)
                .HasColumnName("SIDE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Totalvolume)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Vehicletypename)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPENAME");
            entity.Property(e => e.Weightlimit).HasColumnName("WEIGHTLIMIT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<Loadingplan>(entity =>
        {
            entity.HasKey(e => new { e.Planid, e.Shipment, e.Vehiclelocation });

            entity.ToTable("LOADINGPLAN");

            entity.Property(e => e.Planid)
                .HasMaxLength(20)
                .HasColumnName("PLANID");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Vehiclelocation)
                .HasMaxLength(20)
                .HasColumnName("VEHICLELOCATION");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Picklist)
                .HasMaxLength(20)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Qty).HasColumnName("QTY");
        });

        modelBuilder.Entity<Loadingplanpolicy>(entity =>
        {
            entity.HasKey(e => e.Loadingplanpolicy1).HasName("PK__LOADINGP__32AD6E61B166C41C");

            entity.ToTable("LOADINGPLANPOLICIES");

            entity.Property(e => e.Loadingplanpolicy1)
                .HasMaxLength(20)
                .HasColumnName("LOADINGPLANPOLICY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Maxcustomers).HasColumnName("MAXCUSTOMERS");
            entity.Property(e => e.Pickmethod)
                .HasMaxLength(20)
                .HasColumnName("PICKMETHOD");
            entity.Property(e => e.Stackoverfullpallets)
                .HasMaxLength(20)
                .HasColumnName("STACKOVERFULLPALLETS");
        });

        modelBuilder.Entity<Loadingplanview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LOADINGPLANVIEW");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("companyname");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Picklist)
                .HasMaxLength(20)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Planid)
                .HasMaxLength(20)
                .HasColumnName("PLANID");
            entity.Property(e => e.Qty).HasColumnName("QTY");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("sku");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("skudesc");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("targetcompany");
            entity.Property(e => e.Vehiclelocation)
                .HasMaxLength(20)
                .HasColumnName("VEHICLELOCATION");
        });

        modelBuilder.Entity<Loadingpolicieslookup>(entity =>
        {
            entity.HasKey(e => new { e.Vehicletype, e.Carrier }).HasName("PK_POLICIESLOOKUP");

            entity.ToTable("LOADINGPOLICIESLOOKUP");

            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Loadingplanpolicy)
                .HasMaxLength(20)
                .HasColumnName("LOADINGPLANPOLICY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(20)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
        });

        modelBuilder.Entity<Loadsaccessibility>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LOADSACCESSIBILITY");

            entity.Property(e => e.Accessibility).HasColumnName("ACCESSIBILITY");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.Location1).HasName("PK__LOCATION__7B4298B4B78B9802");

            entity.ToTable("LOCATION");

            entity.Property(e => e.Location1)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Accessibleloads).HasColumnName("ACCESSIBLELOADS");
            entity.Property(e => e.Accesstype)
                .HasMaxLength(10)
                .HasDefaultValueSql("('')")
                .HasColumnName("ACCESSTYPE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Congestionregion)
                .HasMaxLength(20)
                .HasColumnName("CONGESTIONREGION");
            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Heightfromfloor).HasColumnName("HEIGHTFROMFLOOR");
            entity.Property(e => e.Hustoragetemplate)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATE");
            entity.Property(e => e.Inhandoff)
                .HasMaxLength(20)
                .HasColumnName("INHANDOFF");
            entity.Property(e => e.Inventory)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("INVENTORY");
            entity.Property(e => e.Laborhufacing)
                .HasMaxLength(20)
                .HasColumnName("LABORHUFACING");
            entity.Property(e => e.Laborinserttype)
                .HasMaxLength(20)
                .HasColumnName("LABORINSERTTYPE");
            entity.Property(e => e.Laborpicktype)
                .HasMaxLength(20)
                .HasColumnName("LABORPICKTYPE");
            entity.Property(e => e.Laborreachtype)
                .HasMaxLength(20)
                .HasColumnName("LABORREACHTYPE");
            entity.Property(e => e.Laborretrievetype)
                .HasMaxLength(20)
                .HasColumnName("LABORRETRIEVETYPE");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastmovein)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEIN");
            entity.Property(e => e.Lastmoveout)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEOUT");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadscapacity)
                .HasDefaultValueSql("((1))")
                .HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Locaccessibility)
                .HasMaxLength(20)
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Locmhtype)
                .HasMaxLength(10)
                .HasColumnName("LOCMHTYPE");
            entity.Property(e => e.Locsortorder)
                .HasMaxLength(20)
                .HasColumnName("LOCSORTORDER");
            entity.Property(e => e.Locstoragetype)
                .HasMaxLength(10)
                .HasColumnName("LOCSTORAGETYPE");
            entity.Property(e => e.Loctpickype)
                .HasMaxLength(10)
                .HasColumnName("LOCTPICKYPE");
            entity.Property(e => e.Locusagetype)
                .HasMaxLength(10)
                .HasColumnName("LOCUSAGETYPE");
            entity.Property(e => e.Looseid).HasColumnName("LOOSEID");
            entity.Property(e => e.Outhandoff)
                .HasMaxLength(20)
                .HasColumnName("OUTHANDOFF");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picksfromlastcount).HasColumnName("PICKSFROMLASTCOUNT");
            entity.Property(e => e.Problemflag).HasColumnName("PROBLEMFLAG");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.Xcoordinate).HasColumnName("XCOORDINATE");
            entity.Property(e => e.Ycoordinate).HasColumnName("YCOORDINATE");
            entity.Property(e => e.Zcoordinate).HasColumnName("ZCOORDINATE");
            entity.Property(e => e.Zpicking)
                .HasMaxLength(20)
                .HasColumnName("ZPICKING");
        });

        modelBuilder.Entity<Mapbitmap>(entity =>
        {
            entity.HasKey(e => e.Mapname).HasName("PK__MAPBITMA__DF7DC5623E39990F");

            entity.ToTable("MAPBITMAP");

            entity.Property(e => e.Mapname)
                .HasMaxLength(50)
                .HasColumnName("MAPNAME");
            entity.Property(e => e.Description)
                .HasMaxLength(70)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Dpi).HasColumnName("DPI");
            entity.Property(e => e.Ishome).HasColumnName("ISHOME");
            entity.Property(e => e.Owner)
                .HasMaxLength(70)
                .HasColumnName("OWNER");
            entity.Property(e => e.Projectiontype).HasColumnName("PROJECTIONTYPE");
            entity.Property(e => e.Scale).HasColumnName("SCALE");
            entity.Property(e => e.Xbottomleft).HasColumnName("XBOTTOMLEFT");
            entity.Property(e => e.Xbottomright).HasColumnName("XBOTTOMRIGHT");
            entity.Property(e => e.Xoffset).HasColumnName("XOFFSET");
            entity.Property(e => e.Xtopleft).HasColumnName("XTOPLEFT");
            entity.Property(e => e.Xtopright).HasColumnName("XTOPRIGHT");
            entity.Property(e => e.Ybottomleft).HasColumnName("YBOTTOMLEFT");
            entity.Property(e => e.Ybottomright).HasColumnName("YBOTTOMRIGHT");
            entity.Property(e => e.Yoffset).HasColumnName("YOFFSET");
            entity.Property(e => e.Ytopleft).HasColumnName("YTOPLEFT");
            entity.Property(e => e.Ytopright).HasColumnName("YTOPRIGHT");
        });

        modelBuilder.Entity<Mapdispobj>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MAPDISPOBJ");

            entity.Property(e => e.Objectcolor)
                .HasMaxLength(50)
                .HasColumnName("OBJECTCOLOR");
            entity.Property(e => e.Objecticon)
                .HasMaxLength(50)
                .HasColumnName("OBJECTICON");
            entity.Property(e => e.Objectid)
                .HasMaxLength(3)
                .HasColumnName("OBJECTID");
        });

        modelBuilder.Entity<Mapnetwork>(entity =>
        {
            entity.HasKey(e => new { e.Pointid, e.Nextpointid }).HasName("PK_MAPNETWORK_5");

            entity.ToTable("MAPNETWORK");

            entity.Property(e => e.Pointid).HasColumnName("POINTID");
            entity.Property(e => e.Nextpointid).HasColumnName("NEXTPOINTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Averagespeed).HasColumnName("AVERAGESPEED");
            entity.Property(e => e.Drivingdist).HasColumnName("DRIVINGDIST");
            entity.Property(e => e.Drivingtime).HasColumnName("DRIVINGTIME");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Isoneway).HasColumnName("ISONEWAY");
            entity.Property(e => e.Neighborsradius)
                .HasDefaultValueSql("((0))")
                .HasColumnName("NEIGHBORSRADIUS");
            entity.Property(e => e.Roaddirection)
                .HasMaxLength(20)
                .HasColumnName("ROADDIRECTION");
            entity.Property(e => e.Roadname)
                .HasMaxLength(50)
                .HasColumnName("ROADNAME");
            entity.Property(e => e.Roadtype)
                .HasMaxLength(20)
                .HasColumnName("ROADTYPE");
            entity.Property(e => e.RushFactor).HasColumnName("RUSH_FACTOR");
            entity.Property(e => e.Rushamfrom)
                .HasColumnType("datetime")
                .HasColumnName("RUSHAMFROM");
            entity.Property(e => e.Rushamto)
                .HasColumnType("datetime")
                .HasColumnName("RUSHAMTO");
            entity.Property(e => e.Rushpmfrom)
                .HasColumnType("datetime")
                .HasColumnName("RUSHPMFROM");
            entity.Property(e => e.Rushpmto)
                .HasColumnType("datetime")
                .HasColumnName("RUSHPMTO");
            entity.Property(e => e.Toll).HasColumnName("TOLL");
        });

        modelBuilder.Entity<Mapnetworkdistance>(entity =>
        {
            entity.HasKey(e => new { e.Source, e.Destination }).HasName("PK_NETWORKDISTANCES");

            entity.ToTable("MAPNETWORKDISTANCES");

            entity.HasIndex(e => e.Destination, "IX_DESTINATION");

            entity.HasIndex(e => e.Source, "IX_SOURCE");

            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .HasColumnName("SOURCE");
            entity.Property(e => e.Destination)
                .HasMaxLength(50)
                .HasColumnName("DESTINATION");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Distance).HasColumnName("DISTANCE");
            entity.Property(e => e.Drivingtime).HasColumnName("DRIVINGTIME");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Mappoint>(entity =>
        {
            entity.HasKey(e => e.Pointid).HasName("PK__MAPPOINT__5C36EF659CE2DB47");

            entity.ToTable("MAPPOINTS");

            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Comments)
                .HasMaxLength(50)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .HasColumnName("COUNTRY_CODE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Lat).HasColumnName("LAT");
            entity.Property(e => e.Latitude).HasColumnName("LATITUDE");
            entity.Property(e => e.Lon).HasColumnName("LON");
            entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
            entity.Property(e => e.Pointtypeid)
                .HasMaxLength(10)
                .HasColumnName("POINTTYPEID");
            entity.Property(e => e.Shortname)
                .HasMaxLength(20)
                .HasColumnName("SHORTNAME");
            entity.Property(e => e.TimeZone)
                .HasMaxLength(1)
                .HasColumnName("TIME_ZONE");
        });

        modelBuilder.Entity<Mappointtype>(entity =>
        {
            entity.HasKey(e => e.Mappointtypeid).HasName("PK__MAPPOINT__5495C070895C9DEF");

            entity.ToTable("MAPPOINTTYPE");

            entity.Property(e => e.Mappointtypeid)
                .ValueGeneratedNever()
                .HasColumnName("MAPPOINTTYPEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Color).HasColumnName("COLOR");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("NAME");
        });

        modelBuilder.Entity<Mapterritory>(entity =>
        {
            entity.HasKey(e => new { e.Territoryid, e.Territorysetid }).HasName("PK_MAPTERRITORY_1");

            entity.ToTable("MAPTERRITORY");

            entity.Property(e => e.Territoryid)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYID");
            entity.Property(e => e.Territorysetid)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSETID");
            entity.Property(e => e.Territoryname)
                .HasMaxLength(50)
                .HasColumnName("TERRITORYNAME");
        });

        modelBuilder.Entity<Mapterritoryboundary>(entity =>
        {
            entity.HasKey(e => new { e.Territoryid, e.Pointnum });

            entity.ToTable("MAPTERRITORYBOUNDARY");

            entity.Property(e => e.Territoryid)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYID");
            entity.Property(e => e.Pointnum).HasColumnName("POINTNUM");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
        });

        modelBuilder.Entity<Mapterritoryset>(entity =>
        {
            entity.HasKey(e => e.Territorysetid);

            entity.ToTable("MAPTERRITORYSET");

            entity.Property(e => e.Territorysetid)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSETID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Territorysetname)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSETNAME");
        });

        modelBuilder.Entity<Mhe>(entity =>
        {
            entity.HasKey(e => e.Mheid).HasName("PK__MHE__E52F9ADD9D0B317E");

            entity.ToTable("MHE");

            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Downconst).HasColumnName("DOWNCONST");
            entity.Property(e => e.Downvar).HasColumnName("DOWNVAR");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fastconst).HasColumnName("FASTCONST");
            entity.Property(e => e.Fastthreshold).HasColumnName("FASTTHRESHOLD");
            entity.Property(e => e.Fastvar).HasColumnName("FASTVAR");
            entity.Property(e => e.Horizontalconst).HasColumnName("HORIZONTALCONST");
            entity.Property(e => e.Horizontalvar).HasColumnName("HORIZONTALVAR");
            entity.Property(e => e.Horizontalweightconst).HasColumnName("HORIZONTALWEIGHTCONST");
            entity.Property(e => e.Horizontalweightvar).HasColumnName("HORIZONTALWEIGHTVAR");
            entity.Property(e => e.Insertconst).HasColumnName("INSERTCONST");
            entity.Property(e => e.Labelprinter)
                .HasMaxLength(50)
                .HasColumnName("LABELPRINTER");
            entity.Property(e => e.Maxreachheight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MAXREACHHEIGHT");
            entity.Property(e => e.Mhetype)
                .HasMaxLength(20)
                .HasColumnName("MHETYPE");
            entity.Property(e => e.Slowconst).HasColumnName("SLOWCONST");
            entity.Property(e => e.Slowthreshold).HasColumnName("SLOWTHRESHOLD");
            entity.Property(e => e.Slowvar).HasColumnName("SLOWVAR");
            entity.Property(e => e.Terminaltype)
                .HasMaxLength(50)
                .HasColumnName("TERMINALTYPE");
            entity.Property(e => e.Upconst).HasColumnName("UPCONST");
            entity.Property(e => e.Upvar).HasColumnName("UPVAR");
            entity.Property(e => e.Verticalweightconst).HasColumnName("VERTICALWEIGHTCONST");
            entity.Property(e => e.Verticalweightvar).HasColumnName("VERTICALWEIGHTVAR");
            entity.Property(e => e.Walkconst).HasColumnName("WALKCONST");
            entity.Property(e => e.Walkthreshold).HasColumnName("WALKTHRESHOLD");
            entity.Property(e => e.Walkvar).HasColumnName("WALKVAR");
        });

        modelBuilder.Entity<Mheedgetype>(entity =>
        {
            entity.HasKey(e => new { e.Mhetype, e.Edgetype });

            entity.ToTable("MHEEDGETYPE");

            entity.Property(e => e.Mhetype)
                .HasMaxLength(20)
                .HasColumnName("MHETYPE");
            entity.Property(e => e.Edgetype)
                .HasMaxLength(20)
                .HasColumnName("EDGETYPE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Orderheaderview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ORDERHEADERVIEW");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Driver)
                .HasMaxLength(50)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Hostorderid)
                .HasMaxLength(50)
                .HasColumnName("HOSTORDERID");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<Orderload>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Orderid, e.Loadid });

            entity.ToTable("ORDERLOADS");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Picklist)
                .HasMaxLength(20)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
        });

        modelBuilder.Entity<Orderrequirement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ORDERREQUIREMENTS");

            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("carrier");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("classname");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Hazclass)
                .HasMaxLength(20)
                .HasColumnName("HAZCLASS");
            entity.Property(e => e.Invstatus)
                .HasMaxLength(10)
                .HasColumnName("INVSTATUS");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Leftqtyvolume).HasColumnName("leftqtyvolume");
            entity.Property(e => e.Lineunits)
                .HasColumnType("decimal(37, 8)")
                .HasColumnName("lineunits");
            entity.Property(e => e.Linevalue).HasColumnName("linevalue");
            entity.Property(e => e.Linevolume).HasColumnName("linevolume");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Orderlines).HasColumnName("orderlines");
            entity.Property(e => e.Orderpriority).HasColumnName("orderpriority");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Orderunits)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("ORDERUNITS");
            entity.Property(e => e.Ordervalue).HasColumnName("ordervalue");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Picksortorder)
                .HasMaxLength(10)
                .HasColumnName("picksortorder");
            entity.Property(e => e.Pkey1)
                .HasMaxLength(20)
                .HasColumnName("PKEY1");
            entity.Property(e => e.Pkey2)
                .HasMaxLength(20)
                .HasColumnName("PKEY2");
            entity.Property(e => e.Pkey3)
                .HasMaxLength(20)
                .HasColumnName("PKEY3");
            entity.Property(e => e.Pkeytype)
                .HasMaxLength(10)
                .HasColumnName("PKEYTYPE");
            entity.Property(e => e.Qtylefttofullfill)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("qtylefttofullfill");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("skugroup");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Unloadingtype)
                .HasMaxLength(20)
                .HasColumnName("unloadingtype");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("vehicletype");
            entity.Property(e => e.Velocity)
                .HasMaxLength(10)
                .HasColumnName("velocity");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Ordersroutingparam>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ORDERSROUTINGPARAMS");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("carrier");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderlines).HasColumnName("orderlines");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Orderunits)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("ORDERUNITS");
            entity.Property(e => e.Ordervalue).HasColumnName("ordervalue");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Unloadingtype)
                .HasMaxLength(20)
                .HasColumnName("unloadingtype");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("vehicletype");
        });

        modelBuilder.Entity<OutboundOrderPack>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("OutboundOrderPack");

            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<Outboundorbomdetail>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Orderid, e.Orderline, e.Partsku });

            entity.ToTable("OUTBOUNDORBOMDETAIL");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Partsku)
                .HasMaxLength(20)
                .HasColumnName("PARTSKU");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Invstatus)
                .HasMaxLength(10)
                .HasColumnName("INVSTATUS");
            entity.Property(e => e.Qtyallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYALLOCATED");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
        });

        modelBuilder.Entity<Outboundordetail>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Orderid, e.Orderline }).HasName("PK_OUTBOUNDORDERDETAIL");

            entity.ToTable("OUTBOUNDORDETAIL");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Exploadedflag).HasColumnName("EXPLOADEDFLAG");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputqtyuom)
                .HasMaxLength(10)
                .HasColumnName("INPUTQTYUOM");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(20)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasDefaultValueSql("('AVAILABLE')")
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Lineoum)
                .HasMaxLength(20)
                .HasColumnName("LINEOUM");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Originalsku)
                .HasMaxLength(50)
                .HasColumnName("ORIGINALSKU");
            entity.Property(e => e.Qtyallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYALLOCATED");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypacked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPACKED");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtysoftallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSOFTALLOCATED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Qtyverified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYVERIFIED");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Uomqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UOMQTY");
        });

        modelBuilder.Entity<Outboundordetailattribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("OUTBOUNDORDETAILATTRIBUTE");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Exploadedflag).HasColumnName("EXPLOADEDFLAG");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputqtyuom)
                .HasMaxLength(10)
                .HasColumnName("INPUTQTYUOM");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(20)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Lineoum)
                .HasMaxLength(20)
                .HasColumnName("LINEOUM");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Pkey1)
                .HasMaxLength(20)
                .HasColumnName("PKEY1");
            entity.Property(e => e.Pkey2)
                .HasMaxLength(20)
                .HasColumnName("PKEY2");
            entity.Property(e => e.Pkey3)
                .HasMaxLength(20)
                .HasColumnName("PKEY3");
            entity.Property(e => e.Pkeytype)
                .HasMaxLength(10)
                .HasColumnName("PKEYTYPE");
            entity.Property(e => e.Qtyallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYALLOCATED");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypacked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPACKED");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtysoftallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSOFTALLOCATED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Qtyverified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYVERIFIED");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Uomqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UOMQTY");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Outboundorheader>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Orderid }).HasName("PK_OUTBOUNDORDERHEADER");

            entity.ToTable("OUTBOUNDORHEADER");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Createdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Hostorderid)
                .HasMaxLength(50)
                .HasColumnName("HOSTORDERID");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<Outboundorheaderparam>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Orderid }).IsClustered(false);

            entity.ToTable("OUTBOUNDORHEADERPARAM");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Codamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CODAMOUNT");
            entity.Property(e => e.Codcurrency)
                .HasMaxLength(20)
                .HasColumnName("CODCURRENCY");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Paymentterms)
                .HasMaxLength(20)
                .HasColumnName("PAYMENTTERMS");
        });

        modelBuilder.Entity<Outordertypeparam>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OUTORDERTYPEPARAMS");

            entity.Property(e => e.Custtype)
                .HasMaxLength(10)
                .HasColumnName("CUSTTYPE");
            entity.Property(e => e.Direct).HasColumnName("DIRECT");
            entity.Property(e => e.Fromcases).HasColumnName("FROMCASES");
            entity.Property(e => e.Hasroute).HasColumnName("HASROUTE");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Tocases).HasColumnName("TOCASES");
        });

        modelBuilder.Entity<Packinglistdetail>(entity =>
        {
            entity.HasKey(e => new { e.Packinglistid, e.Loadid });

            entity.ToTable("PACKINGLISTDETAIL");

            entity.Property(e => e.Packinglistid)
                .HasMaxLength(20)
                .HasColumnName("PACKINGLISTID");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Packinglistheader>(entity =>
        {
            entity.HasKey(e => e.Packinglistid);

            entity.ToTable("PACKINGLISTHEADER");

            entity.Property(e => e.Packinglistid)
                .HasMaxLength(20)
                .HasColumnName("PACKINGLISTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Numpackages).HasColumnName("NUMPACKAGES");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<Parallelpick>(entity =>
        {
            entity.HasKey(e => e.Parallelpickid).HasName("PK__PARALLEL__9D8CB4E34F9916F9");

            entity.ToTable("PARALLELPICK");

            entity.Property(e => e.Parallelpickid)
                .HasMaxLength(10)
                .HasColumnName("PARALLELPICKID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handlingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNITTYPE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
        });

        modelBuilder.Entity<Parallelpickdetail>(entity =>
        {
            entity.HasKey(e => new { e.Parallelpickid, e.Picklist });

            entity.ToTable("PARALLELPICKDETAIL");

            entity.Property(e => e.Parallelpickid)
                .HasMaxLength(10)
                .HasColumnName("PARALLELPICKID");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistseq).HasColumnName("PICKLISTSEQ");
        });

        modelBuilder.Entity<Pickdetail>(entity =>
        {
            entity.HasKey(e => new { e.Picklist, e.Picklistline });

            entity.ToTable("PICKDETAIL");

            entity.HasIndex(e => new { e.Consignee, e.Orderid }, "IX_PICKDETAIL_CONORD");

            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Adjqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ADJQTY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Pickedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PICKEDQTY");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(50)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<Pickdetailattribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PICKDETAILATTRIBUTE");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Adjqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ADJQTY");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Pickedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PICKEDQTY");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(50)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Pkey1)
                .HasMaxLength(20)
                .HasColumnName("PKEY1");
            entity.Property(e => e.Pkey2)
                .HasMaxLength(20)
                .HasColumnName("PKEY2");
            entity.Property(e => e.Pkey3)
                .HasMaxLength(20)
                .HasColumnName("PKEY3");
            entity.Property(e => e.Pkeytype)
                .HasMaxLength(10)
                .HasColumnName("PKEYTYPE");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Pickheader>(entity =>
        {
            entity.HasKey(e => e.Picklist).HasName("PK__PICKHEAD__B9CFC3119B63C6DA");

            entity.ToTable("PICKHEADER");

            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Assigneddate)
                .HasColumnType("datetime")
                .HasColumnName("ASSIGNEDDATE");
            entity.Property(e => e.Completeddate)
                .HasColumnType("datetime")
                .HasColumnName("COMPLETEDDATE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handelingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDELINGUNITTYPE");
            entity.Property(e => e.Pickmethod)
                .HasMaxLength(10)
                .HasColumnName("PICKMETHOD");
            entity.Property(e => e.Picktype)
                .HasMaxLength(10)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Plandate)
                .HasColumnType("datetime")
                .HasColumnName("PLANDATE");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<Pickheaderview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PICKHEADERVIEW");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Assigneddate)
                .HasColumnType("datetime")
                .HasColumnName("ASSIGNEDDATE");
            entity.Property(e => e.Completeddate)
                .HasColumnType("datetime")
                .HasColumnName("COMPLETEDDATE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handelingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDELINGUNIT");
            entity.Property(e => e.Handelingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDELINGUNITTYPE");
            entity.Property(e => e.Onhandlingunit)
                .HasMaxLength(20)
                .HasColumnName("ONHANDLINGUNIT");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Parallelpickid)
                .HasMaxLength(10)
                .HasColumnName("PARALLELPICKID");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Pickmethod)
                .HasMaxLength(10)
                .HasColumnName("PICKMETHOD");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(50)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picktype)
                .HasMaxLength(10)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Plandate)
                .HasColumnType("datetime")
                .HasColumnName("PLANDATE");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<Pickingpolicy>(entity =>
        {
            entity.HasKey(e => e.Policyname).HasName("PK__PICKINGP__650D307EE17D1870");

            entity.ToTable("PICKINGPOLICY");

            entity.Property(e => e.Policyname)
                .HasMaxLength(20)
                .HasColumnName("POLICYNAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Buildpicklist)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("BUILDPICKLIST");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Pickmethod)
                .HasMaxLength(10)
                .HasColumnName("PICKMETHOD");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasDefaultValueSql("('')")
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Printpicklist)
                .HasDefaultValueSql("((1))")
                .HasColumnName("PRINTPICKLIST");
        });

        modelBuilder.Entity<Pickloc>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Sku, e.Location });

            entity.ToTable("PICKLOC");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allocatedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ALLOCATEDQTY");
            entity.Property(e => e.Currentqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CURRENTQTY");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Hotmaxreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTMAXREPLQTY");
            entity.Property(e => e.Hotreplpolicy)
                .HasMaxLength(10)
                .HasColumnName("HOTREPLPOLICY");
            entity.Property(e => e.Hotreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTREPLQTY");
            entity.Property(e => e.Maximumqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MAXIMUMQTY");
            entity.Property(e => e.Normalreplpolicy)
                .HasMaxLength(10)
                .HasColumnName("NORMALREPLPOLICY");
            entity.Property(e => e.Normalreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("NORMALREPLQTY");
            entity.Property(e => e.Overallocatedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OVERALLOCATEDQTY");
            entity.Property(e => e.Pendingqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PENDINGQTY");
        });

        modelBuilder.Entity<Picktaskspriority>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PICKTASKSPRIORITY");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Assigneddate)
                .HasColumnType("datetime")
                .HasColumnName("ASSIGNEDDATE");
            entity.Property(e => e.Completeddate)
                .HasColumnType("datetime")
                .HasColumnName("COMPLETEDDATE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handelingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDELINGUNITTYPE");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Pickmethod)
                .HasMaxLength(10)
                .HasColumnName("PICKMETHOD");
            entity.Property(e => e.Picktype)
                .HasMaxLength(10)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Plandate)
                .HasColumnType("datetime")
                .HasColumnName("PLANDATE");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<Pickup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PICKUPS");

            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))")
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Huqty).HasColumnName("HUQTY");
            entity.Property(e => e.Hutype)
                .HasMaxLength(10)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ORDERVALUE");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Trip)
                .HasMaxLength(20)
                .HasColumnName("TRIP");
            entity.Property(e => e.Volume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VOLUME");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Planparallelreleasestrategy>(entity =>
        {
            entity.HasKey(e => e.Parallelstratid).HasName("PK__PLANPARA__AC1EC2883F78276D");

            entity.ToTable("PLANPARALLELRELEASESTRATEGY");

            entity.Property(e => e.Parallelstratid).HasColumnName("PARALLELSTRATID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Customer).HasColumnName("CUSTOMER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handelingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDELINGUNITTYPE");
            entity.Property(e => e.Numlists).HasColumnName("NUMLISTS");
            entity.Property(e => e.Onhutype)
                .HasMaxLength(20)
                .HasColumnName("ONHUTYPE");
            entity.Property(e => e.Pickregion).HasColumnName("PICKREGION");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Route).HasColumnName("ROUTE");
            entity.Property(e => e.Shipment).HasColumnName("SHIPMENT");
            entity.Property(e => e.Staginglane).HasColumnName("STAGINGLANE");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
        });

        modelBuilder.Entity<Planstrategybreak>(entity =>
        {
            entity.HasKey(e => new { e.Strategyid, e.Priority }).HasName("PK_PICKBREAKSTRATEGYDETAIL");

            entity.ToTable("PLANSTRATEGYBREAK");

            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allowmultibaseitems).HasColumnName("ALLOWMULTIBASEITEMS");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Cube)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CUBE");
            entity.Property(e => e.Deliverylocation)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYLOCATION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Extendwalkforfill).HasColumnName("EXTENDWALKFORFILL");
            entity.Property(e => e.Minplannedcube)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MINPLANNEDCUBE");
            entity.Property(e => e.Minplannedweight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MINPLANNEDWEIGHT");
            entity.Property(e => e.Nosplitlinecubepct)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NOSPLITLINECUBEPCT");
            entity.Property(e => e.Nosplitlineweightpct)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NOSPLITLINEWEIGHTPCT");
            entity.Property(e => e.Numberofitems).HasColumnName("NUMBEROFITEMS");
            entity.Property(e => e.Numberofpicks).HasColumnName("NUMBEROFPICKS");
            entity.Property(e => e.Packarea)
                .HasMaxLength(20)
                .HasColumnName("PACKAREA");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picktype)
                .HasMaxLength(20)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Plancontainer).HasColumnName("PLANCONTAINER");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Planstrategydetail>(entity =>
        {
            entity.HasKey(e => e.Strategyline);

            entity.ToTable("PLANSTRATEGYDETAIL");

            entity.Property(e => e.Strategyline).HasColumnName("STRATEGYLINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allocbyhighestuom).HasColumnName("ALLOCBYHIGHESTUOM");
            entity.Property(e => e.Allocbylineuom).HasColumnName("ALLOCBYLINEUOM");
            entity.Property(e => e.Allocfullrequirement).HasColumnName("ALLOCFULLREQUIREMENT");
            entity.Property(e => e.Allocuomqty)
                .HasMaxLength(10)
                .HasColumnName("ALLOCUOMQTY");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Locpicktype)
                .HasMaxLength(20)
                .HasColumnName("LOCPICKTYPE");
            entity.Property(e => e.Npppwvol)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NPPPWVOL");
            entity.Property(e => e.Overallocpicklocs).HasColumnName("OVERALLOCPICKLOCS");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picktype)
                .HasMaxLength(10)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Zpicking).HasColumnName("ZPICKING");
        });

        modelBuilder.Entity<Planstrategyheader>(entity =>
        {
            entity.HasKey(e => e.Strategyid).HasName("PK__PLANSTRA__EE5DCFD6F64D72CA");

            entity.ToTable("PLANSTRATEGYHEADER");

            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Createloadingplan).HasColumnName("CREATELOADINGPLAN");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Pcksforfullaloc)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PCKSFORFULLALOC");
            entity.Property(e => e.Picklistbasecube)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PICKLISTBASECUBE");
            entity.Property(e => e.Picklistbaseweight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PICKLISTBASEWEIGHT");
            entity.Property(e => e.Pickmethod)
                .HasMaxLength(10)
                .HasColumnName("PICKMETHOD");
            entity.Property(e => e.Pickpartialuom).HasColumnName("PICKPARTIALUOM");
            entity.Property(e => e.Substituteskumode)
                .HasMaxLength(20)
                .HasColumnName("SUBSTITUTESKUMODE");
        });

        modelBuilder.Entity<Planstrategyrelease>(entity =>
        {
            entity.HasKey(e => e.Releasepolicyid).HasName("PK__PLANSTRA__B7C69CE3FD15FA98");

            entity.ToTable("PLANSTRATEGYRELEASE");

            entity.Property(e => e.Releasepolicyid).HasColumnName("RELEASEPOLICYID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Autoprintpicklabels)
                .HasMaxLength(10)
                .HasColumnName("AUTOPRINTPICKLABELS");
            entity.Property(e => e.Autorelease)
                .HasMaxLength(20)
                .HasColumnName("AUTORELEASE");
            entity.Property(e => e.Confirmationtype)
                .HasMaxLength(10)
                .HasColumnName("CONFIRMATIONTYPE");
            entity.Property(e => e.Contentlistdocname)
                .HasMaxLength(20)
                .HasColumnName("CONTENTLISTDOCNAME");
            entity.Property(e => e.Createjob).HasColumnName("CREATEJOB");
            entity.Property(e => e.Delcontonclose).HasColumnName("DELCONTONCLOSE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Grouppickdetails)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("GROUPPICKDETAILS");
            entity.Property(e => e.Jobpriority).HasColumnName("JOBPRIORITY");
            entity.Property(e => e.Labelformat)
                .HasMaxLength(20)
                .HasColumnName("LABELFORMAT");
            entity.Property(e => e.Picktype)
                .HasMaxLength(10)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Printcontentlist).HasColumnName("PRINTCONTENTLIST");
            entity.Property(e => e.Printpicklist).HasColumnName("PRINTPICKLIST");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Shiplabelformat)
                .HasMaxLength(100)
                .HasColumnName("SHIPLABELFORMAT");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Systempickshort)
                .HasMaxLength(20)
                .HasColumnName("SYSTEMPICKSHORT");
            entity.Property(e => e.Userpickshort)
                .HasMaxLength(20)
                .HasColumnName("USERPICKSHORT");
        });

        modelBuilder.Entity<Planstrategyscoring>(entity =>
        {
            entity.HasKey(e => e.Strategyid).HasName("PK__PLANSTRA__EE5DCFD6929C5997");

            entity.ToTable("PLANSTRATEGYSCORING");

            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Accessibility)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ACCESSIBILITY");
            entity.Property(e => e.Batch)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COLOR");
            entity.Property(e => e.Expirydate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HARVEST");
            entity.Property(e => e.Kosher)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("KOSHER");
            entity.Property(e => e.Locaccessibility)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Serial)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SIZE");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<PointedContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pointedContacts");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Latitude).HasColumnName("LATITUDE");
            entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
        });

        modelBuilder.Entity<Pointscluster>(entity =>
        {
            entity.HasKey(e => new { e.Runid, e.Pointid }).HasName("PK_PointsCluster");

            entity.ToTable("POINTSCLUSTER");

            entity.Property(e => e.Runid).HasColumnName("RUNID");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Clusternum).HasColumnName("CLUSTERNUM");
            entity.Property(e => e.Clustertype).HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Pointnum).HasColumnName("POINTNUM");
        });

        modelBuilder.Entity<Processvalidator>(entity =>
        {
            entity.HasKey(e => e.Processid);

            entity.ToTable("PROCESSVALIDATOR");

            entity.Property(e => e.Processid)
                .HasMaxLength(20)
                .HasColumnName("PROCESSID");
            entity.Property(e => e.Processname)
                .HasMaxLength(50)
                .HasColumnName("PROCESSNAME");
            entity.Property(e => e.Validationexpression).HasColumnName("VALIDATIONEXPRESSION");
        });

        modelBuilder.Entity<Putawaypolicy>(entity =>
        {
            entity.HasKey(e => e.Putawaypolicy1).HasName("PK__PUTAWAYP__6095288CB36F75EF");

            entity.ToTable("PUTAWAYPOLICY");

            entity.Property(e => e.Putawaypolicy1)
                .HasMaxLength(20)
                .HasColumnName("PUTAWAYPOLICY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Policyname)
                .HasMaxLength(50)
                .HasColumnName("POLICYNAME");
        });

        modelBuilder.Entity<Putawaypolicydetail>(entity =>
        {
            entity.HasKey(e => e.Policyline);

            entity.ToTable("PUTAWAYPOLICYDETAIL");

            entity.Property(e => e.Policyline).HasColumnName("POLICYLINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Content)
                .HasMaxLength(10)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CONTENT");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fitbyheight).HasColumnName("FITBYHEIGHT");
            entity.Property(e => e.Fitbypallettype).HasColumnName("FITBYPALLETTYPE");
            entity.Property(e => e.Fitbyvolume).HasColumnName("FITBYVOLUME");
            entity.Property(e => e.Fitbyweight).HasColumnName("FITBYWEIGHT");
            entity.Property(e => e.Locstoragetype)
                .HasMaxLength(20)
                .HasColumnName("LOCSTORAGETYPE");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Putawaypolicy)
                .HasMaxLength(20)
                .HasColumnName("PUTAWAYPOLICY");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
        });

        modelBuilder.Entity<Putawaypolicyscoring>(entity =>
        {
            entity.HasKey(e => e.Strategyid).HasName("PK__PUTAWAYP__EE5DCFD6868C46D5");

            entity.ToTable("PUTAWAYPOLICYSCORING");

            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Aisle)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("AISLE");
            entity.Property(e => e.Bay)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("BAY");
            entity.Property(e => e.Cubic)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("CUBIC");
            entity.Property(e => e.Locaccessibility)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Loclevel)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LOCLEVEL");
            entity.Property(e => e.Picklocdist)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PICKLOCDIST");
        });

        modelBuilder.Entity<Receiptdetail>(entity =>
        {
            entity.HasKey(e => new { e.Receipt, e.Receiptline });

            entity.ToTable("RECEIPTDETAIL");

            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(50)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inputuom)
                .HasMaxLength(10)
                .HasColumnName("INPUTUOM");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Originalsku)
                .HasMaxLength(50)
                .HasColumnName("ORIGINALSKU");
            entity.Property(e => e.Qtyexpected)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYEXPECTED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Reford)
                .HasMaxLength(20)
                .HasColumnName("REFORD");
            entity.Property(e => e.Refordline)
                .HasMaxLength(20)
                .HasColumnName("REFORDLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<Receiptdetailsku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RECEIPTDETAILSKU");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(50)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inputuom)
                .HasMaxLength(10)
                .HasColumnName("INPUTUOM");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Originalsku)
                .HasMaxLength(50)
                .HasColumnName("ORIGINALSKU");
            entity.Property(e => e.Qtyexpected)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYEXPECTED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Reford)
                .HasMaxLength(20)
                .HasColumnName("REFORD");
            entity.Property(e => e.Refordline)
                .HasMaxLength(20)
                .HasColumnName("REFORDLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<Receiptheader>(entity =>
        {
            entity.HasKey(e => e.Receipt).HasName("PK__RECEIPTH__4666A9C12C1B0534");

            entity.ToTable("RECEIPTHEADER");

            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Carriercompany)
                .HasMaxLength(50)
                .HasColumnName("CARRIERCOMPANY");
            entity.Property(e => e.Closereceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSERECEIPTDATE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(20)
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Estunloadingtime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ESTUNLOADINGTIME");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasColumnName("NOTES");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Startreceiptdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("STARTRECEIPTDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Transportreference)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTREFERENCE");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardappointmentid)
                .HasMaxLength(20)
                .HasColumnName("YARDAPPOINTMENTID");
        });

        modelBuilder.Entity<Receiptheaderview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RECEIPTHEADERVIEW");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Carriercompany)
                .HasMaxLength(50)
                .HasColumnName("CARRIERCOMPANY");
            entity.Property(e => e.Closereceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSERECEIPTDATE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(20)
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Estunloadingtime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ESTUNLOADINGTIME");
            entity.Property(e => e.Fullyreceived).HasColumnName("fullyreceived");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Startreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTRECEIPTDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Transportreference)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTREFERENCE");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardappointmentid)
                .HasMaxLength(20)
                .HasColumnName("YARDAPPOINTMENTID");
        });

        modelBuilder.Entity<Receivingexception>(entity =>
        {
            entity.HasKey(e => new { e.Receipt, e.Receiptline });

            entity.ToTable("RECEIVINGEXCEPTION");

            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline)
                .HasMaxLength(20)
                .HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QTY");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(20)
                .HasColumnName("REASONCODE");
        });

        modelBuilder.Entity<RepCompanyByConsigee>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repCompanyByConsigee");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<RepCompanyByConsignee>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repCompanyByConsignee");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<RepContentList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repContentList");

            entity.Property(e => e.Attserial)
                .HasMaxLength(50)
                .HasColumnName("ATTSERIAL");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Numloads).HasColumnName("numloads");
            entity.Property(e => e.Oncontainer)
                .HasMaxLength(20)
                .HasColumnName("ONCONTAINER");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(10)
                .HasColumnName("USAGETYPE");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<RepDriverManifest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repDriverManifest");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Arrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ARRIVALDATE");
            entity.Property(e => e.Bill)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Departuredate)
                .HasColumnType("datetime")
                .HasColumnName("DEPARTUREDATE");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fullname)
                .HasMaxLength(50)
                .HasColumnName("FULLNAME");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("NAME");
            entity.Property(e => e.Numpacks).HasColumnName("NUMPACKS");
            entity.Property(e => e.Packtype)
                .HasMaxLength(10)
                .HasColumnName("PACKTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.RouteStatus).HasMaxLength(10);
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopdetailid).HasColumnName("STOPDETAILID");
            entity.Property(e => e.Stopdetailname)
                .HasMaxLength(50)
                .HasColumnName("STOPDETAILNAME");
            entity.Property(e => e.Stopdetailtype)
                .HasMaxLength(20)
                .HasColumnName("STOPDETAILTYPE");
            entity.Property(e => e.Stopdetvalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVALUE");
            entity.Property(e => e.Stopdetvolume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVOLUME");
            entity.Property(e => e.Stopdetweight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETWEIGHT");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.VehicleTypeDescription).HasMaxLength(50);
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
        });

        modelBuilder.Entity<RepFlowthroughDelNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repFlowthroughDelNote");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Flowthrough)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGH");
            entity.Property(e => e.Flowthroughline)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGHLINE");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDELIVERYDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduledarrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDARRIVALDATE");
            entity.Property(e => e.Scheduleddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDELIVERYDATE");
            entity.Property(e => e.Scity)
                .HasMaxLength(50)
                .HasColumnName("SCITY");
            entity.Property(e => e.Scontact1name)
                .HasMaxLength(30)
                .HasColumnName("SCONTACT1NAME");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Sourcecompanyname)
                .HasMaxLength(100)
                .HasColumnName("SOURCECOMPANYNAME");
            entity.Property(e => e.Sourcecompanytype)
                .HasMaxLength(10)
                .HasColumnName("SOURCECOMPANYTYPE");
            entity.Property(e => e.Sstreet1)
                .HasMaxLength(50)
                .HasColumnName("SSTREET1");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Szip)
                .HasMaxLength(20)
                .HasColumnName("SZIP");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanyname)
                .HasMaxLength(100)
                .HasColumnName("TARGETCOMPANYNAME");
            entity.Property(e => e.Targetcompanytype)
                .HasMaxLength(10)
                .HasColumnName("TARGETCOMPANYTYPE");
            entity.Property(e => e.Tcity)
                .HasMaxLength(50)
                .HasColumnName("TCITY");
            entity.Property(e => e.Tcontact1name)
                .HasMaxLength(30)
                .HasColumnName("TCONTACT1NAME");
            entity.Property(e => e.Tcontact1phone)
                .HasMaxLength(20)
                .HasColumnName("TCONTACT1PHONE");
            entity.Property(e => e.Tstreet1)
                .HasMaxLength(50)
                .HasColumnName("TSTREET1");
            entity.Property(e => e.Tzip)
                .HasMaxLength(20)
                .HasColumnName("TZIP");
        });

        modelBuilder.Entity<RepFlowthrowghDelNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repFlowthrowghDelNote");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Defaultcontact)
                .HasMaxLength(20)
                .HasColumnName("DEFAULTCONTACT");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Expr1).HasMaxLength(20);
            entity.Property(e => e.Flowthrough)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGH");
            entity.Property(e => e.Flowthroughline)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGHLINE");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDELIVERYDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduledarrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDARRIVALDATE");
            entity.Property(e => e.Scheduleddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDELIVERYDATE");
            entity.Property(e => e.Scity)
                .HasMaxLength(50)
                .HasColumnName("SCITY");
            entity.Property(e => e.Scontact1name)
                .HasMaxLength(30)
                .HasColumnName("SCONTACT1NAME");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Sourcecompanyname)
                .HasMaxLength(100)
                .HasColumnName("SOURCECOMPANYNAME");
            entity.Property(e => e.Sourcecompanytype)
                .HasMaxLength(10)
                .HasColumnName("SOURCECOMPANYTYPE");
            entity.Property(e => e.Sstreet1)
                .HasMaxLength(50)
                .HasColumnName("SSTREET1");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Szip)
                .HasMaxLength(20)
                .HasColumnName("SZIP");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanyname)
                .HasMaxLength(100)
                .HasColumnName("TARGETCOMPANYNAME");
            entity.Property(e => e.Targetcompanytype)
                .HasMaxLength(10)
                .HasColumnName("TARGETCOMPANYTYPE");
            entity.Property(e => e.Tcity)
                .HasMaxLength(50)
                .HasColumnName("TCITY");
            entity.Property(e => e.Tcontact1name)
                .HasMaxLength(30)
                .HasColumnName("TCONTACT1NAME");
            entity.Property(e => e.Tcontact1phone)
                .HasMaxLength(20)
                .HasColumnName("TCONTACT1PHONE");
            entity.Property(e => e.Tstreet1)
                .HasMaxLength(50)
                .HasColumnName("TSTREET1");
            entity.Property(e => e.Tzip)
                .HasMaxLength(20)
                .HasColumnName("TZIP");
        });

        modelBuilder.Entity<RepInvAdj>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repInvAdj");

            entity.Property(e => e.Activitydate)
                .HasMaxLength(61)
                .IsUnicode(false)
                .HasColumnName("ACTIVITYDATE");
            entity.Property(e => e.Activitydate2)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVITYDATE2");
            entity.Property(e => e.Activitytype)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITYTYPE");
            entity.Property(e => e.Fromqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FROMQTY");
            entity.Property(e => e.Fullname)
                .HasMaxLength(100)
                .HasColumnName("FULLNAME");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Toqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TOQTY");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<RepInvByLoc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repInvByLoc");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<RepInvBySku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repInvBySku");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<RepInvByStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repInvByStatus");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skuclass)
                .HasMaxLength(10)
                .HasColumnName("SKUCLASS");
            entity.Property(e => e.Skuclassdesc)
                .HasMaxLength(50)
                .HasColumnName("SKUCLASSDESC");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSPICKED");
        });

        modelBuilder.Entity<RepInvOnHold>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repInvOnHold");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Activitystatusdesc)
                .HasMaxLength(50)
                .HasColumnName("ACTIVITYSTATUSDESC");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
        });

        modelBuilder.Entity<RepInvTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repInvTrans");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Invtrans)
                .HasMaxLength(10)
                .HasColumnName("INVTRANS");
            entity.Property(e => e.Line).HasColumnName("LINE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("TRANDATE");
            entity.Property(e => e.Trandesc)
                .HasMaxLength(50)
                .HasColumnName("TRANDESC");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<RepLoadByStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repLoadByStatus");

            entity.Property(e => e.Activitydate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVITYDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromstatus)
                .HasMaxLength(50)
                .HasColumnName("FROMSTATUS");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tostatus)
                .HasMaxLength(50)
                .HasColumnName("TOSTATUS");
        });

        modelBuilder.Entity<RepLoadingWorkSheet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repLoadingWorkSheet");

            entity.Property(e => e.Bol)
                .HasMaxLength(50)
                .HasColumnName("BOL");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Carriername)
                .HasMaxLength(50)
                .HasColumnName("CARRIERNAME");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Picklist)
                .HasMaxLength(20)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDDATE");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Transportreference)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTREFERENCE");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
        });

        modelBuilder.Entity<RepLocationStat>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repLocationStat");

            entity.Property(e => e.Accesstype)
                .HasMaxLength(10)
                .HasColumnName("ACCESSTYPE");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Heightfromfloor).HasColumnName("HEIGHTFROMFLOOR");
            entity.Property(e => e.Inventory)
                .HasMaxLength(30)
                .HasColumnName("INVENTORY");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastmovein)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEIN");
            entity.Property(e => e.Lastmoveout)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEOUT");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Locmhtype)
                .HasMaxLength(10)
                .HasColumnName("LOCMHTYPE");
            entity.Property(e => e.Locusagetype)
                .HasMaxLength(10)
                .HasColumnName("LOCUSAGETYPE");
            entity.Property(e => e.Looseid)
                .HasMaxLength(30)
                .HasColumnName("LOOSEID");
            entity.Property(e => e.Pendingcubic).HasColumnName("PENDINGCUBIC");
            entity.Property(e => e.Pendingloads).HasColumnName("PENDINGLOADS");
            entity.Property(e => e.Pendingweight).HasColumnName("PENDINGWEIGHT");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picksfromlastcount).HasColumnName("PICKSFROMLASTCOUNT");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Status)
                .HasMaxLength(30)
                .HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<RepOutboundDelNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repOutboundDelNote");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Defaultcontact)
                .HasMaxLength(20)
                .HasColumnName("DEFAULTCONTACT");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Exploadedflag).HasColumnName("EXPLOADEDFLAG");
            entity.Property(e => e.Hostorderid)
                .HasMaxLength(50)
                .HasColumnName("HOSTORDERID");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Lineoum)
                .HasMaxLength(20)
                .HasColumnName("LINEOUM");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Qtyallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYALLOCATED");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Uomqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UOMQTY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<RepPackingList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repPackingList");

            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Expr1).HasMaxLength(50);
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Oncontainer)
                .HasMaxLength(20)
                .HasColumnName("ONCONTAINER");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(10)
                .HasColumnName("USAGETYPE");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<RepPickByItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repPickByItem");

            entity.Property(e => e.Adjqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ADJQTY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Pickedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PICKEDQTY");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<RepPickByOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repPickByOrder");

            entity.Property(e => e.Adjqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ADJQTY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Pickedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PICKEDQTY");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<RepPickList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repPickList");

            entity.Property(e => e.Adjqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ADJQTY");
            entity.Property(e => e.Assigneddate)
                .HasColumnType("datetime")
                .HasColumnName("ASSIGNEDDATE");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Completeddate)
                .HasColumnType("datetime")
                .HasColumnName("COMPLETEDDATE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Handelingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDELINGUNITTYPE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Pickedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PICKEDQTY");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Pickmethod)
                .HasMaxLength(50)
                .HasColumnName("PICKMETHOD");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(50)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picktype)
                .HasMaxLength(50)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Plandate)
                .HasColumnType("datetime")
                .HasColumnName("PLANDATE");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<RepPickLoc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repPickLoc");

            entity.Property(e => e.Allocatedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ALLOCATEDQTY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Currentqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CURRENTQTY");
            entity.Property(e => e.Hotreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTREPLQTY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Maximumqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MAXIMUMQTY");
            entity.Property(e => e.Normalreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("NORMALREPLQTY");
            entity.Property(e => e.Overallocatedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OVERALLOCATEDQTY");
            entity.Property(e => e.Pendingqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PENDINGQTY");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<RepPickerEfficiency>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repPickerEfficiency");

            entity.Property(e => e.Activitydate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVITYDATE");
            entity.Property(e => e.Fullname)
                .HasMaxLength(100)
                .HasColumnName("FULLNAME");
            entity.Property(e => e.GroupCode).HasColumnName("GROUP_CODE");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasColumnName("GROUP_NAME");
            entity.Property(e => e.Numrows).HasColumnName("NUMROWS");
            entity.Property(e => e.Skucount).HasColumnName("SKUCOUNT");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<RepPickingPlanShort>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repPickingPlanShort");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtyallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYALLOCATED");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<RepProforma>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repProforma");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Agreementline).HasColumnName("AGREEMENTLINE");
            entity.Property(e => e.Agreementname)
                .HasMaxLength(10)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Billbasis)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("BILLBASIS");
            entity.Property(e => e.Billfromdate)
                .HasColumnType("datetime")
                .HasColumnName("BILLFROMDATE");
            entity.Property(e => e.Billingrunid)
                .HasMaxLength(10)
                .HasColumnName("BILLINGRUNID");
            entity.Property(e => e.Billtodate)
                .HasColumnType("datetime")
                .HasColumnName("BILLTODATE");
            entity.Property(e => e.Billtotal).HasColumnName("BILLTOTAL");
            entity.Property(e => e.Chargeid)
                .HasMaxLength(10)
                .HasColumnName("CHARGEID");
            entity.Property(e => e.Chargeline).HasColumnName("CHARGELINE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Trantype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TRANTYPE");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
        });

        modelBuilder.Entity<RepPutAwayWorksheet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repPutAwayWorksheet");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
        });

        modelBuilder.Entity<RepReceivingByConsignee>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repReceivingByConsignee");

            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Lastreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTRECEIPTDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Qtyordered)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORDERED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
        });

        modelBuilder.Entity<RepReceivingBySku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repReceivingBySKU");

            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Lastreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTRECEIPTDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Qtyordered)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORDERED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<RepReceivingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RepReceivingDetails");

            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Carriercompany)
                .HasMaxLength(50)
                .HasColumnName("CARRIERCOMPANY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Qtyexpected)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYEXPECTED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Startreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTRECEIPTDATE");
        });

        modelBuilder.Entity<RepReceivingDiscrepancy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repReceivingDiscrepancies");

            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Carriercompany)
                .HasMaxLength(50)
                .HasColumnName("CARRIERCOMPANY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Qtyexpected)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYEXPECTED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Startreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTRECEIPTDATE");
        });

        modelBuilder.Entity<RepReceivingManifest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repReceivingManifest");

            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Carriercompany)
                .HasMaxLength(50)
                .HasColumnName("CARRIERCOMPANY");
            entity.Property(e => e.Carriername)
                .HasMaxLength(50)
                .HasColumnName("CARRIERNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtyexpected)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYEXPECTED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Startreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTRECEIPTDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<RepReceivingSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repReceivingSummary");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Receivedqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("RECEIVEDQTY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<RepReceivingWorksheet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repReceivingWorksheet");

            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Carriercompany)
                .HasMaxLength(50)
                .HasColumnName("CARRIERCOMPANY");
            entity.Property(e => e.Carriername)
                .HasMaxLength(50)
                .HasColumnName("CARRIERNAME");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Qtyexpected)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYEXPECTED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Startreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTRECEIPTDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<RepRerShipSku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repRerShipSku");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Retqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("RETQTY");
            entity.Property(e => e.Shipqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("SHIPQTY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<RepShipBranch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repShipBranch");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<RepShipDesc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repShipDesc");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Exploadedflag).HasColumnName("EXPLOADEDFLAG");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Lineoum)
                .HasMaxLength(20)
                .HasColumnName("LINEOUM");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Qtyallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYALLOCATED");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Uomqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UOMQTY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<RepShipDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repShipDetail");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Exploadedflag).HasColumnName("EXPLOADEDFLAG");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Lineoum)
                .HasMaxLength(20)
                .HasColumnName("LINEOUM");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Qtyallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYALLOCATED");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Uomqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UOMQTY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<RepShipList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repShipList");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Containerdesc)
                .HasMaxLength(50)
                .HasColumnName("CONTAINERDESC");
            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.ShipmentId)
                .HasMaxLength(20)
                .HasColumnName("ShipmentID");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<RepShipMan>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repShipMan");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Doctype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DOCTYPE");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Invstatdesc)
                .HasMaxLength(50)
                .HasColumnName("INVSTATDESC");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Qtyallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYALLOCATED");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<RepShipSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repShipSum");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Shippedqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("SHIPPEDQTY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<RepShippedOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repShippedOrders");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<RepTranshipmentDelNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("repTranshipmentDelNote");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Defaultcontact)
                .HasMaxLength(20)
                .HasColumnName("DEFAULTCONTACT");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Expectedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EXPECTEDQTY");
            entity.Property(e => e.Expectedweight)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EXPECTEDWEIGHT");
            entity.Property(e => e.Expr1).HasMaxLength(20);
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Receivedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RECEIVEDQTY");
            entity.Property(e => e.Receiveweight)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RECEIVEWEIGHT");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDELIVERYDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduledarrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDARRIVALDATE");
            entity.Property(e => e.Scheduleddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDELIVERYDATE");
            entity.Property(e => e.Scity)
                .HasMaxLength(50)
                .HasColumnName("SCITY");
            entity.Property(e => e.Scontact1name)
                .HasMaxLength(30)
                .HasColumnName("SCONTACT1NAME");
            entity.Property(e => e.Scontact1phone)
                .HasMaxLength(20)
                .HasColumnName("SCONTACT1PHONE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Sourcecompanyname)
                .HasMaxLength(100)
                .HasColumnName("SOURCECOMPANYNAME");
            entity.Property(e => e.Sourcecompanytype)
                .HasMaxLength(10)
                .HasColumnName("SOURCECOMPANYTYPE");
            entity.Property(e => e.Sstreet1)
                .HasMaxLength(50)
                .HasColumnName("SSTREET1");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Szip)
                .HasMaxLength(20)
                .HasColumnName("SZIP");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanyname)
                .HasMaxLength(100)
                .HasColumnName("TARGETCOMPANYNAME");
            entity.Property(e => e.Targetcompanytype)
                .HasMaxLength(10)
                .HasColumnName("TARGETCOMPANYTYPE");
            entity.Property(e => e.Tcity)
                .HasMaxLength(50)
                .HasColumnName("TCITY");
            entity.Property(e => e.Tcontact1name)
                .HasMaxLength(30)
                .HasColumnName("TCONTACT1NAME");
            entity.Property(e => e.Tcontact1phone)
                .HasMaxLength(20)
                .HasColumnName("TCONTACT1PHONE");
            entity.Property(e => e.Transshipment)
                .HasMaxLength(20)
                .HasColumnName("TRANSSHIPMENT");
            entity.Property(e => e.Tstreet1)
                .HasMaxLength(50)
                .HasColumnName("TSTREET1");
            entity.Property(e => e.Tzip)
                .HasMaxLength(20)
                .HasColumnName("TZIP");
        });

        modelBuilder.Entity<Replenishment>(entity =>
        {
            entity.HasKey(e => e.Replid).HasName("PK__REPLENIS__3C1C128301C118DC");

            entity.ToTable("REPLENISHMENT");

            entity.Property(e => e.Replid)
                .HasMaxLength(10)
                .HasColumnName("REPLID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Replmethod)
                .HasMaxLength(10)
                .HasColumnName("REPLMETHOD");
            entity.Property(e => e.Repltype)
                .HasMaxLength(10)
                .HasColumnName("REPLTYPE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<ReplenishmentView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ReplenishmentView");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Replid)
                .HasMaxLength(10)
                .HasColumnName("REPLID");
            entity.Property(e => e.Replmethod)
                .HasMaxLength(10)
                .HasColumnName("REPLMETHOD");
            entity.Property(e => e.Repltype)
                .HasMaxLength(10)
                .HasColumnName("REPLTYPE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<Replpolicy>(entity =>
        {
            entity.HasKey(e => e.Policyid).HasName("PK__REPLPOLI__F2BB7A81026E17F8");

            entity.ToTable("REPLPOLICY");

            entity.Property(e => e.Policyid)
                .HasMaxLength(10)
                .HasColumnName("POLICYID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Policyname)
                .HasMaxLength(50)
                .HasColumnName("POLICYNAME");
        });

        modelBuilder.Entity<Replpolicydetail>(entity =>
        {
            entity.HasKey(e => e.Policyline);

            entity.ToTable("REPLPOLICYDETAIL");

            entity.Property(e => e.Policyline).HasColumnName("POLICYLINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allocuomqty)
                .HasMaxLength(10)
                .HasColumnName("ALLOCUOMQTY");
            entity.Property(e => e.Conftype)
                .HasMaxLength(20)
                .HasColumnName("CONFTYPE");
            entity.Property(e => e.Createtask).HasColumnName("CREATETASK");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Frompickregion)
                .HasMaxLength(20)
                .HasColumnName("FROMPICKREGION");
            entity.Property(e => e.Hotreplplanning)
                .HasMaxLength(20)
                .HasColumnName("HOTREPLPLANNING");
            entity.Property(e => e.Policyid)
                .HasMaxLength(10)
                .HasColumnName("POLICYID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Repltype)
                .HasMaxLength(10)
                .HasColumnName("REPLTYPE");
            entity.Property(e => e.Taskpriority).HasColumnName("TASKPRIORITY");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<Replpolicyscoring>(entity =>
        {
            entity.HasKey(e => e.Policyid).HasName("PK__REPLPOLI__F2BB7A81F91E7214");

            entity.ToTable("REPLPOLICYSCORING");

            entity.Property(e => e.Policyid)
                .HasMaxLength(20)
                .HasColumnName("POLICYID");
            entity.Property(e => e.Accessibility)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ACCESSIBILITY");
            entity.Property(e => e.Batch)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COLOR");
            entity.Property(e => e.Expirydate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HARVEST");
            entity.Property(e => e.Kosher)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("KOSHER");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Serial)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SIZE");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Result>(entity =>
        {
            entity.HasKey(e => e.StopId).HasName("PK__Results__8CC01CE4FC9A2EC3");

            entity.Property(e => e.StopId)
                .ValueGeneratedNever()
                .HasColumnName("STOP_ID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Comments)
                .HasMaxLength(50)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .HasColumnName("COUNTRY_CODE");
            entity.Property(e => e.LatKey).HasColumnName("LAT_KEY");
            entity.Property(e => e.Latitude).HasColumnName("LATITUDE");
            entity.Property(e => e.LocationMethod).HasColumnName("LOCATION_METHOD");
            entity.Property(e => e.LonKey).HasColumnName("LON_KEY");
            entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
            entity.Property(e => e.Nickname)
                .HasMaxLength(8)
                .HasColumnName("NICKNAME");
            entity.Property(e => e.OrderSplitting).HasColumnName("ORDER_SPLITTING");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .HasColumnName("PHONE_NUMBER");
            entity.Property(e => e.RoadType)
                .HasMaxLength(1)
                .HasColumnName("ROAD_TYPE");
            entity.Property(e => e.RushFactor).HasColumnName("RUSH_FACTOR");
            entity.Property(e => e.SetupMin).HasColumnName("SETUP_MIN");
            entity.Property(e => e.State)
                .HasMaxLength(2)
                .HasColumnName("STATE");
            entity.Property(e => e.StopName)
                .HasMaxLength(50)
                .HasColumnName("STOP_NAME");
            entity.Property(e => e.StopStatus)
                .HasMaxLength(1)
                .HasColumnName("STOP_STATUS");
            entity.Property(e => e.StopType)
                .HasMaxLength(1)
                .HasColumnName("STOP_TYPE");
            entity.Property(e => e.StreetAddress)
                .HasMaxLength(70)
                .HasColumnName("STREET_ADDRESS");
            entity.Property(e => e.TerritoryId).HasColumnName("TERRITORY_ID");
            entity.Property(e => e.TimeZone)
                .HasMaxLength(1)
                .HasColumnName("TIME_ZONE");
            entity.Property(e => e.UnloadSide)
                .HasMaxLength(1)
                .HasColumnName("UNLOAD_SIDE");
            entity.Property(e => e.Zip)
                .HasMaxLength(9)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<Route>(entity =>
        {
            entity.ToTable("ROUTE", tb => tb.HasTrigger("ActualStartTime"));

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Feasibility)
                .HasColumnType("ntext")
                .HasColumnName("FEASIBILITY");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Territoryset)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSET");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime).HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.TripGroup).HasMaxLength(20);
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<Routebreak>(entity =>
        {
            entity.HasKey(e => new { e.Routeid, e.Breaknumber });

            entity.ToTable("ROUTEBREAKS");

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Breaknumber).HasColumnName("BREAKNUMBER");
            entity.Property(e => e.Actualendtime)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDTIME");
            entity.Property(e => e.Actualstarttime)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTTIME");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Breakcomments)
                .HasMaxLength(100)
                .HasColumnName("BREAKCOMMENTS");
            entity.Property(e => e.Breaktype)
                .HasMaxLength(20)
                .HasColumnName("BREAKTYPE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Lat).HasColumnName("LAT");
            entity.Property(e => e.Lon).HasColumnName("LON");
            entity.Property(e => e.Planendtime)
                .HasColumnType("datetime")
                .HasColumnName("PLANENDTIME");
            entity.Property(e => e.Planstarttime)
                .HasColumnType("datetime")
                .HasColumnName("PLANSTARTTIME");
        });

        modelBuilder.Entity<Routebreaktype>(entity =>
        {
            entity.HasKey(e => e.Breaktype);

            entity.ToTable("ROUTEBREAKTYPE");

            entity.Property(e => e.Breaktype)
                .HasMaxLength(20)
                .HasColumnName("BREAKTYPE");
            entity.Property(e => e.Breaktypename)
                .HasMaxLength(100)
                .HasColumnName("BREAKTYPENAME");
            entity.Property(e => e.Duration).HasColumnName("DURATION");
        });

        modelBuilder.Entity<Routecolor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ROUTECOLORS");

            entity.Property(e => e.ColorId)
                .ValueGeneratedOnAdd()
                .HasColumnName("COLOR_ID");
            entity.Property(e => e.ColorInt)
                .HasMaxLength(50)
                .HasColumnName("COLOR_INT");
            entity.Property(e => e.ColorRgb)
                .HasMaxLength(50)
                .HasColumnName("COLOR_RGB");
        });

        modelBuilder.Entity<Routepackage>(entity =>
        {
            entity.HasKey(e => e.Packageid);

            entity.ToTable("ROUTEPACKAGES");

            entity.Property(e => e.Packageid)
                .HasMaxLength(20)
                .HasColumnName("PACKAGEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Packagetype)
                .HasMaxLength(20)
                .HasColumnName("PACKAGETYPE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
        });

        modelBuilder.Entity<Routestop>(entity =>
        {
            entity.HasKey(e => new { e.Routeid, e.Stopnumber });

            entity.ToTable("ROUTESTOP");

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Actualarrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALARRIVALDATE");
            entity.Property(e => e.Actualdeparturedate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALDEPARTUREDATE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Arrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ARRIVALDATE");
            entity.Property(e => e.Departuredate)
                .HasColumnType("datetime")
                .HasColumnName("DEPARTUREDATE");
            entity.Property(e => e.Distfromlaststop).HasColumnName("DISTFROMLASTSTOP");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopname)
                .HasMaxLength(50)
                .HasColumnName("STOPNAME");
            entity.Property(e => e.Timefromlaststop).HasColumnName("TIMEFROMLASTSTOP");
        });

        modelBuilder.Entity<Routestopdetail>(entity =>
        {
            entity.HasKey(e => new { e.Routeid, e.Stopnumber, e.Stopdetailid });

            entity.ToTable("ROUTESTOPDETAIL");

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stopdetailid).HasColumnName("STOPDETAILID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))")
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Numpacks).HasColumnName("NUMPACKS");
            entity.Property(e => e.Packtype)
                .HasMaxLength(10)
                .HasColumnName("PACKTYPE");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopdetailname)
                .HasMaxLength(50)
                .HasColumnName("STOPDETAILNAME");
            entity.Property(e => e.Stopdetailtype)
                .HasMaxLength(10)
                .HasColumnName("STOPDETAILTYPE");
            entity.Property(e => e.Stopdetvalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVALUE");
            entity.Property(e => e.Stopdetvolume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVOLUME");
            entity.Property(e => e.Stopdetweight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETWEIGHT");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
        });

        modelBuilder.Entity<Routestopstatus>(entity =>
        {
            entity.HasKey(e => new { e.Bol, e.Status, e.Statusdate, e.Customerkey });

            entity.ToTable("ROUTESTOPSTATUSES");

            entity.Property(e => e.Bol)
                .HasMaxLength(10)
                .HasColumnName("BOL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Customerkey)
                .HasMaxLength(10)
                .HasColumnName("CUSTOMERKEY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(10)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(10)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Routestoptask>(entity =>
        {
            entity.HasKey(e => new { e.Routeid, e.Stopnumber, e.Stoptaskid }).HasName("PK_ROUTESTOPDETAIL1");

            entity.ToTable("ROUTESTOPTASK");

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allowpartialloading)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ALLOWPARTIALLOADING");
            entity.Property(e => e.Allowpartialpickup)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ALLOWPARTIALPICKUP");
            entity.Property(e => e.Allowpartialunloading)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ALLOWPARTIALUNLOADING");
            entity.Property(e => e.Chkpnt)
                .HasMaxLength(20)
                .HasColumnName("CHKPNT");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Confdocid)
                .HasMaxLength(20)
                .HasColumnName("CONFDOCID");
            entity.Property(e => e.Confirmationlevel)
                .HasMaxLength(20)
                .HasColumnName("CONFIRMATIONLEVEL");
            entity.Property(e => e.Confirmationnumber)
                .HasMaxLength(50)
                .HasColumnName("CONFIRMATIONNUMBER");
            entity.Property(e => e.Confirmationtype)
                .HasMaxLength(20)
                .HasColumnName("CONFIRMATIONTYPE");
            entity.Property(e => e.Confirmpackageatunloading)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("CONFIRMPACKAGEATUNLOADING");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Numpacks).HasColumnName("NUMPACKS");
            entity.Property(e => e.Packtype)
                .HasMaxLength(10)
                .HasColumnName("PACKTYPE");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(20)
                .HasColumnName("REASONCODE");
            entity.Property(e => e.Recipient)
                .HasMaxLength(50)
                .HasColumnName("RECIPIENT");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopdetvalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVALUE");
            entity.Property(e => e.Stopdetvolume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVOLUME");
            entity.Property(e => e.Stopdetweight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETWEIGHT");
            entity.Property(e => e.Stoptaskname)
                .HasMaxLength(50)
                .HasColumnName("STOPTASKNAME");
            entity.Property(e => e.Stoptasktype)
                .HasMaxLength(20)
                .HasColumnName("STOPTASKTYPE");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
        });

        modelBuilder.Entity<Routestoptaskitem>(entity =>
        {
            entity.HasKey(e => new { e.Routeid, e.Stopnumber, e.Stoptaskid, e.Item, e.Uom });

            entity.ToTable("ROUTESTOPTASKITEMS");

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
            entity.Property(e => e.Item)
                .HasMaxLength(50)
                .HasColumnName("ITEM");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .HasColumnName("BARCODE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Itemdesc)
                .HasMaxLength(100)
                .HasColumnName("ITEMDESC");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Qtyconfirmed)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYCONFIRMED");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(100)
                .HasColumnName("REASONCODE");
        });

        modelBuilder.Entity<Routestoptaskpackage>(entity =>
        {
            entity.HasKey(e => new { e.Routeid, e.Stopnumber, e.Stoptaskid, e.Packageid });

            entity.ToTable("ROUTESTOPTASKPACKAGES");

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
            entity.Property(e => e.Packageid)
                .HasMaxLength(20)
                .HasColumnName("PACKAGEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Routetask>(entity =>
        {
            entity.HasKey(e => e.Taskid);

            entity.ToTable("ROUTETASKS");

            entity.Property(e => e.Taskid)
                .HasMaxLength(20)
                .HasColumnName("TASKID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Scheduledate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(20)
                .HasColumnName("TASKTYPE");
        });

        modelBuilder.Entity<Routingconstraint>(entity =>
        {
            entity.ToTable("ROUTINGCONSTRAINTS");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allowed).HasColumnName("ALLOWED");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Resourceoperator)
                .HasMaxLength(20)
                .HasColumnName("RESOURCEOPERATOR");
            entity.Property(e => e.Routingattribute)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGATTRIBUTE");
            entity.Property(e => e.Routingattributevalue)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGATTRIBUTEVALUE");
            entity.Property(e => e.Routingoperator)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGOPERATOR");
            entity.Property(e => e.Routingresourceattribute)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGRESOURCEATTRIBUTE");
            entity.Property(e => e.Routingresourceattributevalue)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGRESOURCEATTRIBUTEVALUE");
        });

        modelBuilder.Entity<Routinglog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ROUTINGLOG");

            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Chrom)
                .HasMaxLength(20)
                .HasColumnName("CHROM");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Runid)
                .HasMaxLength(50)
                .HasColumnName("RUNID");
            entity.Property(e => e.Score).HasColumnName("SCORE");
        });

        modelBuilder.Entity<Routingorder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ROUTINGORDERS");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Comments)
                .HasMaxLength(30)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Huqty).HasColumnName("HUQTY");
            entity.Property(e => e.Hutype)
                .HasMaxLength(10)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ORDERVALUE");
            entity.Property(e => e.Schedualeddate)
                .HasMaxLength(30)
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Trip)
                .HasMaxLength(20)
                .HasColumnName("TRIP");
            entity.Property(e => e.Volume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VOLUME");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Routingparam>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ROUTINGPARAMS");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Feasibility)
                .HasColumnType("ntext")
                .HasColumnName("FEASIBILITY");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Territoryset)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSET");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime).HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.TripGroup).HasMaxLength(20);
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<Routingplanstrategy>(entity =>
        {
            entity.HasKey(e => e.Planstrategyid).HasName("PK__ROUTINGP__703E1CE928A10632");

            entity.ToTable("ROUTINGPLANSTRATEGY");

            entity.Property(e => e.Planstrategyid).HasColumnName("PLANSTRATEGYID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ORDERVALUE");
            entity.Property(e => e.Ordervolume)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ORDERVOLUME");
            entity.Property(e => e.Orderweight).HasColumnName("ORDERWEIGHT");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Route)
                .HasMaxLength(10)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Unloadingtype)
                .HasMaxLength(20)
                .HasColumnName("UNLOADINGTYPE");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<Routingpolicybreak>(entity =>
        {
            entity.HasKey(e => new { e.Strategyid, e.Breaktype, e.Timecountertype });

            entity.ToTable("ROUTINGPOLICYBREAKS");

            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Breaktype)
                .HasMaxLength(20)
                .HasColumnName("BREAKTYPE");
            entity.Property(e => e.Timecountertype)
                .HasMaxLength(20)
                .HasColumnName("TIMECOUNTERTYPE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Earlieststarttime).HasColumnName("EARLIESTSTARTTIME");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Lateststarttime).HasColumnName("LATESTSTARTTIME");
            entity.Property(e => e.Timecounterfrom)
                .HasMaxLength(100)
                .HasColumnName("TIMECOUNTERFROM");
        });

        modelBuilder.Entity<Routingpolicyvehicleallocation>(entity =>
        {
            entity.HasKey(e => new { e.Strategyid, e.Priority });

            entity.ToTable("ROUTINGPOLICYVEHICLEALLOCATION");

            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Numvehicles).HasColumnName("NUMVEHICLES");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<Routingrequirement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ROUTINGREQUIREMENTS");

            entity.Property(e => e.Chkpnt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CHKPNT");
            entity.Property(e => e.Chkpntpointid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CHKPNTPOINTID");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.DelType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Depot)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Documenttype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("orderpriority");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue).HasColumnName("ordervalue");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Pdtype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PDTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Strategy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("strategy");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("transportationclass");
        });

        modelBuilder.Entity<Routingset>(entity =>
        {
            entity.HasKey(e => e.Setid).HasName("PK__ROUTINGS__B5CED9AC0B729337");

            entity.ToTable("ROUTINGSET");

            entity.Property(e => e.Setid)
                .HasMaxLength(10)
                .HasColumnName("SETID");
            entity.Property(e => e.Activerunid)
                .HasMaxLength(10)
                .HasColumnName("ACTIVERUNID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Currentindex).HasColumnName("CURRENTINDEX");
            entity.Property(e => e.Distributiondate)
                .HasColumnType("datetime")
                .HasColumnName("DISTRIBUTIONDATE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Plandate)
                .HasColumnType("datetime")
                .HasColumnName("PLANDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasDefaultValueSql("('NEW')")
                .HasColumnName("STATUS");
            entity.Property(e => e.Trip)
                .HasMaxLength(20)
                .HasColumnName("TRIP");
        });

        modelBuilder.Entity<Routingsetorder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ROUTINGSETORDERS");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Plandate)
                .HasColumnType("datetime")
                .HasColumnName("PLANDATE");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Setid)
                .HasMaxLength(10)
                .HasColumnName("SETID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trip)
                .HasMaxLength(20)
                .HasColumnName("TRIP");
        });

        modelBuilder.Entity<Routingstrategydetail>(entity =>
        {
            entity.HasKey(e => e.Strategyid).HasName("PK__ROUTINGS__EE5DCFD63886C062");

            entity.ToTable("ROUTINGSTRATEGYDETAIL");

            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allowcontinueroute).HasColumnName("ALLOWCONTINUEROUTE");
            entity.Property(e => e.Allowedovervolumeforlaststop)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ALLOWEDOVERVOLUMEFORLASTSTOP");
            entity.Property(e => e.Allowedoverweightforlaststop)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ALLOWEDOVERWEIGHTFORLASTSTOP");
            entity.Property(e => e.Allowedtimebeforeopen).HasColumnName("ALLOWEDTIMEBEFOREOPEN");
            entity.Property(e => e.Allowpickupbeforedelivery).HasColumnName("ALLOWPICKUPBEFOREDELIVERY");
            entity.Property(e => e.Allowsplitcontact).HasColumnName("ALLOWSPLITCONTACT");
            entity.Property(e => e.Allowsplitorder).HasColumnName("ALLOWSPLITORDER");
            entity.Property(e => e.Allowsplitstop).HasColumnName("ALLOWSPLITSTOP");
            entity.Property(e => e.Calcretfromlaststop).HasColumnName("CALCRETFROMLASTSTOP");
            entity.Property(e => e.Calcrettofirststop).HasColumnName("CALCRETTOFIRSTSTOP");
            entity.Property(e => e.ChkPntPositionType)
                .HasMaxLength(1)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.Clustersize).HasColumnName("CLUSTERSIZE");
            entity.Property(e => e.Clustertype)
                .HasMaxLength(20)
                .HasColumnName("CLUSTERTYPE");
            entity.Property(e => e.Continueroutewithreq).HasColumnName("CONTINUEROUTEWITHREQ");
            entity.Property(e => e.Defaultvehicletype)
                .HasMaxLength(20)
                .HasColumnName("DEFAULTVEHICLETYPE");
            entity.Property(e => e.DistanceForSplitStop).HasDefaultValueSql("((0))");
            entity.Property(e => e.DistanceJoinStopCluster).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(20)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Latesttimestartdepot).HasColumnName("LATESTTIMESTARTDEPOT");
            entity.Property(e => e.Maxadditionaldistanceperroute).HasColumnName("MAXADDITIONALDISTANCEPERROUTE");
            entity.Property(e => e.Maxclustersize).HasColumnName("MAXCLUSTERSIZE");
            entity.Property(e => e.Maxdistancebetweendeliveryandpickup).HasColumnName("MAXDISTANCEBETWEENDELIVERYANDPICKUP");
            entity.Property(e => e.Maxdistancebetweenstops).HasColumnName("MAXDISTANCEBETWEENSTOPS");
            entity.Property(e => e.Maxdistanceperroute).HasColumnName("MAXDISTANCEPERROUTE");
            entity.Property(e => e.Maximizetripspervehicle).HasColumnName("MAXIMIZETRIPSPERVEHICLE");
            entity.Property(e => e.Maxpctvolumetrucktosplit)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MAXPCTVOLUMETRUCKTOSPLIT");
            entity.Property(e => e.Maxpctweighttrucktosplit)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MAXPCTWEIGHTTRUCKTOSPLIT");
            entity.Property(e => e.Maxstopsperroute).HasColumnName("MAXSTOPSPERROUTE");
            entity.Property(e => e.Maxtimebetweenstops).HasColumnName("MAXTIMEBETWEENSTOPS");
            entity.Property(e => e.Maxtimeperroute).HasColumnName("MAXTIMEPERROUTE");
            entity.Property(e => e.Minclustersize).HasColumnName("MINCLUSTERSIZE");
            entity.Property(e => e.Minclustersizeformerge).HasColumnName("MINCLUSTERSIZEFORMERGE");
            entity.Property(e => e.Minpctvolumetosplit)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MINPCTVOLUMETOSPLIT");
            entity.Property(e => e.Minpctweighttosplit)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MINPCTWEIGHTTOSPLIT");
            entity.Property(e => e.Minroutevolume)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MINROUTEVOLUME");
            entity.Property(e => e.Minrouteweight)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MINROUTEWEIGHT");
            entity.Property(e => e.Minservicetime).HasColumnName("MINSERVICETIME");
            entity.Property(e => e.Minvolumetosplit)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MINVOLUMETOSPLIT");
            entity.Property(e => e.Minweighttosplit)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MINWEIGHTTOSPLIT");
            entity.Property(e => e.Numtripsperday).HasColumnName("NUMTRIPSPERDAY");
            entity.Property(e => e.Numvehiclefactor).HasColumnName("NUMVEHICLEFACTOR");
            entity.Property(e => e.Openhoursmisspenalty).HasColumnName("OPENHOURSMISSPENALTY");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Replanclusterremainders).HasColumnName("REPLANCLUSTERREMAINDERS");
            entity.Property(e => e.Routecostequation)
                .HasColumnType("ntext")
                .HasColumnName("ROUTECOSTEQUATION");
            entity.Property(e => e.Routecostfactor).HasColumnName("ROUTECOSTFACTOR");
            entity.Property(e => e.Routefarclustersfirst).HasColumnName("ROUTEFARCLUSTERSFIRST");
            entity.Property(e => e.Routenameprefix)
                .HasMaxLength(10)
                .HasColumnName("ROUTENAMEPREFIX");
            entity.Property(e => e.Servicetimeequation)
                .HasColumnType("ntext")
                .HasColumnName("SERVICETIMEEQUATION");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(20)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Starttimeatdepo).HasColumnName("STARTTIMEATDEPO");
            entity.Property(e => e.Targetfillvolume).HasColumnName("TARGETFILLVOLUME");
            entity.Property(e => e.Targetfillweight).HasColumnName("TARGETFILLWEIGHT");
            entity.Property(e => e.Territoryset)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSET");
            entity.Property(e => e.Vehicleallocationmode)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEALLOCATIONMODE");
        });

        modelBuilder.Entity<Routingstrategyheader>(entity =>
        {
            entity.HasKey(e => e.Strategyid).HasName("PK__ROUTINGS__EE5DCFD670D1021F");

            entity.ToTable("ROUTINGSTRATEGYHEADER");

            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Routingtimeparam>(entity =>
        {
            entity.HasKey(e => e.Numofdays);

            entity.ToTable("ROUTINGTIMEPARAMS");

            entity.Property(e => e.Numofdays)
                .HasDefaultValueSql("((1))")
                .HasColumnName("NUMOFDAYS");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SERVICES");

            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))")
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trip)
                .HasMaxLength(20)
                .HasColumnName("TRIP");
        });

        modelBuilder.Entity<Serviceleveldefinition>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Company, e.Companytype, e.Contactid });

            entity.ToTable("SERVICELEVELDEFINITION");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companycontacttype)
                .HasMaxLength(20)
                .HasColumnName("COMPANYCONTACTTYPE");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(20)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Servicetime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SERVICETIME");
            entity.Property(e => e.Servicetype)
                .HasMaxLength(20)
                .HasColumnName("SERVICETYPE");
        });

        modelBuilder.Entity<Shift>(entity =>
        {
            entity.ToTable("SHIFT");

            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Scheduledendtime).HasColumnName("SCHEDULEDENDTIME");
            entity.Property(e => e.Scheduledstarttime).HasColumnName("SCHEDULEDSTARTTIME");
            entity.Property(e => e.Shiftcode)
                .HasMaxLength(10)
                .HasColumnName("SHIFTCODE");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<Shiftdetail>(entity =>
        {
            entity.HasKey(e => new { e.Shiftcode, e.Shiftday });

            entity.ToTable("SHIFTDETAIL");

            entity.Property(e => e.Shiftcode)
                .HasMaxLength(10)
                .HasColumnName("SHIFTCODE");
            entity.Property(e => e.Shiftday).HasColumnName("SHIFTDAY");
            entity.Property(e => e.Shiftendtime).HasColumnName("SHIFTENDTIME");
            entity.Property(e => e.Shiftstarttime).HasColumnName("SHIFTSTARTTIME");
        });

        modelBuilder.Entity<Shiftmaster>(entity =>
        {
            entity.HasKey(e => e.Shiftcode);

            entity.ToTable("SHIFTMASTER");

            entity.Property(e => e.Shiftcode)
                .HasMaxLength(10)
                .HasColumnName("SHIFTCODE");
            entity.Property(e => e.Shiftdescription)
                .HasMaxLength(20)
                .HasColumnName("SHIFTDESCRIPTION");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<Shiftmastertimeblock>(entity =>
        {
            entity.HasKey(e => new { e.Shiftcode, e.Shiftday, e.Fromtime, e.Totime });

            entity.ToTable("SHIFTMASTERTIMEBLOCKS");

            entity.Property(e => e.Shiftcode)
                .HasMaxLength(10)
                .HasColumnName("SHIFTCODE");
            entity.Property(e => e.Shiftday).HasColumnName("SHIFTDAY");
            entity.Property(e => e.Fromtime).HasColumnName("FROMTIME");
            entity.Property(e => e.Totime).HasColumnName("TOTIME");
            entity.Property(e => e.Accountabletime).HasColumnName("ACCOUNTABLETIME");
            entity.Property(e => e.Timeblocktype)
                .HasMaxLength(10)
                .HasColumnName("TIMEBLOCKTYPE");
        });

        modelBuilder.Entity<Shiftschedule>(entity =>
        {
            entity.HasKey(e => e.Shiftid).HasName("PK__SHIFTSCH__618D70C0A80A22F5");

            entity.ToTable("SHIFTSCHEDULE");

            entity.Property(e => e.Shiftid)
                .ValueGeneratedNever()
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Friend).HasColumnName("FRIEND");
            entity.Property(e => e.Fristart).HasColumnName("FRISTART");
            entity.Property(e => e.Monend).HasColumnName("MONEND");
            entity.Property(e => e.Monstart).HasColumnName("MONSTART");
            entity.Property(e => e.Satend).HasColumnName("SATEND");
            entity.Property(e => e.Satstart).HasColumnName("SATSTART");
            entity.Property(e => e.Sunend).HasColumnName("SUNEND");
            entity.Property(e => e.Sunstart).HasColumnName("SUNSTART");
            entity.Property(e => e.Thuend).HasColumnName("THUEND");
            entity.Property(e => e.Thustart).HasColumnName("THUSTART");
            entity.Property(e => e.Tueend).HasColumnName("TUEEND");
            entity.Property(e => e.Tuestart).HasColumnName("TUESTART");
            entity.Property(e => e.Wenend).HasColumnName("WENEND");
            entity.Property(e => e.Wenstart).HasColumnName("WENSTART");
        });

        modelBuilder.Entity<Shifttaskdelay>(entity =>
        {
            entity.HasKey(e => new { e.Shiftid, e.Task });

            entity.ToTable("SHIFTTASKDELAYS");

            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Time)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TIME");
        });

        modelBuilder.Entity<Shifttimeblock>(entity =>
        {
            entity.HasKey(e => new { e.Shiftid, e.Fromtime, e.Totime });

            entity.ToTable("SHIFTTIMEBLOCKS");

            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Fromtime).HasColumnName("FROMTIME");
            entity.Property(e => e.Totime).HasColumnName("TOTIME");
            entity.Property(e => e.Accountabletime).HasColumnName("ACCOUNTABLETIME");
            entity.Property(e => e.Timeblocktype)
                .HasMaxLength(10)
                .HasColumnName("TIMEBLOCKTYPE");
        });

        modelBuilder.Entity<Shiftuserclock>(entity =>
        {
            entity.HasKey(e => new { e.Shiftid, e.Userid, e.Clockinout, e.Adddate });

            entity.ToTable("SHIFTUSERCLOCKS");

            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Userid)
                .HasMaxLength(10)
                .HasColumnName("USERID");
            entity.Property(e => e.Clockinout).HasColumnName("CLOCKINOUT");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Clocktime)
                .HasColumnType("datetime")
                .HasColumnName("CLOCKTIME");
        });

        modelBuilder.Entity<Shipment>(entity =>
        {
            entity.HasKey(e => e.Shipment1).HasName("PK__SHIPMENT__FC17AAF65D494371");

            entity.ToTable("SHIPMENT");

            entity.Property(e => e.Shipment1)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Bol)
                .HasMaxLength(50)
                .HasColumnName("BOL");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(20)
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Estloadingtime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ESTLOADINGTIME");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Startloadingdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTLOADINGDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Transportreference)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTREFERENCE");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardappointmentid)
                .HasMaxLength(20)
                .HasColumnName("YARDAPPOINTMENTID");
        });

        modelBuilder.Entity<ShipmentAssignOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ShipmentAssignOrders");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Doctype)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DOCTYPE");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Sourcecomapnyname)
                .HasMaxLength(100)
                .HasColumnName("SOURCECOMAPNYNAME");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Sourcecompanytype)
                .HasMaxLength(10)
                .HasColumnName("SOURCECOMPANYTYPE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanyname)
                .HasMaxLength(100)
                .HasColumnName("TARGETCOMPANYNAME");
            entity.Property(e => e.Targetcompanytype)
                .HasMaxLength(10)
                .HasColumnName("TARGETCOMPANYTYPE");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<Shipmentassignment>(entity =>
        {
            entity.HasKey(e => e.Templatename).HasName("PK_SHIPMENTASSIGNMENTPOLICY");

            entity.ToTable("SHIPMENTASSIGNMENT");

            entity.Property(e => e.Templatename)
                .HasMaxLength(20)
                .HasColumnName("TEMPLATENAME");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Fromdoor)
                .HasMaxLength(20)
                .HasColumnName("FROMDOOR");
            entity.Property(e => e.Fromroute)
                .HasMaxLength(20)
                .HasColumnName("FROMROUTE");
            entity.Property(e => e.Maxnumoforders).HasColumnName("MAXNUMOFORDERS");
            entity.Property(e => e.Orderstatus)
                .HasMaxLength(20)
                .HasColumnName("ORDERSTATUS");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(20)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Slassigned).HasColumnName("SLASSIGNED");
            entity.Property(e => e.Todoor)
                .HasMaxLength(20)
                .HasColumnName("TODOOR");
            entity.Property(e => e.Toroute)
                .HasMaxLength(20)
                .HasColumnName("TOROUTE");
            entity.Property(e => e.Transmethod)
                .HasMaxLength(20)
                .HasColumnName("TRANSMETHOD");
        });

        modelBuilder.Entity<Shipmentdetailsview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SHIPMENTDETAILSVIEW");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<Shipmentload>(entity =>
        {
            entity.HasKey(e => new { e.Shipment, e.Loadid });

            entity.ToTable("SHIPMENTLOADS");

            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Shipmentrequirement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SHIPMENTREQUIREMENTS");

            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.RemainQty)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("RemainQTY");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
        });

        modelBuilder.Entity<Shipmentview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SHIPMENTVIEW");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Carriername)
                .HasMaxLength(50)
                .HasColumnName("CARRIERNAME");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Scheddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletypename)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPENAME");
        });

        modelBuilder.Entity<Site>(entity =>
        {
            entity.HasKey(e => e.Siteid).HasName("PK__SITE__A496D1E319128B21");

            entity.ToTable("SITE");

            entity.Property(e => e.Siteid)
                .HasMaxLength(20)
                .HasColumnName("SITEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Sitename)
                .HasMaxLength(50)
                .HasColumnName("SITENAME");
        });

        modelBuilder.Entity<Sku>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Sku1 });

            entity.ToTable("SKU");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Sku1)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Baseitem)
                .HasMaxLength(10)
                .HasColumnName("BASEITEM");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Counttolerance).HasColumnName("COUNTTOLERANCE");
            entity.Property(e => e.Cyclecountint).HasColumnName("CYCLECOUNTINT");
            entity.Property(e => e.Dailydemand)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DAILYDEMAND");
            entity.Property(e => e.Dailypicks)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DAILYPICKS");
            entity.Property(e => e.Defaultrecuom)
                .HasMaxLength(10)
                .HasColumnName("DEFAULTRECUOM");
            entity.Property(e => e.Defaultuom)
                .HasMaxLength(10)
                .HasColumnName("DEFAULTUOM");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fifoindifference).HasColumnName("FIFOINDIFFERENCE");
            entity.Property(e => e.Hazclass)
                .HasMaxLength(20)
                .HasColumnName("HAZCLASS");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Initialstatus)
                .HasMaxLength(10)
                .HasDefaultValueSql("('Available')")
                .HasColumnName("INITIALSTATUS");
            entity.Property(e => e.Inventory)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("INVENTORY");
            entity.Property(e => e.Lastcyclecount)
                .HasColumnType("datetime")
                .HasColumnName("LASTCYCLECOUNT");
            entity.Property(e => e.Lowlimitcount).HasColumnName("LOWLIMITCOUNT");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Newsku)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("NEWSKU");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Onsitemax)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("ONSITEMAX");
            entity.Property(e => e.Onsitemin)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("ONSITEMIN");
            entity.Property(e => e.Oportunityrelpflag).HasColumnName("OPORTUNITYRELPFLAG");
            entity.Property(e => e.Othersku)
                .HasMaxLength(50)
                .HasColumnName("OTHERSKU");
            entity.Property(e => e.Overpickpct)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OVERPICKPCT");
            entity.Property(e => e.Overreceivepct)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OVERRECEIVEPCT");
            entity.Property(e => e.Picksortorder)
                .HasMaxLength(10)
                .HasColumnName("PICKSORTORDER");
            entity.Property(e => e.Picture)
                .HasMaxLength(10)
                .HasColumnName("PICTURE");
            entity.Property(e => e.Preflocation)
                .HasMaxLength(20)
                .HasColumnName("PREFLOCATION");
            entity.Property(e => e.Prefputregion)
                .HasMaxLength(10)
                .HasColumnName("PREFPUTREGION");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Skushortdesc)
                .HasMaxLength(50)
                .HasColumnName("SKUSHORTDESC");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("STATUS");
            entity.Property(e => e.Storageclass)
                .HasMaxLength(20)
                .HasColumnName("STORAGECLASS");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Unitprice).HasColumnName("UNITPRICE");
            entity.Property(e => e.Velocity)
                .HasMaxLength(10)
                .HasDefaultValueSql("('')")
                .HasColumnName("VELOCITY");
            entity.Property(e => e.Vendorsku)
                .HasMaxLength(50)
                .HasColumnName("VENDORSKU");
        });

        modelBuilder.Entity<Skuattribute>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Sku });

            entity.ToTable("SKUATTRIBUTE");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Shelflife).HasColumnName("SHELFLIFE");
            entity.Property(e => e.Shortlifedays).HasColumnName("SHORTLIFEDAYS");
        });

        modelBuilder.Entity<Skuattributelist>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__SKUATTRI__D9C1FA019AEC7515");

            entity.ToTable("SKUATTRIBUTELIST");

            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .HasColumnName("NAME");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .HasColumnName("TYPE");
            entity.Property(e => e.Validator)
                .HasMaxLength(10)
                .HasColumnName("VALIDATOR");
        });

        modelBuilder.Entity<Skubylocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SKUBYLOCATION");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITSONHOLD");
        });

        modelBuilder.Entity<Skucl>(entity =>
        {
            entity.HasKey(e => e.Classname).HasName("PK__SKUCLS__BB442BDCA039BED0");

            entity.ToTable("SKUCLS");

            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Classdescription)
                .HasMaxLength(50)
                .HasColumnName("CLASSDESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Mergevalidationexpression)
                .HasMaxLength(1000)
                .HasColumnName("MERGEVALIDATIONEXPRESSION");
            entity.Property(e => e.Skuattvalidationexpression)
                .HasMaxLength(1000)
                .HasColumnName("SKUATTVALIDATIONEXPRESSION");
        });

        modelBuilder.Entity<Skuclsatt>(entity =>
        {
            entity.HasKey(e => new { e.Classname, e.Attributename }).HasName("PK_SKUCLASSATT");

            entity.ToTable("SKUCLSATT");

            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Attributename)
                .HasMaxLength(20)
                .HasColumnName("ATTRIBUTENAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Skuclsloadatt>(entity =>
        {
            entity.HasKey(e => new { e.Classname, e.Attributename });

            entity.ToTable("SKUCLSLOADATT");

            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Attributename)
                .HasMaxLength(20)
                .HasColumnName("ATTRIBUTENAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Countingcapture)
                .HasMaxLength(20)
                .HasColumnName("COUNTINGCAPTURE");
            entity.Property(e => e.Countingvalidator)
                .HasMaxLength(20)
                .HasColumnName("COUNTINGVALIDATOR");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Pickingcapture)
                .HasMaxLength(10)
                .HasColumnName("PICKINGCAPTURE");
            entity.Property(e => e.Pickingvalidator)
                .HasMaxLength(20)
                .HasColumnName("PICKINGVALIDATOR");
            entity.Property(e => e.Receivingcapture)
                .HasMaxLength(10)
                .HasColumnName("RECEIVINGCAPTURE");
            entity.Property(e => e.Receivingvalidator)
                .HasMaxLength(20)
                .HasColumnName("RECEIVINGVALIDATOR");
            entity.Property(e => e.Verificationcapture)
                .HasMaxLength(20)
                .HasColumnName("VERIFICATIONCAPTURE");
            entity.Property(e => e.Verificationvalidator)
                .HasMaxLength(20)
                .HasColumnName("VERIFICATIONVALIDATOR");
        });

        modelBuilder.Entity<Skuclsloaddetatt>(entity =>
        {
            entity.HasKey(e => new { e.Classname, e.Attributename });

            entity.ToTable("SKUCLSLOADDETATT");

            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Attributename)
                .HasMaxLength(20)
                .HasColumnName("ATTRIBUTENAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Attcapin).HasColumnName("ATTCAPIN");
            entity.Property(e => e.Attcapout).HasColumnName("ATTCAPOUT");
            entity.Property(e => e.Attcapuom)
                .HasMaxLength(10)
                .HasColumnName("ATTCAPUOM");
            entity.Property(e => e.Attributetype)
                .HasMaxLength(10)
                .HasColumnName("ATTRIBUTETYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Skusubstitute>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Sku, e.Substitutesku }).HasName("PK_SUBSTITUTESKU");

            entity.ToTable("SKUSUBSTITUTE");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Substitutesku)
                .HasMaxLength(50)
                .HasColumnName("SUBSTITUTESKU");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Multilevel).HasColumnName("MULTILEVEL");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Skuqty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SKUQTY");
            entity.Property(e => e.Substituteskuqty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SUBSTITUTESKUQTY");
            entity.Property(e => e.Substitutiontype)
                .HasMaxLength(20)
                .HasColumnName("SUBSTITUTIONTYPE");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
        });

        modelBuilder.Entity<Skuuom>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Sku, e.Uom });

            entity.ToTable("SKUUOM");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Casepreparationtype)
                .HasMaxLength(20)
                .HasColumnName("CASEPREPARATIONTYPE");
            entity.Property(e => e.Eachhandlingtype)
                .HasMaxLength(20)
                .HasColumnName("EACHHANDLINGTYPE");
            entity.Property(e => e.Eanupc)
                .HasMaxLength(20)
                .HasColumnName("EANUPC");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Grabtype)
                .HasMaxLength(20)
                .HasColumnName("GRABTYPE");
            entity.Property(e => e.Grossweight)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GROSSWEIGHT");
            entity.Property(e => e.Height)
                .HasDefaultValueSql("((0))")
                .HasColumnName("HEIGHT");
            entity.Property(e => e.Laborgrabtype)
                .HasMaxLength(10)
                .HasColumnName("LABORGRABTYPE");
            entity.Property(e => e.Laborhandlingtype)
                .HasMaxLength(10)
                .HasColumnName("LABORHANDLINGTYPE");
            entity.Property(e => e.Laborpackagetype)
                .HasMaxLength(10)
                .HasColumnName("LABORPACKAGETYPE");
            entity.Property(e => e.Laborpreparationtype)
                .HasMaxLength(10)
                .HasColumnName("LABORPREPARATIONTYPE");
            entity.Property(e => e.Length)
                .HasDefaultValueSql("((0))")
                .HasColumnName("LENGTH");
            entity.Property(e => e.Loweruom)
                .HasMaxLength(10)
                .HasDefaultValueSql("('')")
                .HasColumnName("LOWERUOM");
            entity.Property(e => e.Netweight)
                .HasDefaultValueSql("((0))")
                .HasColumnName("NETWEIGHT");
            entity.Property(e => e.Packagetype)
                .HasMaxLength(20)
                .HasColumnName("PACKAGETYPE");
            entity.Property(e => e.Shippable)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("SHIPPABLE");
            entity.Property(e => e.Unitsperlowestuom)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPERLOWESTUOM");
            entity.Property(e => e.Unitspermeasure)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPERMEASURE");
            entity.Property(e => e.Volume)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VOLUME");
            entity.Property(e => e.Width)
                .HasDefaultValueSql("((0))")
                .HasColumnName("WIDTH");
        });

        modelBuilder.Entity<Skuuomdesc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SKUUOMDESC");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Loweruom)
                .HasMaxLength(10)
                .HasColumnName("LOWERUOM");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<Staginglaneassignment>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Priority });

            entity.ToTable("STAGINGLANEASSIGNMENT");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Fromdoor)
                .HasMaxLength(20)
                .HasColumnName("FROMDOOR");
            entity.Property(e => e.Frompriority).HasColumnName("FROMPRIORITY");
            entity.Property(e => e.Fromroute)
                .HasMaxLength(20)
                .HasColumnName("FROMROUTE");
            entity.Property(e => e.Fromstaginglane)
                .HasMaxLength(20)
                .HasColumnName("FROMSTAGINGLANE");
            entity.Property(e => e.Lastusedsl)
                .HasMaxLength(20)
                .HasColumnName("LASTUSEDSL");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(20)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Staginglaneinterval).HasColumnName("STAGINGLANEINTERVAL");
            entity.Property(e => e.Todoor)
                .HasMaxLength(20)
                .HasColumnName("TODOOR");
            entity.Property(e => e.Topriority).HasColumnName("TOPRIORITY");
            entity.Property(e => e.Toroute)
                .HasMaxLength(20)
                .HasColumnName("TOROUTE");
            entity.Property(e => e.Tostaginglane)
                .HasMaxLength(20)
                .HasColumnName("TOSTAGINGLANE");
            entity.Property(e => e.Transmethod)
                .HasMaxLength(20)
                .HasColumnName("TRANSMETHOD");
        });

        modelBuilder.Entity<StorageBillingBase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("StorageBillingBase");

            entity.Property(e => e.Billingloadid)
                .HasMaxLength(20)
                .HasColumnName("BILLINGLOADID");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("UNITS");
        });

        modelBuilder.Entity<Synonym>(entity =>
        {
            entity.HasKey(e => e.OrgWord).HasName("PK__SYNONYMS__879255C415464C83");

            entity.ToTable("SYNONYMS");

            entity.Property(e => e.OrgWord).HasMaxLength(50);
            entity.Property(e => e.Trans).HasMaxLength(50);
        });

        modelBuilder.Entity<SysUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SYS_USERS");

            entity.Property(e => e.Firstname)
                .HasMaxLength(50)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Lastname)
                .HasMaxLength(50)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<TalkmanGetPick>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Talkman_GetPick");

            entity.Property(e => e.Averageweight).HasColumnName("AVERAGEWEIGHT");
            entity.Property(e => e.Capturelot).HasColumnName("CAPTURELOT");
            entity.Property(e => e.Captureserial).HasColumnName("CAPTURESERIAL");
            entity.Property(e => e.Captureweight).HasColumnName("CAPTUREWEIGHT");
            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Containerseqnum).HasColumnName("CONTAINERSEQNUM");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.LoadId)
                .HasMaxLength(20)
                .HasColumnName("LoadID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.LotLength).HasColumnName("LotLENGTH");
            entity.Property(e => e.LotStartPosition).HasColumnName("LotStartPOSITION");
            entity.Property(e => e.Netweight).HasColumnName("NETWEIGHT");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistid)
                .HasMaxLength(10)
                .HasColumnName("PICKLISTID");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Quantity)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("QUANTITY");
            entity.Property(e => e.Separator)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SerialLength).HasColumnName("SerialLENGTH");
            entity.Property(e => e.SerialStartPosition).HasColumnName("SerialStartPOSITION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(4000)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Tolerance).HasColumnName("TOLERANCE");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Uomtobaseuom).HasColumnName("UOMTOBASEUOM");
            entity.Property(e => e.Upc)
                .HasMaxLength(20)
                .HasColumnName("UPC");
            entity.Property(e => e.Verifyloadid).HasColumnName("VERIFYLOADID");
        });

        modelBuilder.Entity<TalkmanLogin>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Talkman_Login");

            entity.Property(e => e.Hetype)
                .HasMaxLength(20)
                .HasColumnName("HETYPE");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Username)
                .HasMaxLength(20)
                .HasColumnName("USERNAME");
        });

        modelBuilder.Entity<TalkmanPick>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Talkman_Pick");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Adjqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ADJQTY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Pickedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PICKEDQTY");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistid)
                .HasMaxLength(10)
                .HasColumnName("PICKLISTID");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(50)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<TalkmanPickingInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Talkman_PickingInfo");

            entity.Property(e => e.DeliveryLocation).HasMaxLength(20);
            entity.Property(e => e.DeliveryLocationCheckDigits).HasMaxLength(2);
            entity.Property(e => e.GoalTime).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picktype)
                .HasMaxLength(10)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Printcontentlist).HasColumnName("PRINTCONTENTLIST");
            entity.Property(e => e.Printpicklabels).HasColumnName("PRINTPICKLABELS");
            entity.Property(e => e.Printshiplabels).HasColumnName("PRINTSHIPLABELS");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<TalkmanTaskAssignment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Talkman_TaskAssignment");

            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<TalkmanVoiceList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("talkman_VoiceLists");

            entity.Property(e => e.ListCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ListDescription).HasMaxLength(50);
            entity.Property(e => e.ListValue).HasMaxLength(20);
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.Task1).HasName("PK__TASKS__B43FB2189F9EB67A");

            entity.ToTable("TASKS");

            entity.HasIndex(e => e.Picklist, "TaskPicklist");

            entity.HasIndex(e => e.Parallelpicklist, "TasksParPicklist");

            entity.Property(e => e.Task1)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Assigned).HasColumnName("ASSIGNED");
            entity.Property(e => e.Assignedtime)
                .HasColumnType("datetime")
                .HasColumnName("ASSIGNEDTIME");
            entity.Property(e => e.Assignmenttype)
                .HasMaxLength(20)
                .HasColumnName("ASSIGNMENTTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consolidation)
                .HasMaxLength(20)
                .HasColumnName("CONSOLIDATION");
            entity.Property(e => e.Countid)
                .HasMaxLength(20)
                .HasColumnName("COUNTID");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Documentline).HasColumnName("DOCUMENTLINE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Endtime)
                .HasColumnType("datetime")
                .HasColumnName("ENDTIME");
            entity.Property(e => e.Executionlocation)
                .HasMaxLength(20)
                .HasColumnName("EXECUTIONLOCATION");
            entity.Property(e => e.Executiontime).HasColumnName("EXECUTIONTIME");
            entity.Property(e => e.Fromcontainer)
                .HasMaxLength(20)
                .HasColumnName("FROMCONTAINER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Parallelpicklist)
                .HasMaxLength(10)
                .HasColumnName("PARALLELPICKLIST");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Replenishment)
                .HasMaxLength(20)
                .HasColumnName("REPLENISHMENT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Startlocation)
                .HasMaxLength(20)
                .HasColumnName("STARTLOCATION");
            entity.Property(e => e.Starttime)
                .HasColumnType("datetime")
                .HasColumnName("STARTTIME");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stdtime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("STDTIME");
            entity.Property(e => e.Tasksubtype)
                .HasMaxLength(10)
                .HasColumnName("TASKSUBTYPE");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Terminaltype)
                .HasMaxLength(20)
                .HasColumnName("TERMINALTYPE");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Yardmovementid)
                .HasMaxLength(20)
                .HasColumnName("YARDMOVEMENTID");
        });

        modelBuilder.Entity<Taskassignpolicydetail>(entity =>
        {
            entity.HasKey(e => e.Policyline);

            entity.ToTable("TASKASSIGNPOLICYDETAIL");

            entity.Property(e => e.Policyline).HasColumnName("POLICYLINE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Interleaving)
                .HasMaxLength(20)
                .HasColumnName("INTERLEAVING");
            entity.Property(e => e.Policyid)
                .HasMaxLength(20)
                .HasColumnName("POLICYID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Stayinaisle)
                .HasMaxLength(20)
                .HasColumnName("STAYINAISLE");
            entity.Property(e => e.Tasksubtype)
                .HasMaxLength(10)
                .HasColumnName("TASKSUBTYPE");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(20)
                .HasColumnName("TASKTYPE");
        });

        modelBuilder.Entity<Taskassignpolicyheader>(entity =>
        {
            entity.HasKey(e => e.Policyid).HasName("PK__TASKASSI__F2BB7A8184191ED3");

            entity.ToTable("TASKASSIGNPOLICYHEADER");

            entity.Property(e => e.Policyid)
                .HasMaxLength(20)
                .HasColumnName("POLICYID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Policyname)
                .HasMaxLength(50)
                .HasColumnName("POLICYNAME");
        });

        modelBuilder.Entity<Taskpolicyscoring>(entity =>
        {
            entity.HasKey(e => e.Policyid).HasName("PK__TASKPOLI__F2BB7A813C62F7D8");

            entity.ToTable("TASKPOLICYSCORING");

            entity.Property(e => e.Policyid)
                .HasMaxLength(20)
                .HasColumnName("POLICYID");
            entity.Property(e => e.Creationdate)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("CREATIONDATE");
            entity.Property(e => e.Distance)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("DISTANCE");
            entity.Property(e => e.Priority)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("PRIORITY");
        });

        modelBuilder.Entity<Transport>(entity =>
        {
            entity.HasKey(e => e.Transportid).HasName("PK_TRANSPORT_1");

            entity.ToTable("TRANSPORT");

            entity.Property(e => e.Transportid)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTID");
            entity.Property(e => e.Actualendtime)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDTIME");
            entity.Property(e => e.Actualstarttime)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTTIME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Drivetime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DRIVETIME");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromcontactid)
                .HasMaxLength(20)
                .HasColumnName("FROMCONTACTID");
            entity.Property(e => e.Frompointid)
                .HasMaxLength(20)
                .HasColumnName("FROMPOINTID");
            entity.Property(e => e.Loadingtime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("LOADINGTIME");
            entity.Property(e => e.Plannedendtime)
                .HasColumnType("datetime")
                .HasColumnName("PLANNEDENDTIME");
            entity.Property(e => e.Plannedstarttime)
                .HasColumnType("datetime")
                .HasColumnName("PLANNEDSTARTTIME");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tocontactid)
                .HasMaxLength(20)
                .HasColumnName("TOCONTACTID");
            entity.Property(e => e.Topointid)
                .HasMaxLength(20)
                .HasColumnName("TOPOINTID");
            entity.Property(e => e.Transportorderid)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTORDERID");
            entity.Property(e => e.Unloadingtime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("UNLOADINGTIME");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
        });

        modelBuilder.Entity<Transportationorder>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Transportationorderid });

            entity.ToTable("TRANSPORTATIONORDER");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Transportationorderid)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTATIONORDERID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Cargotype)
                .HasMaxLength(20)
                .HasColumnName("CARGOTYPE");
            entity.Property(e => e.Createdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliveryconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYCONFIRMATIONTYPE");
            entity.Property(e => e.Draftcreatedate)
                .HasColumnType("datetime")
                .HasColumnName("DRAFTCREATEDATE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Hazardclass)
                .HasMaxLength(20)
                .HasColumnName("HAZARDCLASS");
            entity.Property(e => e.Hostorderid)
                .HasMaxLength(20)
                .HasColumnName("HOSTORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(20)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Referenceorder)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDER");
            entity.Property(e => e.Requesteddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDELIVERYDATE");
            entity.Property(e => e.Requestedpickupdate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDPICKUPDATE");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Sourcecompanytype)
                .HasMaxLength(20)
                .HasColumnName("SOURCECOMPANYTYPE");
            entity.Property(e => e.Sourcecontactid)
                .HasMaxLength(20)
                .HasColumnName("SOURCECONTACTID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanytype)
                .HasMaxLength(20)
                .HasColumnName("TARGETCOMPANYTYPE");
            entity.Property(e => e.Targetcontactid)
                .HasMaxLength(20)
                .HasColumnName("TARGETCONTACTID");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Transportationtype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTATIONTYPE");
        });

        modelBuilder.Entity<Transshipment>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Transshipment1 });

            entity.ToTable("TRANSSHIPMENT");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Transshipment1)
                .HasMaxLength(20)
                .HasColumnName("TRANSSHIPMENT");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expectedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EXPECTEDQTY");
            entity.Property(e => e.Expectedweight)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EXPECTEDWEIGHT");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Receivedfrom)
                .HasMaxLength(20)
                .HasColumnName("RECEIVEDFROM");
            entity.Property(e => e.Receivedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RECEIVEDQTY");
            entity.Property(e => e.Receiveweight)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RECEIVEWEIGHT");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDELIVERYDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduledarrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDARRIVALDATE");
            entity.Property(e => e.Scheduleddeliverydate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDELIVERYDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Sourcecompanytype)
                .HasMaxLength(10)
                .HasColumnName("SOURCECOMPANYTYPE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanytype)
                .HasMaxLength(10)
                .HasColumnName("TARGETCOMPANYTYPE");
        });

        modelBuilder.Entity<Unroutedorder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UNROUTEDORDERS");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Comments)
                .HasMaxLength(30)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Huqty).HasColumnName("HUQTY");
            entity.Property(e => e.Hutype)
                .HasMaxLength(10)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ORDERVALUE");
            entity.Property(e => e.Schedualeddate)
                .HasMaxLength(30)
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Trip)
                .HasMaxLength(20)
                .HasColumnName("TRIP");
            entity.Property(e => e.Volume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VOLUME");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<Useravailabletask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("USERAVAILABLETASKS");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Assigned).HasColumnName("ASSIGNED");
            entity.Property(e => e.Assignedtime)
                .HasColumnType("datetime")
                .HasColumnName("ASSIGNEDTIME");
            entity.Property(e => e.Assignmenttype)
                .HasMaxLength(20)
                .HasColumnName("ASSIGNMENTTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consolidation)
                .HasMaxLength(20)
                .HasColumnName("CONSOLIDATION");
            entity.Property(e => e.Creationdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATIONDATE");
            entity.Property(e => e.Distance).HasColumnName("DISTANCE");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Documentline).HasColumnName("DOCUMENTLINE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Endtime)
                .HasColumnType("datetime")
                .HasColumnName("ENDTIME");
            entity.Property(e => e.Executiontime).HasColumnName("EXECUTIONTIME");
            entity.Property(e => e.Fromcontainer)
                .HasMaxLength(20)
                .HasColumnName("FROMCONTAINER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Locmhtype)
                .HasMaxLength(10)
                .HasColumnName("LOCMHTYPE");
            entity.Property(e => e.Parallelpicklist)
                .HasMaxLength(10)
                .HasColumnName("PARALLELPICKLIST");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Replenishment)
                .HasMaxLength(20)
                .HasColumnName("REPLENISHMENT");
            entity.Property(e => e.Score).HasColumnName("SCORE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Startlocation)
                .HasMaxLength(20)
                .HasColumnName("STARTLOCATION");
            entity.Property(e => e.Starttime)
                .HasColumnType("datetime")
                .HasColumnName("STARTTIME");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Username)
                .HasMaxLength(20)
                .HasColumnName("USERNAME");
        });

        modelBuilder.Entity<Userskill>(entity =>
        {
            entity.HasKey(e => e.Userid).HasName("PK__USERSKIL__7B9E7F3567A7F054");

            entity.ToTable("USERSKILL");

            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Role)
                .HasMaxLength(20)
                .HasColumnName("ROLE");
            entity.Property(e => e.Skill)
                .HasMaxLength(20)
                .HasColumnName("SKILL");
        });

        modelBuilder.Entity<Usertaskassignment>(entity =>
        {
            entity.HasKey(e => e.Taskid).HasName("PK_TASKASSIGNPOLICY");

            entity.ToTable("USERTASKASSIGNMENT");

            entity.Property(e => e.Taskid).HasColumnName("TASKID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Mobility)
                .HasMaxLength(20)
                .HasColumnName("MOBILITY");
            entity.Property(e => e.Policyid)
                .HasMaxLength(50)
                .HasColumnName("POLICYID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Role)
                .HasMaxLength(20)
                .HasColumnName("ROLE");
            entity.Property(e => e.Skill)
                .HasMaxLength(20)
                .HasColumnName("SKILL");
        });

        modelBuilder.Entity<Userwharea>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Wharea });

            entity.ToTable("USERWHAREA");

            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Wharea)
                .HasMaxLength(10)
                .HasColumnName("WHAREA");
        });

        modelBuilder.Entity<VAdditionalRoutingRequirement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAdditionalRoutingRequirements");

            entity.Property(e => e.Chkpnt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CHKPNT");
            entity.Property(e => e.Chkpntpointid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CHKPNTPOINTID");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.DelType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Depot)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Documenttype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("orderpriority");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue).HasColumnName("ordervalue");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Pdtype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PDTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Strategy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("strategy");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("transportationclass");
        });

        modelBuilder.Entity<VAdjustment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vADJUSTMENT");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Adjustment)
                .HasMaxLength(10)
                .HasColumnName("ADJUSTMENT");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Consigneeref)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEEREF");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Invadjrc)
                .HasMaxLength(10)
                .HasColumnName("INVADJRC");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("statusdesc");
        });

        modelBuilder.Entity<VAllocationOnHand>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAllocationOnHand");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Onhandqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("onhandqty");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasColumnName("SKU");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VAsndetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vASNDetail");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Asnid)
                .HasMaxLength(20)
                .HasColumnName("ASNID");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(50)
                .HasColumnName("LOADID");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Othersku)
                .HasMaxLength(50)
                .HasColumnName("OTHERSKU");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Skushortdesc)
                .HasMaxLength(50)
                .HasColumnName("SKUSHORTDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Vendorsku)
                .HasMaxLength(50)
                .HasColumnName("VENDORSKU");
        });

        modelBuilder.Entity<VAudit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAUDIT");

            entity.Property(e => e.Activitydate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVITYDATE");
            entity.Property(e => e.Activitytime)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ACTIVITYTIME");
            entity.Property(e => e.Activitytype)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITYTYPE");
            entity.Property(e => e.Activitytypedesc)
                .HasMaxLength(50)
                .HasColumnName("ACTIVITYTYPEDESC");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Auditid)
                .HasMaxLength(20)
                .HasColumnName("AUDITID");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Document)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Documentline).HasColumnName("DOCUMENTLINE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(20)
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromcontainer)
                .HasMaxLength(20)
                .HasColumnName("FROMCONTAINER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromloc)
                .HasMaxLength(20)
                .HasColumnName("FROMLOC");
            entity.Property(e => e.Fromqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FROMQTY");
            entity.Property(e => e.Fromstatus)
                .HasMaxLength(20)
                .HasColumnName("FROMSTATUS");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Packageid)
                .HasMaxLength(20)
                .HasColumnName("PACKAGEID");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
            entity.Property(e => e.Terminaltype)
                .HasMaxLength(20)
                .HasColumnName("TERMINALTYPE");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Toloc)
                .HasMaxLength(20)
                .HasColumnName("TOLOC");
            entity.Property(e => e.Toqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TOQTY");
            entity.Property(e => e.Tostatus)
                .HasMaxLength(20)
                .HasColumnName("TOSTATUS");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Yardequipmentid)
                .HasMaxLength(20)
                .HasColumnName("YARDEQUIPMENTID");
        });

        modelBuilder.Entity<VBillingChargesByRunIddetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBillingChargesByRunIDDetail");

            entity.Property(e => e.Agreementline).HasColumnName("AGREEMENTLINE");
            entity.Property(e => e.Agreementname)
                .HasMaxLength(10)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Billfromdate)
                .HasColumnType("datetime")
                .HasColumnName("BILLFROMDATE");
            entity.Property(e => e.Billingrunid)
                .HasMaxLength(10)
                .HasColumnName("BILLINGRUNID");
            entity.Property(e => e.Billtodate)
                .HasColumnType("datetime")
                .HasColumnName("BILLTODATE");
            entity.Property(e => e.Billtotal).HasColumnName("BILLTOTAL");
            entity.Property(e => e.Chargeid)
                .HasMaxLength(10)
                .HasColumnName("CHARGEID");
            entity.Property(e => e.Chargeline).HasColumnName("CHARGELINE");
            entity.Property(e => e.Chargetext)
                .HasMaxLength(255)
                .HasColumnName("CHARGETEXT");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
        });

        modelBuilder.Entity<VBillingChargesByRunIdheader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBillingChargesByRunIDHeader");

            entity.Property(e => e.Agreementname)
                .HasMaxLength(10)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Billfromdate)
                .HasColumnType("datetime")
                .HasColumnName("BILLFROMDATE");
            entity.Property(e => e.Billingrunid)
                .HasMaxLength(10)
                .HasColumnName("BILLINGRUNID");
            entity.Property(e => e.Billtodate)
                .HasColumnType("datetime")
                .HasColumnName("BILLTODATE");
            entity.Property(e => e.Billtotal)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("BILLTOTAL");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Period)
                .HasMaxLength(20)
                .HasColumnName("PERIOD");
            entity.Property(e => e.Periodtype)
                .HasMaxLength(10)
                .HasColumnName("PERIODTYPE");
        });

        modelBuilder.Entity<VBillingChargesPerChargeText>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBillingChargesPerChargeText");

            entity.Property(e => e.Agreementname)
                .HasMaxLength(10)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Billtotal).HasColumnName("BILLTOTAL");
            entity.Property(e => e.Chargetext)
                .HasMaxLength(255)
                .HasColumnName("CHARGETEXT");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VBillingChargesPerClient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBillingChargesPerClient");

            entity.Property(e => e.Billtotal)
                .HasMaxLength(31)
                .HasColumnName("BILLTOTAL");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Rank).HasColumnName("RANK");
        });

        modelBuilder.Entity<VBillingChargesPerTransactionType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBillingChargesPerTransactionType");

            entity.Property(e => e.Agreementname)
                .HasMaxLength(10)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Billtotal).HasColumnName("BILLTOTAL");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trantype)
                .HasMaxLength(20)
                .HasColumnName("TRANTYPE");
            entity.Property(e => e.Trantypedescription)
                .HasMaxLength(100)
                .HasColumnName("TRANTYPEDESCRIPTION");
        });

        modelBuilder.Entity<VBillingChargesPerTransactionTypeSixMonth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBillingChargesPerTransactionTypeSixMonths");

            entity.Property(e => e.Agreementname)
                .HasMaxLength(10)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Billtotal).HasColumnName("BILLTOTAL");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Month)
                .HasMaxLength(34)
                .HasColumnName("MONTH");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trantype)
                .HasMaxLength(20)
                .HasColumnName("TRANTYPE");
            entity.Property(e => e.Trantypedescription)
                .HasMaxLength(100)
                .HasColumnName("TRANTYPEDESCRIPTION");
        });

        modelBuilder.Entity<VBillingLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBillingLoads");

            entity.Property(e => e.Billingloadid)
                .HasMaxLength(20)
                .HasColumnName("BILLINGLOADID");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Currentqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CURRENTQTY");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Shipdate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VBillingagreementdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vBILLINGAGREEMENTDETAIL");

            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Agreementname)
                .HasMaxLength(10)
                .HasColumnName("AGREEMENTNAME");
            entity.Property(e => e.Billbasis)
                .HasMaxLength(10)
                .HasColumnName("BILLBASIS");
            entity.Property(e => e.Chargedescription)
                .HasMaxLength(255)
                .HasColumnName("CHARGEDESCRIPTION");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Handlingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNITTYPE");
            entity.Property(e => e.Isstoragerange).HasColumnName("ISSTORAGERANGE");
            entity.Property(e => e.Lastrundate)
                .HasColumnType("datetime")
                .HasColumnName("LASTRUNDATE");
            entity.Property(e => e.Line).HasColumnName("LINE");
            entity.Property(e => e.Maxperrun)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("MAXPERRUN");
            entity.Property(e => e.Maxpertran)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("MAXPERTRAN");
            entity.Property(e => e.Minperrun)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("MINPERRUN");
            entity.Property(e => e.Minpertran)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("MINPERTRAN");
            entity.Property(e => e.Nextrundate)
                .HasColumnType("datetime")
                .HasColumnName("NEXTRUNDATE");
            entity.Property(e => e.Period)
                .HasMaxLength(20)
                .HasColumnName("PERIOD");
            entity.Property(e => e.Periodtype)
                .HasMaxLength(10)
                .HasColumnName("PERIODTYPE");
            entity.Property(e => e.Pluginid).HasColumnName("PLUGINID");
            entity.Property(e => e.Priceequation)
                .HasMaxLength(20)
                .HasColumnName("PRICEEQUATION");
            entity.Property(e => e.Pricelist)
                .HasMaxLength(20)
                .HasColumnName("PRICELIST");
            entity.Property(e => e.Priceperunit)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PRICEPERUNIT");
            entity.Property(e => e.Runcondition)
                .HasMaxLength(20)
                .HasColumnName("RUNCONDITION");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Storagegracedays).HasColumnName("STORAGEGRACEDAYS");
            entity.Property(e => e.Storagepartialperiod).HasColumnName("STORAGEPARTIALPERIOD");
            entity.Property(e => e.Storageperiodtime)
                .HasMaxLength(20)
                .HasColumnName("STORAGEPERIODTIME");
            entity.Property(e => e.Storageperiodtype)
                .HasMaxLength(20)
                .HasColumnName("STORAGEPERIODTYPE");
            entity.Property(e => e.Trantype)
                .HasMaxLength(20)
                .HasColumnName("TRANTYPE");
            entity.Property(e => e.Trantypedescription)
                .HasMaxLength(100)
                .HasColumnName("TRANTYPEDESCRIPTION");
        });

        modelBuilder.Entity<VCancelLoadReceive>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCancelLoadReceive");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Line).HasColumnName("LINE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Receivedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RECEIVEDQTY");
            entity.Property(e => e.Receivedstatus)
                .HasMaxLength(20)
                .HasColumnName("RECEIVEDSTATUS");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VClusterPointDist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vClusterPointDist");

            entity.Property(e => e.Dist).HasColumnName("dist");
            entity.Property(e => e.P1)
                .HasMaxLength(10)
                .HasColumnName("p1");
            entity.Property(e => e.P2)
                .HasMaxLength(10)
                .HasColumnName("p2");
            entity.Property(e => e.Routingset)
                .HasMaxLength(10)
                .HasColumnName("routingset");
        });

        modelBuilder.Entity<VCompContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCompContact");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Checkpointsite)
                .HasMaxLength(20)
                .HasColumnName("CHECKPOINTSITE");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Contacttype)
                .HasMaxLength(20)
                .HasColumnName("CONTACTTYPE");
            entity.Property(e => e.Deliveryconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYCONFIRMATIONTYPE");
            entity.Property(e => e.Deliverysite)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSITE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fixedservicetime).HasColumnName("FIXEDSERVICETIME");
            entity.Property(e => e.Pickupconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("PICKUPCONFIRMATIONTYPE");
            entity.Property(e => e.Pickupsite)
                .HasMaxLength(20)
                .HasColumnName("PICKUPSITE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VCompany>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCompany");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Defaultcontact)
                .HasMaxLength(20)
                .HasColumnName("DEFAULTCONTACT");
            entity.Property(e => e.Deliverycomments)
                .HasMaxLength(255)
                .HasColumnName("DELIVERYCOMMENTS");
            entity.Property(e => e.Deliverynotelayout)
                .HasMaxLength(50)
                .HasColumnName("DELIVERYNOTELAYOUT");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Mixpicking).HasColumnName("MIXPICKING");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Prefunloadingside)
                .HasMaxLength(10)
                .HasColumnName("PREFUNLOADINGSIDE");
            entity.Property(e => e.Servicetime).HasColumnName("SERVICETIME");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VCompanyContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCompanyContacts");

            entity.Property(e => e.Address)
                .HasMaxLength(153)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.Checkpointsite)
                .HasMaxLength(20)
                .HasColumnName("CHECKPOINTSITE");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Contacttype)
                .HasMaxLength(20)
                .HasColumnName("CONTACTTYPE");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Defaultcontact)
                .HasMaxLength(20)
                .HasColumnName("DEFAULTCONTACT");
            entity.Property(e => e.Deliverycomments)
                .HasMaxLength(255)
                .HasColumnName("DELIVERYCOMMENTS");
            entity.Property(e => e.Deliveryconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYCONFIRMATIONTYPE");
            entity.Property(e => e.Deliverynotelayout)
                .HasMaxLength(50)
                .HasColumnName("DELIVERYNOTELAYOUT");
            entity.Property(e => e.Deliverysite)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSITE");
            entity.Property(e => e.Fixedservicetime).HasColumnName("FIXEDSERVICETIME");
            entity.Property(e => e.Mixpicking).HasColumnName("MIXPICKING");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Pickupconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("PICKUPCONFIRMATIONTYPE");
            entity.Property(e => e.Pickupsite)
                .HasMaxLength(20)
                .HasColumnName("PICKUPSITE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Prefunloadingside)
                .HasMaxLength(10)
                .HasColumnName("PREFUNLOADINGSIDE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Servicetime).HasColumnName("SERVICETIME");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VCompletedPutawayTasksPerPutRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCompletedPutawayTasksPerPutRegion");

            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Executionlocation)
                .HasMaxLength(20)
                .HasColumnName("EXECUTIONLOCATION");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
        });

        modelBuilder.Entity<VCompletedReplTasksPerPickRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCompletedReplTasksPerPickRegion");

            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Executionlocation)
                .HasMaxLength(20)
                .HasColumnName("EXECUTIONLOCATION");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
        });

        modelBuilder.Entity<VConsolidationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vConsolidationDetail");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consolidateid)
                .HasMaxLength(10)
                .HasColumnName("CONSOLIDATEID");
            entity.Property(e => e.Consolidateline).HasColumnName("CONSOLIDATELINE");
            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
        });

        modelBuilder.Entity<VContactbatchmatch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCONTACTBATCHMATCH");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VContactfordistacecalc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCONTACTFORDISTACECALC");

            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
        });

        modelBuilder.Entity<VContainerContent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vContainerContent");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Inhandoff).HasColumnName("INHANDOFF");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Oncontainer)
                .HasMaxLength(20)
                .HasColumnName("ONCONTAINER");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Totalloads).HasColumnName("TOTALLOADS");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(10)
                .HasColumnName("USAGETYPE");
        });

        modelBuilder.Entity<VContainerLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vContainerLoads");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Numloads).HasColumnName("numloads");
            entity.Property(e => e.Oncontainer)
                .HasMaxLength(20)
                .HasColumnName("ONCONTAINER");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(10)
                .HasColumnName("USAGETYPE");
        });

        modelBuilder.Entity<VContainerLoadsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vContainerLoadsDetails");

            entity.Property(e => e.Attserial)
                .HasMaxLength(50)
                .HasColumnName("ATTSERIAL");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VContainerLoadsPlanner>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vContainerLoadsPlanner");

            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Numloads).HasColumnName("numloads");
        });

        modelBuilder.Entity<VCountBook>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCountBook");

            entity.Property(e => e.Closedate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSEDATE");
            entity.Property(e => e.Countbook)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOK");
            entity.Property(e => e.Countbookrunid)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOKRUNID");
            entity.Property(e => e.Counttype)
                .HasMaxLength(20)
                .HasColumnName("COUNTTYPE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasColumnName("NOTE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VCountBookDiscrepancy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCountBookDiscrepancies");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Countbook)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOK");
            entity.Property(e => e.Countbookrunid)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOKRUNID");
            entity.Property(e => e.Countqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COUNTQTY");
            entity.Property(e => e.Expectedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EXPECTEDQTY");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<VCountBookLocationSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCountBookLocationSummary");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Countbook)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOK");
            entity.Property(e => e.Countbookrunid)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOKRUNID");
            entity.Property(e => e.Countqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("COUNTQTY");
            entity.Property(e => e.Expectedqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("EXPECTEDQTY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<VCountBookTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCountBookTasks");

            entity.Property(e => e.Assigned).HasColumnName("ASSIGNED");
            entity.Property(e => e.Assignedtime)
                .HasColumnType("datetime")
                .HasColumnName("ASSIGNEDTIME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Countbook)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOK");
            entity.Property(e => e.Countbookrunid)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOKRUNID");
            entity.Property(e => e.Countid)
                .HasMaxLength(20)
                .HasColumnName("COUNTID");
            entity.Property(e => e.Endtime)
                .HasColumnType("datetime")
                .HasColumnName("ENDTIME");
            entity.Property(e => e.Executiontime).HasColumnName("EXECUTIONTIME");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Starttime)
                .HasColumnType("datetime")
                .HasColumnName("STARTTIME");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<VCountJob>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCountJobs");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Countbook)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOK");
            entity.Property(e => e.Countbookrunid)
                .HasMaxLength(20)
                .HasColumnName("COUNTBOOKRUNID");
            entity.Property(e => e.Countid)
                .HasMaxLength(20)
                .HasColumnName("COUNTID");
            entity.Property(e => e.Counttype)
                .HasMaxLength(20)
                .HasColumnName("COUNTTYPE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<VCurrentUsersPerformance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vCurrentUsersPerformance");

            entity.Property(e => e.DirectTaskPerformance).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.IndirectTaskPerformance).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.ShiftEndDate).HasColumnType("datetime");
            entity.Property(e => e.ShiftStartDate).HasColumnType("datetime");
            entity.Property(e => e.ShiftUserPerformance)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("shiftUserPerformance");
            entity.Property(e => e.Shiftcode)
                .HasMaxLength(10)
                .HasColumnName("shiftcode");
            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("shiftid");
            entity.Property(e => e.Shortenddate)
                .HasMaxLength(15)
                .HasColumnName("shortenddate");
            entity.Property(e => e.Shortstartdate)
                .HasMaxLength(15)
                .HasColumnName("shortstartdate");
            entity.Property(e => e.TaskDelaysTime).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VDashBoardDailyRoute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDashBoardDailyRoutes");

            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
        });

        modelBuilder.Entity<VDashBoardRoute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDashBoardRoutes");

            entity.Property(e => e.Actualarrivaldate)
                .HasMaxLength(5)
                .HasColumnName("ACTUALARRIVALDATE");
            entity.Property(e => e.Address)
                .HasMaxLength(42)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.Caption).HasColumnName("CAPTION");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Image)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("IMAGE");
            entity.Property(e => e.Infowindow)
                .HasMaxLength(496)
                .HasColumnName("INFOWINDOW");
            entity.Property(e => e.Lat).HasColumnName("LAT");
            entity.Property(e => e.Lon).HasColumnName("LON");
            entity.Property(e => e.Numpacks).HasColumnName("NUMPACKS");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(20)
                .HasColumnName("REASONCODE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Shadowimage)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasColumnName("SHADOWIMAGE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stopstatus)
                .HasMaxLength(10)
                .HasColumnName("STOPSTATUS");
            entity.Property(e => e.Tooltip)
                .HasMaxLength(78)
                .HasColumnName("TOOLTIP");
        });

        modelBuilder.Entity<VDashBoardTruck>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDashBoardTrucks");

            entity.Property(e => e.Drivername)
                .HasMaxLength(50)
                .HasColumnName("DRIVERNAME");
            entity.Property(e => e.Image)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Infowindow)
                .HasMaxLength(133)
                .HasColumnName("infowindow");
            entity.Property(e => e.Lat).HasColumnName("lat");
            entity.Property(e => e.Lon).HasColumnName("lon");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Runid).HasColumnName("RUNID");
            entity.Property(e => e.Shadowimage)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("shadowimage");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Tooltip)
                .HasMaxLength(102)
                .HasColumnName("tooltip");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
        });

        modelBuilder.Entity<VDeliveryArrivalStatusPerWeek>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryArrivalStatusPerWeek");

            entity.Property(e => e.Actualarrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALARRIVALDATE");
            entity.Property(e => e.Arrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ARRIVALDATE");
            entity.Property(e => e.Arrivalday)
                .HasColumnType("date")
                .HasColumnName("ARRIVALDAY");
            entity.Property(e => e.Arrivalstatus)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("ARRIVALSTATUS");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
        });

        modelBuilder.Entity<VDeliveryPackageProgressPercent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryPackageProgressPercent");

            entity.Property(e => e.Pprogress).HasColumnName("PProgress");
        });

        modelBuilder.Entity<VDeliveryProgress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryProgress");

            entity.Property(e => e.Routedate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Taskcount).HasColumnName("TASKCOUNT");
        });

        modelBuilder.Entity<VDeliveryProgressPerDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryProgressPerDay");

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("date")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
        });

        modelBuilder.Entity<VDeliveryProgressRouteCompletedStop>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryProgressRouteCompletedStops");

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Stopscount).HasColumnName("STOPSCOUNT");
        });

        modelBuilder.Entity<VDeliveryProgressRoutePackage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryProgressRoutePackages");

            entity.Property(e => e.Routedate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Taskcount).HasColumnName("TASKCOUNT");
        });

        modelBuilder.Entity<VDeliveryProgressRouteStop>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryProgressRouteStops");

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Stopscount).HasColumnName("STOPSCOUNT");
        });

        modelBuilder.Entity<VDeliveryProgressSucccesfulCompletedPerDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryProgressSucccesfulCompletedPerDay");

            entity.Property(e => e.Value)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VDeliveryProgressTotalPerDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryProgressTotalPerDay");

            entity.Property(e => e.Value)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VDeliveryStopProgressPercent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDeliveryStopProgressPercent");

            entity.Property(e => e.Pprogress).HasColumnName("PProgress");
        });

        modelBuilder.Entity<VDisassmbleWorkOrderBom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDisassmbleWorkOrderBom");

            entity.Property(e => e.Batch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Expirydate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("HARVEST");
            entity.Property(e => e.Kosher)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("KOSHER");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Mfgdate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Partqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PARTQTY");
            entity.Property(e => e.Partsku)
                .HasMaxLength(50)
                .HasColumnName("PARTSKU");
            entity.Property(e => e.Serial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SIZE");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Weight)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VDistanceMatrix>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vDistanceMatrix");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Destination)
                .HasMaxLength(50)
                .HasColumnName("DESTINATION");
            entity.Property(e => e.Distance).HasColumnName("DISTANCE");
            entity.Property(e => e.Drivingtime).HasColumnName("DRIVINGTIME");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.RoutingSet).HasMaxLength(20);
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .HasColumnName("SOURCE");
        });

        modelBuilder.Entity<VFlowthroughdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vFLOWTHROUGHDETAIL");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Flowthrough)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGH");
            entity.Property(e => e.Flowthroughline)
                .HasMaxLength(20)
                .HasColumnName("FLOWTHROUGHLINE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(20)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inputuom)
                .HasMaxLength(10)
                .HasColumnName("INPUTUOM");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VGaparam>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGAPARAMS");

            entity.Property(e => e.Civilizations).HasColumnName("CIVILIZATIONS");
            entity.Property(e => e.Generationlimitwithoutprogress).HasColumnName("GENERATIONLIMITWITHOUTPROGRESS");
            entity.Property(e => e.Generations).HasColumnName("GENERATIONS");
            entity.Property(e => e.Gentune).HasColumnName("GENTUNE");
            entity.Property(e => e.Groupsize).HasColumnName("GROUPSIZE");
            entity.Property(e => e.Maxthelastbest).HasColumnName("MAXTHELASTBEST");
            entity.Property(e => e.Numberofgenes).HasColumnName("NUMBEROFGENES");
            entity.Property(e => e.Populationsize).HasColumnName("POPULATIONSIZE");
        });

        modelBuilder.Entity<VHandOff>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vHandOff");

            entity.Property(e => e.Fromhandoffregion)
                .HasMaxLength(4000)
                .HasColumnName("FROMHANDOFFREGION");
            entity.Property(e => e.Handofflocation)
                .HasMaxLength(20)
                .HasColumnName("HANDOFFLOCATION");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Locmhtype)
                .HasMaxLength(10)
                .HasColumnName("LOCMHTYPE");
            entity.Property(e => e.Numloads).HasColumnName("numloads");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Tohandoffregion)
                .HasMaxLength(4000)
                .HasColumnName("TOHANDOFFREGION");
        });

        modelBuilder.Entity<VInboundContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInboundContacts");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Deliveryconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYCONFIRMATIONTYPE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Pickupconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("PICKUPCONFIRMATIONTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VInboundorddetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vINBOUNDORDDETAIL");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(20)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inputuom)
                .HasMaxLength(10)
                .HasColumnName("INPUTUOM");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Lastreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTRECEIPTDATE");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtyadjusted)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYADJUSTED");
            entity.Property(e => e.Qtyordered)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORDERED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VInboundordheader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vINBOUNDORDHEADER");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VInvOnHoldNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInvOnHoldNotification");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Activitystatusdesc)
                .HasMaxLength(50)
                .HasColumnName("ACTIVITYSTATUSDESC");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.TranDate).HasColumnType("datetime");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
        });

        modelBuilder.Entity<VInventoryByConsignee>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInventoryByConsignee");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Autoprintloadlabelrcv).HasColumnName("AUTOPRINTLOADLABELRCV");
            entity.Property(e => e.Billingaccount)
                .HasMaxLength(20)
                .HasColumnName("BILLINGACCOUNT");
            entity.Property(e => e.Billingperformadoc)
                .HasMaxLength(50)
                .HasColumnName("BILLINGPERFORMADOC");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Credit).HasColumnName("CREDIT");
            entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");
            entity.Property(e => e.Cubelimit).HasColumnName("CUBELIMIT");
            entity.Property(e => e.Cyclecounting).HasColumnName("CYCLECOUNTING");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Flowthroughloadlabel)
                .HasMaxLength(50)
                .HasColumnName("FLOWTHROUGHLOADLABEL");
            entity.Property(e => e.Generateloadid).HasColumnName("GENERATELOADID");
            entity.Property(e => e.Loaddetaillbl)
                .HasMaxLength(50)
                .HasColumnName("LOADDETAILLBL");
            entity.Property(e => e.Loadlabel)
                .HasMaxLength(50)
                .HasColumnName("LOADLABEL");
            entity.Property(e => e.Mixshipping).HasColumnName("MIXSHIPPING");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Packinglist)
                .HasMaxLength(50)
                .HasColumnName("PACKINGLIST");
            entity.Property(e => e.Packmultipleorders).HasColumnName("PACKMULTIPLEORDERS");
            entity.Property(e => e.Rcvmanifest)
                .HasMaxLength(50)
                .HasColumnName("RCVMANIFEST");
            entity.Property(e => e.Receivingloc)
                .HasMaxLength(50)
                .HasColumnName("RECEIVINGLOC");
            entity.Property(e => e.Replanplanshort).HasColumnName("REPLANPLANSHORT");
            entity.Property(e => e.Shippartiaload).HasColumnName("SHIPPARTIALOAD");
            entity.Property(e => e.Shippingmanifest)
                .HasMaxLength(50)
                .HasColumnName("SHIPPINGMANIFEST");
            entity.Property(e => e.Shpcartonlbl)
                .HasMaxLength(50)
                .HasColumnName("SHPCARTONLBL");
            entity.Property(e => e.Shpcontainerlbl)
                .HasMaxLength(50)
                .HasColumnName("SHPCONTAINERLBL");
            entity.Property(e => e.Skulabel)
                .HasMaxLength(50)
                .HasColumnName("SKULABEL");
            entity.Property(e => e.Totalloads).HasColumnName("TOTALLOADS");
            entity.Property(e => e.Totalsku).HasColumnName("TOTALSKU");
            entity.Property(e => e.Totalunits)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("TOTALUNITS");
        });

        modelBuilder.Entity<VInventoryByLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vInventoryByLocation");

            entity.Property(e => e.Accessibleloads).HasColumnName("ACCESSIBLELOADS");
            entity.Property(e => e.Accesstype)
                .HasMaxLength(10)
                .HasColumnName("ACCESSTYPE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Congestionregion)
                .HasMaxLength(20)
                .HasColumnName("CONGESTIONREGION");
            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Heightfromfloor).HasColumnName("HEIGHTFROMFLOOR");
            entity.Property(e => e.Hustoragetemplate)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATE");
            entity.Property(e => e.Inhandoff)
                .HasMaxLength(20)
                .HasColumnName("INHANDOFF");
            entity.Property(e => e.Inventory).HasColumnName("INVENTORY");
            entity.Property(e => e.Laborhufacing)
                .HasMaxLength(20)
                .HasColumnName("LABORHUFACING");
            entity.Property(e => e.Laborinserttype)
                .HasMaxLength(20)
                .HasColumnName("LABORINSERTTYPE");
            entity.Property(e => e.Laborpicktype)
                .HasMaxLength(20)
                .HasColumnName("LABORPICKTYPE");
            entity.Property(e => e.Laborreachtype)
                .HasMaxLength(20)
                .HasColumnName("LABORREACHTYPE");
            entity.Property(e => e.Laborretrievetype)
                .HasMaxLength(20)
                .HasColumnName("LABORRETRIEVETYPE");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastmovein)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEIN");
            entity.Property(e => e.Lastmoveout)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEOUT");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Locaccessibility)
                .HasMaxLength(20)
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Locmhtype)
                .HasMaxLength(10)
                .HasColumnName("LOCMHTYPE");
            entity.Property(e => e.Locsortorder)
                .HasMaxLength(20)
                .HasColumnName("LOCSORTORDER");
            entity.Property(e => e.Locstoragetype)
                .HasMaxLength(10)
                .HasColumnName("LOCSTORAGETYPE");
            entity.Property(e => e.Loctpickype)
                .HasMaxLength(10)
                .HasColumnName("LOCTPICKYPE");
            entity.Property(e => e.Locusagetype)
                .HasMaxLength(10)
                .HasColumnName("LOCUSAGETYPE");
            entity.Property(e => e.Looseid).HasColumnName("LOOSEID");
            entity.Property(e => e.Outhandoff)
                .HasMaxLength(20)
                .HasColumnName("OUTHANDOFF");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picksfromlastcount).HasColumnName("PICKSFROMLASTCOUNT");
            entity.Property(e => e.Problemflag).HasColumnName("PROBLEMFLAG");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Totalloads).HasColumnName("TOTALLOADS");
            entity.Property(e => e.Totalsku).HasColumnName("TOTALSKU");
            entity.Property(e => e.Totalunits)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("TOTALUNITS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.Xcoordinate).HasColumnName("XCOORDINATE");
            entity.Property(e => e.Ycoordinate).HasColumnName("YCOORDINATE");
            entity.Property(e => e.Zcoordinate).HasColumnName("ZCOORDINATE");
            entity.Property(e => e.Zpicking)
                .HasMaxLength(20)
                .HasColumnName("ZPICKING");
        });

        modelBuilder.Entity<VInventorytran>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vINVENTORYTRANS");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Cube).HasColumnName("CUBE");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Invtrans)
                .HasMaxLength(10)
                .HasColumnName("INVTRANS");
            entity.Property(e => e.Invtrntype)
                .HasMaxLength(10)
                .HasColumnName("INVTRNTYPE");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Line).HasColumnName("LINE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loadweight).HasColumnName("LOADWEIGHT");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Posttranqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("POSTTRANQTY");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(20)
                .HasColumnName("REASONCODE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("TRANDATE");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VInvloadsku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vINVLOADSKU");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.HandlingUnitType).HasMaxLength(20);
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastcountuser)
                .HasMaxLength(20)
                .HasColumnName("LASTCOUNTUSER");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Lastmoveuser)
                .HasMaxLength(20)
                .HasColumnName("LASTMOVEUSER");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Laststatusrc)
                .HasMaxLength(10)
                .HasColumnName("LASTSTATUSRC");
            entity.Property(e => e.Laststatususer)
                .HasMaxLength(20)
                .HasColumnName("LASTSTATUSUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Loaduomdesc)
                .HasMaxLength(50)
                .HasColumnName("LOADUOMDESC");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Sublocation)
                .HasMaxLength(20)
                .HasColumnName("SUBLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSONHOLD");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
        });

        modelBuilder.Entity<VLaborFromLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLaborFromLocation");

            entity.Property(e => e.FromLocation).HasMaxLength(20);
            entity.Property(e => e.FromLocationAccessType).HasMaxLength(10);
            entity.Property(e => e.FromLocationAisle).HasMaxLength(6);
            entity.Property(e => e.FromLocationHufacing)
                .HasMaxLength(20)
                .HasColumnName("FromLocationHUFacing");
            entity.Property(e => e.FromLocationPickType).HasMaxLength(20);
            entity.Property(e => e.FromLocationReachType).HasMaxLength(20);
            entity.Property(e => e.FromLocationRetrieveType)
                .HasMaxLength(20)
                .HasColumnName("FromLocationREtrieveType");
            entity.Property(e => e.FromlocationInsertType)
                .HasMaxLength(20)
                .HasColumnName("fromlocationInsertType");
        });

        modelBuilder.Entity<VLaborMhe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLaborMHE");

            entity.Property(e => e.HorizontalVariable).HasColumnName("horizontalVariable");
            entity.Property(e => e.HorizontalWeightVariable).HasColumnName("horizontalWeightVariable");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Mhetype)
                .HasMaxLength(20)
                .HasColumnName("MHETYPE");
        });

        modelBuilder.Entity<VLaborSku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLaborSKU");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Scuclass)
                .HasMaxLength(10)
                .HasColumnName("SCUClass");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.SkuhazardClass)
                .HasMaxLength(20)
                .HasColumnName("SKUHazardClass");
            entity.Property(e => e.SkutransportationClass)
                .HasMaxLength(20)
                .HasColumnName("SKUTransportationClass");
        });

        modelBuilder.Entity<VLaborSkuuom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLaborSKUUOM");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Uomcube).HasColumnName("UOMCube");
            entity.Property(e => e.UomgrabType)
                .HasMaxLength(20)
                .HasColumnName("UOMGrabType");
            entity.Property(e => e.UomlaborHandlingType)
                .HasMaxLength(20)
                .HasColumnName("UOMLaborHandlingType");
            entity.Property(e => e.UomlaborPreparationType)
                .HasMaxLength(20)
                .HasColumnName("UOMLAborPreparationType");
            entity.Property(e => e.UompackageType)
                .HasMaxLength(20)
                .HasColumnName("UOMPackageType");
            entity.Property(e => e.Uomweight).HasColumnName("UOMWeight");
        });

        modelBuilder.Entity<VLaborTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLaborTask");

            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.TaskAssigmentLocation).HasMaxLength(20);
            entity.Property(e => e.TaskConsignee).HasMaxLength(20);
            entity.Property(e => e.TaskEndDate).HasColumnType("datetime");
            entity.Property(e => e.TaskFromContainer).HasMaxLength(20);
            entity.Property(e => e.TaskFromLoad).HasMaxLength(20);
            entity.Property(e => e.TaskFromLocation).HasMaxLength(20);
            entity.Property(e => e.TaskMhe)
                .HasMaxLength(20)
                .HasColumnName("TaskMHE");
            entity.Property(e => e.TaskParallelPickList).HasMaxLength(10);
            entity.Property(e => e.TaskPickList).HasMaxLength(10);
            entity.Property(e => e.TaskReplenishment).HasMaxLength(20);
            entity.Property(e => e.TaskSku)
                .HasMaxLength(50)
                .HasColumnName("TaskSKU");
            entity.Property(e => e.TaskStartDate).HasColumnType("datetime");
            entity.Property(e => e.TaskTerminalType).HasMaxLength(20);
            entity.Property(e => e.TaskToContainer).HasMaxLength(20);
            entity.Property(e => e.TaskToLoad).HasMaxLength(20);
            entity.Property(e => e.TaskToLocation).HasMaxLength(20);
            entity.Property(e => e.TaskType).HasMaxLength(10);
            entity.Property(e => e.TaskTypeGenericTime).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaskUser).HasMaxLength(20);
        });

        modelBuilder.Entity<VLaborToLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLaborToLocation");

            entity.Property(e => e.ToLocation).HasMaxLength(20);
            entity.Property(e => e.ToLocationAccessType).HasMaxLength(10);
            entity.Property(e => e.ToLocationAisle).HasMaxLength(6);
            entity.Property(e => e.ToLocationHufacing)
                .HasMaxLength(20)
                .HasColumnName("ToLocationHUFacing");
            entity.Property(e => e.ToLocationInsertType).HasMaxLength(20);
            entity.Property(e => e.ToLocationPickType).HasMaxLength(20);
            entity.Property(e => e.ToLocationReachType).HasMaxLength(20);
            entity.Property(e => e.ToLocationRetrieveType)
                .HasMaxLength(20)
                .HasColumnName("ToLocationREtrieveType");
        });

        modelBuilder.Entity<VLimboAdjustNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLimboAdjustNotification");

            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Cube).HasColumnName("CUBE");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Fromqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FROMQTY");
            entity.Property(e => e.Invtrntype)
                .HasMaxLength(10)
                .HasColumnName("INVTRNTYPE");
            entity.Property(e => e.Line).HasColumnName("LINE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(20)
                .HasColumnName("REASONCODE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Toqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TOQTY");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("TRANDATE");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VLimboSku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLimboSku");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("consignee");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("sku");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("skudesc");
        });

        modelBuilder.Entity<VLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLOADS");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
        });

        modelBuilder.Entity<VLoadCycleCount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadCycleCount");

            entity.Property(e => e.Ccint).HasColumnName("CCINT");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.NumLoadPerRun).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
        });

        modelBuilder.Entity<VLoadCycleCountNumLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadCycleCountNumLoads");

            entity.Property(e => e.Ccint).HasColumnName("CCINT");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneeccint).HasColumnName("CONSIGNEECCINT");
            entity.Property(e => e.NumLoadPerRun).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skuccint).HasColumnName("SKUCCINT");
        });

        modelBuilder.Entity<VLoadExpired>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadExpired");

            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
        });

        modelBuilder.Entity<VLoadPreExpired>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadPreExpired");

            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
        });

        modelBuilder.Entity<VLoadattributesdesk>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLOADATTRIBUTESDESK");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.HandlingUnit).HasMaxLength(20);
            entity.Property(e => e.HandlingUnitType).HasMaxLength(20);
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastcountuser)
                .HasMaxLength(20)
                .HasColumnName("LASTCOUNTUSER");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Lastmoveuser)
                .HasMaxLength(20)
                .HasColumnName("LASTMOVEUSER");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Laststatusrc)
                .HasMaxLength(10)
                .HasColumnName("LASTSTATUSRC");
            entity.Property(e => e.Laststatususer)
                .HasMaxLength(20)
                .HasColumnName("LASTSTATUSUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Loaduomdesc)
                .HasMaxLength(50)
                .HasColumnName("LOADUOMDESC");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Pkey1)
                .HasMaxLength(20)
                .HasColumnName("PKEY1");
            entity.Property(e => e.Pkey2)
                .HasMaxLength(20)
                .HasColumnName("PKEY2");
            entity.Property(e => e.Pkey3)
                .HasMaxLength(20)
                .HasColumnName("PKEY3");
            entity.Property(e => e.Pkeytype)
                .HasMaxLength(10)
                .HasColumnName("PKEYTYPE");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Sublocation)
                .HasMaxLength(20)
                .HasColumnName("SUBLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSONHOLD");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VLoadingContainer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadingContainer");

            entity.Property(e => e.Bol)
                .HasMaxLength(50)
                .HasColumnName("BOL");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Carriername)
                .HasMaxLength(50)
                .HasColumnName("CARRIERNAME");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Picklist)
                .HasMaxLength(20)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Transportreference)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTREFERENCE");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
        });

        modelBuilder.Entity<VLoadingLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadingLoads");

            entity.Property(e => e.Bol)
                .HasMaxLength(50)
                .HasColumnName("BOL");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Carriername)
                .HasMaxLength(50)
                .HasColumnName("CARRIERNAME");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Picklist)
                .HasMaxLength(20)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Transportreference)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTREFERENCE");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
        });

        modelBuilder.Entity<VLoadingNoteAddSku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadingNoteAddSku");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("container");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("skudesc");
            entity.Property(e => e.Units).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<VLoadingNoteContainer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadingNoteContainers");

            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VLoadingNoteCreateContainer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadingNoteCreateContainer");

            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
        });

        modelBuilder.Entity<VLoadsCont>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadsCont");

            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("hutype");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
        });

        modelBuilder.Entity<VLoadsPutaway>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLoadsPutaway");

            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Handlingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNITTYPE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Hazclass)
                .HasMaxLength(20)
                .HasColumnName("HAZCLASS");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Storageclass)
                .HasMaxLength(20)
                .HasColumnName("STORAGECLASS");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VLocationCycleCount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLocationCycleCount");

            entity.Property(e => e.Cyclesdayint).HasColumnName("CYCLESDAYINT");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.NumLocationPerRun).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<VLocationCycleCountNumLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLocationCycleCountNumLocations");

            entity.Property(e => e.Cyclesdayint).HasColumnName("CYCLESDAYINT");
            entity.Property(e => e.NumLocationPerRun).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<VLocationGrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLocationGrid");

            entity.Property(e => e.Accessibleloads).HasColumnName("ACCESSIBLELOADS");
            entity.Property(e => e.Accesstype)
                .HasMaxLength(10)
                .HasColumnName("ACCESSTYPE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Congestionregion)
                .HasMaxLength(20)
                .HasColumnName("CONGESTIONREGION");
            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Heightfromfloor).HasColumnName("HEIGHTFROMFLOOR");
            entity.Property(e => e.Hustoragetemplate)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATE");
            entity.Property(e => e.Inhandoff)
                .HasMaxLength(20)
                .HasColumnName("INHANDOFF");
            entity.Property(e => e.Inventory).HasColumnName("INVENTORY");
            entity.Property(e => e.Laborhufacing)
                .HasMaxLength(20)
                .HasColumnName("LABORHUFACING");
            entity.Property(e => e.Laborinserttype)
                .HasMaxLength(20)
                .HasColumnName("LABORINSERTTYPE");
            entity.Property(e => e.Laborpicktype)
                .HasMaxLength(20)
                .HasColumnName("LABORPICKTYPE");
            entity.Property(e => e.Laborreachtype)
                .HasMaxLength(20)
                .HasColumnName("LABORREACHTYPE");
            entity.Property(e => e.Laborretrievetype)
                .HasMaxLength(20)
                .HasColumnName("LABORRETRIEVETYPE");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastmovein)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEIN");
            entity.Property(e => e.Lastmoveout)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEOUT");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Locaccessibility)
                .HasMaxLength(20)
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Locmhtype)
                .HasMaxLength(10)
                .HasColumnName("LOCMHTYPE");
            entity.Property(e => e.Locmhtypedescription)
                .HasMaxLength(50)
                .HasColumnName("LOCMHTYPEDESCRIPTION");
            entity.Property(e => e.Locsortorder)
                .HasMaxLength(20)
                .HasColumnName("LOCSORTORDER");
            entity.Property(e => e.Locstoragetype)
                .HasMaxLength(10)
                .HasColumnName("LOCSTORAGETYPE");
            entity.Property(e => e.Loctpickype)
                .HasMaxLength(10)
                .HasColumnName("LOCTPICKYPE");
            entity.Property(e => e.Locusagetype)
                .HasMaxLength(10)
                .HasColumnName("LOCUSAGETYPE");
            entity.Property(e => e.Looseid).HasColumnName("LOOSEID");
            entity.Property(e => e.Outhandoff)
                .HasMaxLength(20)
                .HasColumnName("OUTHANDOFF");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picksfromlastcount).HasColumnName("PICKSFROMLASTCOUNT");
            entity.Property(e => e.Problemflag).HasColumnName("PROBLEMFLAG");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.Xcoordinate).HasColumnName("XCOORDINATE");
            entity.Property(e => e.Ycoordinate).HasColumnName("YCOORDINATE");
            entity.Property(e => e.Zcoordinate).HasColumnName("ZCOORDINATE");
            entity.Property(e => e.Zpicking)
                .HasMaxLength(20)
                .HasColumnName("ZPICKING");
        });

        modelBuilder.Entity<VLocationHutypeContent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLocationHUTypeContent");

            entity.Property(e => e.CurrentHuType).HasMaxLength(20);
            entity.Property(e => e.Currentqty).HasColumnName("CURRENTQTY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.PendingHutype)
                .HasMaxLength(20)
                .HasColumnName("PendingHUType");
            entity.Property(e => e.Pendingqty).HasColumnName("PENDINGQTY");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<VLocationOccupancy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLocationOccupancy");

            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.CapacityVolumePct)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CapacityVolumePCT");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.LocationOccupancy)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Locusagetype)
                .HasMaxLength(10)
                .HasColumnName("LOCUSAGETYPE");
            entity.Property(e => e.Pendingunits).HasColumnType("decimal(38, 4)");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.TotalUnits).HasColumnType("decimal(38, 4)");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<VLocationOccupancySummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLocationOccupancySummary");

            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Locationoccupancy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("LOCATIONOCCUPANCY");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<VLocationProblemNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLocationProblemNotification");

            entity.Property(e => e.Accessibleloads).HasColumnName("ACCESSIBLELOADS");
            entity.Property(e => e.Accesstype)
                .HasMaxLength(10)
                .HasColumnName("ACCESSTYPE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Congestionregion)
                .HasMaxLength(20)
                .HasColumnName("CONGESTIONREGION");
            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Heightfromfloor).HasColumnName("HEIGHTFROMFLOOR");
            entity.Property(e => e.Hustoragetemplate)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATE");
            entity.Property(e => e.Inhandoff)
                .HasMaxLength(20)
                .HasColumnName("INHANDOFF");
            entity.Property(e => e.Inventory).HasColumnName("INVENTORY");
            entity.Property(e => e.Laborhufacing)
                .HasMaxLength(20)
                .HasColumnName("LABORHUFACING");
            entity.Property(e => e.Laborinserttype)
                .HasMaxLength(20)
                .HasColumnName("LABORINSERTTYPE");
            entity.Property(e => e.Laborpicktype)
                .HasMaxLength(20)
                .HasColumnName("LABORPICKTYPE");
            entity.Property(e => e.Laborreachtype)
                .HasMaxLength(20)
                .HasColumnName("LABORREACHTYPE");
            entity.Property(e => e.Laborretrievetype)
                .HasMaxLength(20)
                .HasColumnName("LABORRETRIEVETYPE");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastmovein)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEIN");
            entity.Property(e => e.Lastmoveout)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEOUT");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Locaccessibility)
                .HasMaxLength(20)
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Locmhtype)
                .HasMaxLength(10)
                .HasColumnName("LOCMHTYPE");
            entity.Property(e => e.Locsortorder)
                .HasMaxLength(20)
                .HasColumnName("LOCSORTORDER");
            entity.Property(e => e.Locstoragetype)
                .HasMaxLength(10)
                .HasColumnName("LOCSTORAGETYPE");
            entity.Property(e => e.Loctpickype)
                .HasMaxLength(10)
                .HasColumnName("LOCTPICKYPE");
            entity.Property(e => e.Locusagetype)
                .HasMaxLength(10)
                .HasColumnName("LOCUSAGETYPE");
            entity.Property(e => e.Looseid).HasColumnName("LOOSEID");
            entity.Property(e => e.Outhandoff)
                .HasMaxLength(20)
                .HasColumnName("OUTHANDOFF");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picksfromlastcount).HasColumnName("PICKSFROMLASTCOUNT");
            entity.Property(e => e.Problemflag).HasColumnName("PROBLEMFLAG");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.ReasonCode).HasMaxLength(50);
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.Xcoordinate).HasColumnName("XCOORDINATE");
            entity.Property(e => e.Ycoordinate).HasColumnName("YCOORDINATE");
            entity.Property(e => e.Zcoordinate).HasColumnName("ZCOORDINATE");
            entity.Property(e => e.Zpicking)
                .HasMaxLength(20)
                .HasColumnName("ZPICKING");
        });

        modelBuilder.Entity<VMainAvailableTasksByType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMainAvailableTasksByTypes");

            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
        });

        modelBuilder.Entity<VMainEmptyLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMainEmptyLocations");

            entity.Property(e => e.EmptyLocations)
                .HasMaxLength(20)
                .HasColumnName("Empty Locations");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(49)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<VMainInvSt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMainInvSts");

            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Status)
                .HasMaxLength(44)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VMainOutboundStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMainOutboundStatuses");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Hostorderid)
                .HasMaxLength(50)
                .HasColumnName("HOSTORDERID");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(13)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VMainPicksPerHourT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMainPicksPerHourT");

            entity.Property(e => e.Dayhour)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("DAYHOUR");
            entity.Property(e => e.Numpicks).HasColumnName("NUMPICKS");
        });

        modelBuilder.Entity<VMainRecShp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMainRecShp");

            entity.Property(e => e.Invtrans)
                .HasMaxLength(10)
                .HasColumnName("INVTRANS");
            entity.Property(e => e.Invtrntype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("INVTRNTYPE");
        });

        modelBuilder.Entity<VMainTopPicker>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMainTopPickers");

            entity.Property(e => e.Numpicks).HasColumnName("NUMPICKS");
            entity.Property(e => e.Rank).HasColumnName("RANK");
            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VMainWarehouseActivity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMainWarehouseActivity");

            entity.Property(e => e.Activity)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITY");
            entity.Property(e => e.Activityid)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYID");
            entity.Property(e => e.Activitytime)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVITYTIME");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Hetype)
                .HasMaxLength(20)
                .HasColumnName("HETYPE");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Shift)
                .HasMaxLength(10)
                .HasColumnName("SHIFT");
            entity.Property(e => e.Terminaltype)
                .HasMaxLength(20)
                .HasColumnName("TERMINALTYPE");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<VMapTerritory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMapTerritory");

            entity.Property(e => e.Territoryid)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYID");
            entity.Property(e => e.Territoryname)
                .HasMaxLength(50)
                .HasColumnName("TERRITORYNAME");
            entity.Property(e => e.Territorysetid)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSETID");
            entity.Property(e => e.Tooltip)
                .HasMaxLength(96)
                .HasColumnName("tooltip");
        });

        modelBuilder.Entity<VMapterritoryboundary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMAPTERRITORYBOUNDARY");

            entity.Property(e => e.Lat).HasColumnName("lat");
            entity.Property(e => e.Lon).HasColumnName("lon");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Pointnum).HasColumnName("pointnum");
            entity.Property(e => e.Territoryid)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYID");
            entity.Property(e => e.Territorysetid)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSETID");
            entity.Property(e => e.Tooltip)
                .HasMaxLength(73)
                .HasColumnName("tooltip");
        });

        modelBuilder.Entity<VMobileAsndetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileASNDETAIL");

            entity.Property(e => e.Container)
                .HasMaxLength(20)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(20)
                .HasColumnName("USAGETYPE");
        });

        modelBuilder.Entity<VMobileCld1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileCLD1");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Containerid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Hutrans)
                .HasMaxLength(20)
                .HasColumnName("HUTRANS");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Numloads)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NUMLOADS");
            entity.Property(e => e.Printer).HasMaxLength(50);
            entity.Property(e => e.ReasonCode).HasMaxLength(20);
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skucode)
                .HasMaxLength(50)
                .HasColumnName("SKUCODE");
            entity.Property(e => e.Spacer)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VMobileCmx1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileCMX1");

            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Loadid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOADID");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("SPACER");
        });

        modelBuilder.Entity<VMobileCnt2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileCNT2");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("consignee");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("loadid");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("location");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("sku");
            entity.Property(e => e.SkuDesc).HasMaxLength(100);
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Tounits)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOUNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VMobileCntpwcnf>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileCNTPWCNF");

            entity.Property(e => e.Confirm)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ContainerId).HasMaxLength(20);
            entity.Property(e => e.Location).HasMaxLength(20);
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("task");
        });

        modelBuilder.Entity<VMobileCnttask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileCNTtask");

            entity.Property(e => e.Assigned)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ASSIGNED");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Taskid)
                .HasMaxLength(10)
                .HasColumnName("TASKID");
        });

        modelBuilder.Entity<VMobileCnttask0>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileCNTTASK0");

            entity.Property(e => e.Confirm)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONFIRM");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
        });

        modelBuilder.Entity<VMobileCnttask1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileCNTTASK1");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Tounits)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOUNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VMobileCnttaskverfication>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileCNTTASKVERFICATION");

            entity.Property(e => e.CountedUnits)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Uom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VMobileDel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileDEL");

            entity.Property(e => e.Confirm)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONFIRM");
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Handlingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNITTYPE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Note)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Seq).HasColumnName("SEQ");
            entity.Property(e => e.Sku)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("task");
            entity.Property(e => e.Uom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Uomunits)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UOMUNITS");
        });

        modelBuilder.Entity<VMobileEvachu1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileEVACHU1");

            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOLOCATION");
        });

        modelBuilder.Entity<VMobileLoadInq1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileLoadInq1");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VMobileLocconttask2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileLOCCONTTASK2");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Tounits)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOUNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VMobileMov2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileMov2");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("consignee");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("loadid");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("location");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("sku");
            entity.Property(e => e.SkuDesc).HasMaxLength(100);
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Toqty).HasColumnName("TOQTY");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VMobileParpck1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobilePARPCK1");

            entity.Property(e => e.Assigned)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ContainerId)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ContainerType).HasMaxLength(20);
            entity.Property(e => e.InnerHandlingUnitType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Picklist).HasMaxLength(10);
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("task");
        });

        modelBuilder.Entity<VMobilePck>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobilePCK");

            entity.Property(e => e.Assigned)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ContainerId)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ContainerType).HasMaxLength(20);
            entity.Property(e => e.ContainerTypeDesc).HasMaxLength(50);
            entity.Property(e => e.PickMethod).HasMaxLength(10);
            entity.Property(e => e.PickType).HasMaxLength(10);
            entity.Property(e => e.Picklist).HasMaxLength(10);
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("task");
        });

        modelBuilder.Entity<VMobileReceiveById1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileReceiveById1");

            entity.Property(e => e.Asnid)
                .HasMaxLength(20)
                .HasColumnName("asnid");
            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Consignee).HasMaxLength(20);
            entity.Property(e => e.Container)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ContainerId).HasMaxLength(20);
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Loadid).HasMaxLength(50);
            entity.Property(e => e.Location)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Receipt).HasMaxLength(20);
            entity.Property(e => e.Sku).HasMaxLength(50);
            entity.Property(e => e.SkuDesc).HasMaxLength(100);
            entity.Property(e => e.Spacer1)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Spacer2)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Units).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Uomdesc)
                .HasMaxLength(50)
                .HasColumnName("UOMDesc");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(20)
                .HasColumnName("USAGETYPE");
        });

        modelBuilder.Entity<VMobileReceiveById2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileReceiveById2");

            entity.Property(e => e.Asnid)
                .HasMaxLength(20)
                .HasColumnName("asnid");
            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Consignee).HasMaxLength(20);
            entity.Property(e => e.ContainerId).HasMaxLength(20);
            entity.Property(e => e.Loadid).HasMaxLength(50);
            entity.Property(e => e.Location)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Receipt).HasMaxLength(20);
            entity.Property(e => e.Sku).HasMaxLength(50);
            entity.Property(e => e.SkuDesc).HasMaxLength(100);
            entity.Property(e => e.Spacer1)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Spacer2)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Units).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Uomdesc)
                .HasMaxLength(50)
                .HasColumnName("UOMDesc");
        });

        modelBuilder.Entity<VMobileRepl1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileREPL1");

            entity.Property(e => e.Cons)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONS");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Fromloadid)
                .HasMaxLength(20)
                .HasColumnName("FROMLOADID");
            entity.Property(e => e.Item)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ITEM");
            entity.Property(e => e.Loadid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOC");
            entity.Property(e => e.Location)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("task");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VMobileRepl2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileREPL2");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Note)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("task");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Units)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UNITS");
            entity.Property(e => e.Uomunits)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UOMUNITS");
        });

        modelBuilder.Entity<VMobileRpk2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileRPK2");

            entity.Property(e => e.Confirm)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CONFIRM");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Handlingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNITTYPE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Note)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("task");
            entity.Property(e => e.Units)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VMobileShipOrder1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileShipOrder1");

            entity.Property(e => e.Company)
                .HasMaxLength(100)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Spacer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VMobileSkuInq2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileSkuInq2");

            entity.Property(e => e.Classdescription)
                .HasMaxLength(50)
                .HasColumnName("classdescription");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("consignee");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("sku");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("skudesc");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("skugroup");
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Velocity)
                .HasMaxLength(10)
                .HasColumnName("velocity");
        });

        modelBuilder.Entity<VMobileTaskManager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMobileTaskManager");

            entity.Property(e => e.Assigned)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.AssignedTime).HasColumnType("datetime");
            entity.Property(e => e.FromLocation).HasMaxLength(20);
            entity.Property(e => e.Spacer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("spacer");
            entity.Property(e => e.Stdtime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("STDTIME");
            entity.Property(e => e.TaskId).HasMaxLength(10);
            entity.Property(e => e.TaskSubType).HasMaxLength(10);
            entity.Property(e => e.TaskType).HasMaxLength(10);
        });

        modelBuilder.Entity<VOpenPickDetailsPerPickRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOpenPickDetailsPerPickRegion");

            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(50)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VOrderShipNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderShipNotification");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(100)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VOrderShipShortNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrderShipShortNotification");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtydiff)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("QTYDIFF");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(100)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanyid)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANYID");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VOrdersAutomation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrdersAutomation");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
        });

        modelBuilder.Entity<VOrdersAutomationShipmentAssign>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrdersAutomationShipmentAssign");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
        });

        modelBuilder.Entity<VOrdersAutomationWaveAssign>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrdersAutomationWaveAssign");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
        });

        modelBuilder.Entity<VOrdersContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrdersContacts");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VOrdersParam>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOrdersParams");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderlines).HasColumnName("orderlines");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue).HasColumnName("ordervalue");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VOutboundContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOutboundContacts");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Deliveryconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYCONFIRMATIONTYPE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Pickupconfirmationtype)
                .HasMaxLength(20)
                .HasColumnName("PICKUPCONFIRMATIONTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VOutboundOrderAssignToSl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOutboundOrderAssignToSL");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Docid)
                .HasMaxLength(20)
                .HasColumnName("DOCID");
            entity.Property(e => e.Doctype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DOCTYPE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expecteddate)
                .HasColumnType("datetime")
                .HasColumnName("EXPECTEDDATE");
            entity.Property(e => e.Hostorderid)
                .HasMaxLength(50)
                .HasColumnName("HOSTORDERID");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VOutboundOrderHeader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOutboundOrderHeader");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordertypedesc)
                .HasMaxLength(50)
                .HasColumnName("ORDERTYPEDESC");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VOutboundOrderSubstitutionSku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOutboundOrderSubstitutionSKUs");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Level).HasColumnName("LEVEL");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Originalsku)
                .HasMaxLength(255)
                .HasColumnName("ORIGINALSKU");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasColumnName("SKU");
            entity.Property(e => e.Skuabove)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SKUABOVE");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VOutboundOrdersStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOutboundOrdersStatuses");

            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordertypedesc)
                .HasMaxLength(50)
                .HasColumnName("ORDERTYPEDESC");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VOutboundorderLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOutboundorderLoads");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Container)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.PickContainer).HasMaxLength(20);
            entity.Property(e => e.Picklist)
                .HasMaxLength(20)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Toqty).HasColumnName("TOQTY");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Usagetype)
                .HasMaxLength(10)
                .HasColumnName("USAGETYPE");
        });

        modelBuilder.Entity<VOutboundordetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vOUTBOUNDORDETAIL");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Exploadedflag).HasColumnName("EXPLOADEDFLAG");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(20)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtyallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYALLOCATED");
            entity.Property(e => e.Qtyinprocess)
                .HasColumnType("decimal(23, 4)")
                .HasColumnName("QTYINPROCESS");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtynotallocated)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("QTYNOTALLOCATED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypacked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPACKED");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtysoftallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSOFTALLOCATED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Qtyverified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYVERIFIED");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VPackingList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPackingLists");

            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.HandlingUnitType).HasMaxLength(20);
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Loadactivitystatus)
                .HasMaxLength(10)
                .HasColumnName("LOADACTIVITYSTATUS");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loadstatus)
                .HasMaxLength(10)
                .HasColumnName("LOADSTATUS");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Numpackages).HasColumnName("NUMPACKAGES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Packinglistid)
                .HasMaxLength(20)
                .HasColumnName("PACKINGLISTID");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
        });

        modelBuilder.Entity<VPackingListHeader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPackingListHeader");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Companytypedesc)
                .HasMaxLength(50)
                .HasColumnName("COMPANYTYPEDESC");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Numpackages).HasColumnName("NUMPACKAGES");
            entity.Property(e => e.Packinglistid)
                .HasMaxLength(20)
                .HasColumnName("PACKINGLISTID");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VParallelPickingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vParallelPickingDetails");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Adjqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ADJQTY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Parallelpickid)
                .HasMaxLength(10)
                .HasColumnName("parallelpickid");
            entity.Property(e => e.Pickedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PICKEDQTY");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Picklistseq).HasColumnName("picklistseq");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(50)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.PicksSortOrder).HasMaxLength(30);
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VPickLabel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPickLabels");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Companytypedesc)
                .HasMaxLength(50)
                .HasColumnName("companytypedesc");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Containerdesc)
                .HasMaxLength(50)
                .HasColumnName("CONTAINERDESC");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Handelingunittype)
                .HasMaxLength(20)
                .HasColumnName("HANDELINGUNITTYPE");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordertypedesc)
                .HasMaxLength(50)
                .HasColumnName("ordertypedesc");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Parallelpickid)
                .HasMaxLength(10)
                .HasColumnName("PARALLELPICKID");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistseq).HasColumnName("PICKLISTSEQ");
            entity.Property(e => e.Pickmethod)
                .HasMaxLength(10)
                .HasColumnName("PICKMETHOD");
            entity.Property(e => e.Pickmethoddesc)
                .HasMaxLength(50)
                .HasColumnName("pickmethoddesc");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(50)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picktype)
                .HasMaxLength(10)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Picktypedesc)
                .HasMaxLength(50)
                .HasColumnName("picktypedesc");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Scheddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDDATE");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Skushortdesc)
                .HasMaxLength(50)
                .HasColumnName("SKUSHORTDESC");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Strategydesc)
                .HasMaxLength(50)
                .HasColumnName("strategydesc");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Unitprice).HasColumnName("UNITPRICE");
            entity.Property(e => e.Velocity)
                .HasMaxLength(10)
                .HasColumnName("VELOCITY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VPickLoc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPickLoc");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allocatedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ALLOCATEDQTY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Currentqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("CURRENTQTY");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Hotmaxreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTMAXREPLQTY");
            entity.Property(e => e.Hotreplpolicy)
                .HasMaxLength(10)
                .HasColumnName("HOTREPLPOLICY");
            entity.Property(e => e.Hotreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTREPLQTY");
            entity.Property(e => e.Loadallocatedqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("LOADALLOCATEDQTY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Locpicktype)
                .HasMaxLength(10)
                .HasColumnName("LOCPICKTYPE");
            entity.Property(e => e.Locsortorder)
                .HasMaxLength(20)
                .HasColumnName("LOCSORTORDER");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Maximumqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MAXIMUMQTY");
            entity.Property(e => e.Normalreplpolicy)
                .HasMaxLength(10)
                .HasColumnName("NORMALREPLPOLICY");
            entity.Property(e => e.Normalreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("NORMALREPLQTY");
            entity.Property(e => e.Overallocatedqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("OVERALLOCATEDQTY");
            entity.Property(e => e.Pendingqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("PENDINGQTY");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Zpickinglocation)
                .HasMaxLength(20)
                .HasColumnName("ZPICKINGLOCATION");
        });

        modelBuilder.Entity<VPickLocAllocationInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPickLocAllocationInventory");

            entity.Property(e => e.AvailableUnits).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.Consignee).HasMaxLength(20);
            entity.Property(e => e.LoadId).HasMaxLength(20);
            entity.Property(e => e.OrderId).HasMaxLength(20);
            entity.Property(e => e.PickList).HasMaxLength(10);
            entity.Property(e => e.Sku).HasMaxLength(50);
        });

        modelBuilder.Entity<VPickdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPICKDETAIL");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Adjqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ADJQTY");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Pickedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PICKEDQTY");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(50)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picktype)
                .HasMaxLength(10)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VPlannerInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPlannerInventory");

            entity.Property(e => e.Accessibility).HasColumnName("accessibility");
            entity.Property(e => e.Accessibleloads).HasColumnName("accessibleloads");
            entity.Property(e => e.Accesstype)
                .HasMaxLength(10)
                .HasColumnName("accesstype");
            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.HandlingUnit).HasMaxLength(20);
            entity.Property(e => e.HandlingUnitType).HasMaxLength(20);
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.HunumLoads).HasColumnName("HUNumLoads");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loadsvolume).HasColumnName("loadsvolume");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Locaccessibility)
                .HasMaxLength(20)
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Locpicktype)
                .HasMaxLength(10)
                .HasColumnName("LOCPICKTYPE");
            entity.Property(e => e.Locsortorder)
                .HasMaxLength(20)
                .HasColumnName("locsortorder");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("pickregion");
            entity.Property(e => e.Pkey1)
                .HasMaxLength(20)
                .HasColumnName("PKEY1");
            entity.Property(e => e.Pkey2)
                .HasMaxLength(20)
                .HasColumnName("PKEY2");
            entity.Property(e => e.Pkey3)
                .HasMaxLength(20)
                .HasColumnName("PKEY3");
            entity.Property(e => e.Pkeytype)
                .HasMaxLength(10)
                .HasColumnName("PKEYTYPE");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Sublocation)
                .HasMaxLength(20)
                .HasColumnName("SUBLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSONHOLD");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
            entity.Property(e => e.Zpickinglocation)
                .HasMaxLength(20)
                .HasColumnName("ZPICKINGLOCATION");
        });

        modelBuilder.Entity<VProductionOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vProductionOrder");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Bol)
                .HasMaxLength(20)
                .HasColumnName("BOL");
            entity.Property(e => e.Carriercompany)
                .HasMaxLength(50)
                .HasColumnName("CARRIERCOMPANY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Lot)
                .HasMaxLength(50)
                .HasColumnName("LOT");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtyexpected)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYEXPECTED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.ReceivingStatus).HasMaxLength(10);
            entity.Property(e => e.RemainQty).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Startreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTRECEIPTDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VPutAway>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPutAway");

            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Hustoragetemplate)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATE");
            entity.Property(e => e.Inventory).HasColumnName("INVENTORY");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Locaccessibility)
                .HasMaxLength(20)
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Locstoragetype)
                .HasMaxLength(10)
                .HasColumnName("LOCSTORAGETYPE");
            entity.Property(e => e.Looseid).HasColumnName("LOOSEID");
            entity.Property(e => e.Numloads).HasColumnName("numloads");
            entity.Property(e => e.Pendingvolume).HasColumnName("pendingvolume");
            entity.Property(e => e.Pendingweight).HasColumnName("pendingweight");
            entity.Property(e => e.Picklocdist).HasColumnName("PICKLOCDIST");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Score).HasColumnName("SCORE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<VPutAwayBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPutAway_bkp");

            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Hustoragetemplate)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATE");
            entity.Property(e => e.Inventory).HasColumnName("INVENTORY");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Locaccessibility)
                .HasMaxLength(20)
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Locstoragetype)
                .HasMaxLength(10)
                .HasColumnName("LOCSTORAGETYPE");
            entity.Property(e => e.Looseid).HasColumnName("LOOSEID");
            entity.Property(e => e.Numloads).HasColumnName("numloads");
            entity.Property(e => e.Pendingvolume).HasColumnName("pendingvolume");
            entity.Property(e => e.Pendingweight).HasColumnName("pendingweight");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Score).HasColumnName("SCORE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<VPutAwayPvw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPutAwayPVW");

            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Numloads).HasColumnName("numloads");
            entity.Property(e => e.Pendingvolume).HasColumnName("pendingvolume");
            entity.Property(e => e.Pendingweight).HasColumnName("pendingweight");
        });

        modelBuilder.Entity<VPutAwayVw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPutAwayVW");

            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Numloads).HasColumnName("numloads");
            entity.Property(e => e.Volume).HasColumnName("volume");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<VPutawayLocationContent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPutawayLocationContent");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Hustoragetemplate)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATE");
            entity.Property(e => e.Inventory).HasColumnName("INVENTORY");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastcountuser)
                .HasMaxLength(20)
                .HasColumnName("LASTCOUNTUSER");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Lastmoveuser)
                .HasMaxLength(20)
                .HasColumnName("LASTMOVEUSER");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Laststatusrc)
                .HasMaxLength(10)
                .HasColumnName("LASTSTATUSRC");
            entity.Property(e => e.Laststatususer)
                .HasMaxLength(20)
                .HasColumnName("LASTSTATUSUSER");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Loaduomdesc)
                .HasMaxLength(50)
                .HasColumnName("LOADUOMDESC");
            entity.Property(e => e.Locaccessibility)
                .HasMaxLength(20)
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Locstoragetype)
                .HasMaxLength(10)
                .HasColumnName("LOCSTORAGETYPE");
            entity.Property(e => e.Looseid).HasColumnName("LOOSEID");
            entity.Property(e => e.Numloads).HasColumnName("numloads");
            entity.Property(e => e.Pendingvolume).HasColumnName("pendingvolume");
            entity.Property(e => e.Pendingweight).HasColumnName("pendingweight");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Score).HasColumnName("SCORE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Sublocation)
                .HasMaxLength(20)
                .HasColumnName("SUBLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSONHOLD");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<VReceipLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReceipLoads");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Cube).HasColumnName("CUBE");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Invtrans)
                .HasMaxLength(10)
                .HasColumnName("INVTRANS");
            entity.Property(e => e.Invtrntype)
                .HasMaxLength(10)
                .HasColumnName("INVTRNTYPE");
            entity.Property(e => e.Line).HasColumnName("LINE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Posttranqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("POSTTRANQTY");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(20)
                .HasColumnName("REASONCODE");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("TRANDATE");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VReceiptAppointment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReceiptAppointments");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Appointmentid)
                .HasMaxLength(20)
                .HasColumnName("APPOINTMENTID");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Checkindate)
                .HasColumnType("datetime")
                .HasColumnName("CHECKINDATE");
            entity.Property(e => e.Delayreasoncode)
                .HasMaxLength(20)
                .HasColumnName("DELAYREASONCODE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(20)
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.EquipmentStatus).HasMaxLength(20);
            entity.Property(e => e.Equipmentid)
                .HasMaxLength(20)
                .HasColumnName("EQUIPMENTID");
            entity.Property(e => e.EstEndDate).HasColumnType("datetime");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.InpDuration).HasColumnName("inpDuration");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.ScheduleDoor).HasMaxLength(20);
            entity.Property(e => e.ScheduleStatus).HasMaxLength(20);
            entity.Property(e => e.Scheduledate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDATE");
            entity.Property(e => e.Scheduleid)
                .HasMaxLength(20)
                .HasColumnName("SCHEDULEID");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Tagnumber)
                .HasMaxLength(20)
                .HasColumnName("TAGNUMBER");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardlocation)
                .HasMaxLength(20)
                .HasColumnName("YARDLOCATION");
        });

        modelBuilder.Entity<VReceiptDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReceiptDetail");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Inputqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INPUTQTY");
            entity.Property(e => e.Inputsku)
                .HasMaxLength(50)
                .HasColumnName("INPUTSKU");
            entity.Property(e => e.Inputuom)
                .HasMaxLength(10)
                .HasColumnName("INPUTUOM");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtyexpected)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYEXPECTED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Reford)
                .HasMaxLength(20)
                .HasColumnName("REFORD");
            entity.Property(e => e.Refordline)
                .HasMaxLength(20)
                .HasColumnName("REFORDLINE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VReceiptSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReceiptSummary");

            entity.Property(e => e.NumSkus).HasColumnName("NumSKUs");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
        });

        modelBuilder.Entity<VReceivingexception>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRECEIVINGEXCEPTION");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QTY");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(20)
                .HasColumnName("REASONCODE");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline)
                .HasMaxLength(20)
                .HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<VRecieptClosedNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRecieptClosedNotification");

            entity.Property(e => e.Closereceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSERECEIPTDATE");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtydiff)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("QTYDIFF");
            entity.Property(e => e.Qtyexpected)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYEXPECTED");
            entity.Property(e => e.Qtyreceived)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYRECEIVED");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Startreceiptdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTRECEIPTDATE");
        });

        modelBuilder.Entity<VReplanRoute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReplanRoutes");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Feasibility)
                .HasColumnType("ntext")
                .HasColumnName("FEASIBILITY");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Territoryset)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSET");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime).HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.TripGroup).HasMaxLength(20);
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VReplanRunId>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReplanRunID");

            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("routeset");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("runid");
        });

        modelBuilder.Entity<VReplenishment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReplenishment");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Replid)
                .HasMaxLength(10)
                .HasColumnName("REPLID");
            entity.Property(e => e.Replmethod)
                .HasMaxLength(10)
                .HasColumnName("REPLMETHOD");
            entity.Property(e => e.Repltype)
                .HasMaxLength(10)
                .HasColumnName("REPLTYPE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VReplenishmentInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vReplenishmentInventory");

            entity.Property(e => e.Accessibility).HasColumnName("ACCESSIBILITY");
            entity.Property(e => e.Accessibleloads).HasColumnName("ACCESSIBLELOADS");
            entity.Property(e => e.Accesstype)
                .HasMaxLength(10)
                .HasColumnName("ACCESSTYPE");
            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Congestionregion)
                .HasMaxLength(20)
                .HasColumnName("CONGESTIONREGION");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.HandlingUnitType).HasMaxLength(20);
            entity.Property(e => e.Handlingunit)
                .HasMaxLength(20)
                .HasColumnName("HANDLINGUNIT");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Heightfromfloor).HasColumnName("HEIGHTFROMFLOOR");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Hustoragetemplate)
                .HasMaxLength(20)
                .HasColumnName("HUSTORAGETEMPLATE");
            entity.Property(e => e.Inhandoff)
                .HasMaxLength(20)
                .HasColumnName("INHANDOFF");
            entity.Property(e => e.Inventory).HasColumnName("INVENTORY");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Laborhufacing)
                .HasMaxLength(20)
                .HasColumnName("LABORHUFACING");
            entity.Property(e => e.Laborinserttype)
                .HasMaxLength(20)
                .HasColumnName("LABORINSERTTYPE");
            entity.Property(e => e.Laborpicktype)
                .HasMaxLength(20)
                .HasColumnName("LABORPICKTYPE");
            entity.Property(e => e.Laborreachtype)
                .HasMaxLength(20)
                .HasColumnName("LABORREACHTYPE");
            entity.Property(e => e.Laborretrievetype)
                .HasMaxLength(20)
                .HasColumnName("LABORRETRIEVETYPE");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastcountuser)
                .HasMaxLength(20)
                .HasColumnName("LASTCOUNTUSER");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Lastmovein)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEIN");
            entity.Property(e => e.Lastmoveout)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEOUT");
            entity.Property(e => e.Lastmoveuser)
                .HasMaxLength(20)
                .HasColumnName("LASTMOVEUSER");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Laststatusrc)
                .HasMaxLength(10)
                .HasColumnName("LASTSTATUSRC");
            entity.Property(e => e.Laststatususer)
                .HasMaxLength(20)
                .HasColumnName("LASTSTATUSUSER");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loadscapacity).HasColumnName("LOADSCAPACITY");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Loaduomdesc)
                .HasMaxLength(50)
                .HasColumnName("LOADUOMdesc");
            entity.Property(e => e.Locaccessibility)
                .HasMaxLength(20)
                .HasColumnName("LOCACCESSIBILITY");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Locationweight).HasColumnName("LOCATIONWEIGHT");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Locmhtype)
                .HasMaxLength(10)
                .HasColumnName("LOCMHTYPE");
            entity.Property(e => e.Locsortorder)
                .HasMaxLength(20)
                .HasColumnName("LOCSORTORDER");
            entity.Property(e => e.Locstoragetype)
                .HasMaxLength(10)
                .HasColumnName("LOCSTORAGETYPE");
            entity.Property(e => e.Loctpickype)
                .HasMaxLength(10)
                .HasColumnName("LOCTPICKYPE");
            entity.Property(e => e.Locusagetype)
                .HasMaxLength(10)
                .HasColumnName("LOCUSAGETYPE");
            entity.Property(e => e.Looseid).HasColumnName("LOOSEID");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Outhandoff)
                .HasMaxLength(20)
                .HasColumnName("OUTHANDOFF");
            entity.Property(e => e.Pendingcubic).HasColumnName("PENDINGCUBIC");
            entity.Property(e => e.Pendingloads).HasColumnName("PENDINGLOADS");
            entity.Property(e => e.Pendingweight).HasColumnName("PENDINGWEIGHT");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Picksfromlastcount).HasColumnName("PICKSFROMLASTCOUNT");
            entity.Property(e => e.Pkey1)
                .HasMaxLength(20)
                .HasColumnName("PKEY1");
            entity.Property(e => e.Pkey2)
                .HasMaxLength(20)
                .HasColumnName("PKEY2");
            entity.Property(e => e.Pkey3)
                .HasMaxLength(20)
                .HasColumnName("PKEY3");
            entity.Property(e => e.Pkeytype)
                .HasMaxLength(10)
                .HasColumnName("PKEYTYPE");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Problemflag).HasColumnName("PROBLEMFLAG");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Score).HasColumnName("SCORE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.SortColumn).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Sublocation)
                .HasMaxLength(20)
                .HasColumnName("SUBLOCATION");
            entity.Property(e => e.Touom)
                .HasMaxLength(10)
                .HasColumnName("TOUOM");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSONHOLD");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.Xcoordinate).HasColumnName("XCOORDINATE");
            entity.Property(e => e.Ycoordinate).HasColumnName("YCOORDINATE");
            entity.Property(e => e.Zcoordinate).HasColumnName("ZCOORDINATE");
        });

        modelBuilder.Entity<VRoute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutes");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Address).HasMaxLength(152);
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Arrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ARRIVALDATE");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Departuredate)
                .HasColumnType("datetime")
                .HasColumnName("DEPARTUREDATE");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Lat).HasColumnName("LAT");
            entity.Property(e => e.Lon).HasColumnName("LON");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.ServiceTime).HasColumnType("datetime");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopnumber).HasColumnName("stopnumber");
            entity.Property(e => e.Stopstatus)
                .HasMaxLength(20)
                .HasColumnName("stopstatus");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Territoryset)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSET");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime).HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.TripGroup).HasMaxLength(20);
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRouteDepartedNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteDepartedNotification");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Driverfullname)
                .HasMaxLength(50)
                .HasColumnName("DRIVERFULLNAME");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("statusdesc");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Territoryset)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSET");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime).HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.TripGroup).HasMaxLength(20);
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRouteGeneralTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteGeneralTasks");

            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Scheduledate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
            entity.Property(e => e.Taskid)
                .HasMaxLength(20)
                .HasColumnName("TASKID");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(20)
                .HasColumnName("TASKTYPE");
        });

        modelBuilder.Entity<VRouteHeaderView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteHeaderView");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.NumStops).HasColumnName("numStops");
            entity.Property(e => e.NumTasks).HasColumnName("numTasks");
            entity.Property(e => e.Routecost)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Territoryset)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSET");
            entity.Property(e => e.Totaldistance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime).HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRoutePackage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutePackages");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Packageid)
                .HasMaxLength(20)
                .HasColumnName("PACKAGEID");
            entity.Property(e => e.Packagetype)
                .HasMaxLength(20)
                .HasColumnName("PACKAGETYPE");
            entity.Property(e => e.RouteStatus).HasMaxLength(10);
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRouteReturnedNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteReturnedNotification");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Driverfullname)
                .HasMaxLength(50)
                .HasColumnName("DRIVERFULLNAME");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("statusdesc");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Territoryset)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSET");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime).HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.TripGroup).HasMaxLength(20);
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRouteSetDisplay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteSetDisplay");

            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("createdate");
            entity.Property(e => e.RouteSetDisplay).HasMaxLength(41);
            entity.Property(e => e.SetId)
                .HasMaxLength(10)
                .HasColumnName("setId");
        });

        modelBuilder.Entity<VRouteStop>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteStops");

            entity.Property(e => e.Actualarrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALARRIVALDATE");
            entity.Property(e => e.Actualdeparturedate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALDEPARTUREDATE");
            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allowpartialloading).HasColumnName("ALLOWPARTIALLOADING");
            entity.Property(e => e.Allowpartialpickup).HasColumnName("ALLOWPARTIALPICKUP");
            entity.Property(e => e.Allowpartialunloading).HasColumnName("ALLOWPARTIALUNLOADING");
            entity.Property(e => e.Arrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ARRIVALDATE");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Confdocid)
                .HasMaxLength(20)
                .HasColumnName("CONFDOCID");
            entity.Property(e => e.Confirmationlevel)
                .HasMaxLength(20)
                .HasColumnName("CONFIRMATIONLEVEL");
            entity.Property(e => e.Confirmationnumber)
                .HasMaxLength(50)
                .HasColumnName("CONFIRMATIONNUMBER");
            entity.Property(e => e.Confirmationtype)
                .HasMaxLength(20)
                .HasColumnName("CONFIRMATIONTYPE");
            entity.Property(e => e.Confirmpackageatunloading).HasColumnName("CONFIRMPACKAGEATUNLOADING");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Departuredate)
                .HasColumnType("datetime")
                .HasColumnName("DEPARTUREDATE");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Distfromlaststop).HasColumnName("DISTFROMLASTSTOP");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Numpacks).HasColumnName("NUMPACKS");
            entity.Property(e => e.Packtype)
                .HasMaxLength(10)
                .HasColumnName("PACKTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(20)
                .HasColumnName("REASONCODE");
            entity.Property(e => e.Recipient)
                .HasMaxLength(50)
                .HasColumnName("RECIPIENT");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Routestatus)
                .HasMaxLength(10)
                .HasColumnName("ROUTESTATUS");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopdetvalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVALUE");
            entity.Property(e => e.Stopdetvolume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVOLUME");
            entity.Property(e => e.Stopdetweight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETWEIGHT");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
            entity.Property(e => e.Stoptaskname)
                .HasMaxLength(50)
                .HasColumnName("STOPTASKNAME");
            entity.Property(e => e.Stoptasktype)
                .HasMaxLength(20)
                .HasColumnName("STOPTASKTYPE");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Timefromlaststop).HasColumnName("TIMEFROMLASTSTOP");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRouteStopPkgSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteStopPkgSum");

            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("routeid");
        });

        modelBuilder.Entity<VRouteStopTaskGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteStopTaskGroup");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VRouteStopTasksAssign>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteStopTasksAssign");

            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Documentid)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Scheduledate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDATE");
            entity.Property(e => e.Stoptasktype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("STOPTASKTYPE");
        });

        modelBuilder.Entity<VRouteStopsHeader1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteStopsHeader");

            entity.Property(e => e.Actualarrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALARRIVALDATE");
            entity.Property(e => e.Actualdeparturedate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALDEPARTUREDATE");
            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allowpartialloading).HasColumnName("ALLOWPARTIALLOADING");
            entity.Property(e => e.Allowpartialpickup).HasColumnName("ALLOWPARTIALPICKUP");
            entity.Property(e => e.Allowpartialunloading).HasColumnName("ALLOWPARTIALUNLOADING");
            entity.Property(e => e.Arrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ARRIVALDATE");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Confdocid)
                .HasMaxLength(20)
                .HasColumnName("CONFDOCID");
            entity.Property(e => e.Confirmationlevel)
                .HasMaxLength(20)
                .HasColumnName("CONFIRMATIONLEVEL");
            entity.Property(e => e.Confirmationtype)
                .HasMaxLength(20)
                .HasColumnName("CONFIRMATIONTYPE");
            entity.Property(e => e.Confirmpackageatunloading).HasColumnName("CONFIRMPACKAGEATUNLOADING");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Departuredate)
                .HasColumnType("datetime")
                .HasColumnName("DEPARTUREDATE");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Distfromlaststop).HasColumnName("DISTFROMLASTSTOP");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Numpacks).HasColumnName("NUMPACKS");
            entity.Property(e => e.Packtype)
                .HasMaxLength(10)
                .HasColumnName("PACKTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Reasoncode)
                .HasMaxLength(20)
                .HasColumnName("REASONCODE");
            entity.Property(e => e.Recipient)
                .HasMaxLength(50)
                .HasColumnName("RECIPIENT");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Routestatus)
                .HasMaxLength(10)
                .HasColumnName("ROUTESTATUS");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopdetvalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVALUE");
            entity.Property(e => e.Stopdetvolume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVOLUME");
            entity.Property(e => e.Stopdetweight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETWEIGHT");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
            entity.Property(e => e.Stoptaskname)
                .HasMaxLength(50)
                .HasColumnName("STOPTASKNAME");
            entity.Property(e => e.Stoptasktype)
                .HasMaxLength(20)
                .HasColumnName("STOPTASKTYPE");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Timefromlaststop).HasColumnName("TIMEFROMLASTSTOP");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRouteTasksCashReceive>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRouteTasksCashReceive");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Confirmationlevel)
                .HasMaxLength(20)
                .HasColumnName("CONFIRMATIONLEVEL");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fullname)
                .HasMaxLength(50)
                .HasColumnName("FULLNAME");
            entity.Property(e => e.Mst).HasColumnName("MST");
            entity.Property(e => e.Received)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RECEIVED");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
        });

        modelBuilder.Entity<VRoutingAssignOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingAssignOrders");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Deliverycomments)
                .HasMaxLength(255)
                .HasColumnName("DELIVERYCOMMENTS");
            entity.Property(e => e.Deliverystatus)
                .HasMaxLength(20)
                .HasColumnName("DELIVERYSTATUS");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Pod)
                .HasMaxLength(20)
                .HasColumnName("POD");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VRoutingAssignRequirement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingAssignRequirements");

            entity.Property(e => e.Activerunid)
                .HasMaxLength(10)
                .HasColumnName("activerunid");
            entity.Property(e => e.Chkpnt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("chkpnt");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("orderpriority");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue).HasColumnName("ordervalue");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Pdtype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PDTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Stopnumber)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STOPNUMBER");
            entity.Property(e => e.Strategy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("strategy");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("transportationclass");
        });

        modelBuilder.Entity<VRoutingPolicyStartEndPoint>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingPolicyStartEndPoints");

            entity.Property(e => e.Address)
                .HasMaxLength(205)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("NAME");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
        });

        modelBuilder.Entity<VRoutingRequirementActiveRoute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingRequirementActiveRoute");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Fullname)
                .HasMaxLength(50)
                .HasColumnName("FULLNAME");
            entity.Property(e => e.Routed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ROUTED");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Routestatus)
                .HasMaxLength(10)
                .HasColumnName("ROUTESTATUS");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRoutingResource>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingResources");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Numvehicles).HasColumnName("NUMVEHICLES");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRoutingSetAvailableRequirement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingSetAvailableRequirements");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Chkpnt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CHKPNT");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Deltype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DELTYPE");
            entity.Property(e => e.Depot)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DEPOT");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.IsRouted)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue).HasColumnName("ORDERVALUE");
            entity.Property(e => e.Ordervolume).HasColumnName("ORDERVOLUME");
            entity.Property(e => e.Orderweight).HasColumnName("ORDERWEIGHT");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Plantype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PLANTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Requirementid)
                .HasMaxLength(20)
                .HasColumnName("REQUIREMENTID");
            entity.Property(e => e.Requirementtype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("REQUIREMENTTYPE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Strategy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STRATEGY");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VRoutingSetRequirement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingSetRequirements");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Chkpnt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CHKPNT");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Deltype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DELTYPE");
            entity.Property(e => e.Depot)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DEPOT");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.IsRouted)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue).HasColumnName("ORDERVALUE");
            entity.Property(e => e.Ordervolume).HasColumnName("ORDERVOLUME");
            entity.Property(e => e.Orderweight).HasColumnName("ORDERWEIGHT");
            entity.Property(e => e.Othercompany)
                .HasMaxLength(50)
                .HasColumnName("OTHERCOMPANY");
            entity.Property(e => e.Plantype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PLANTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Requirementid)
                .HasMaxLength(20)
                .HasColumnName("REQUIREMENTID");
            entity.Property(e => e.Requirementtype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("REQUIREMENTTYPE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Strategy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STRATEGY");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VRoutingVehicleAvailability>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingVehicleAvailability");

            entity.Property(e => e.AvailableFromTime).HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("date");
            entity.Property(e => e.Numvehicles).HasColumnName("NUMVEHICLES");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRoutingplanstrategy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vROUTINGPLANSTRATEGY");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("carrier");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(4000)
                .HasColumnName("companygroup");
            entity.Property(e => e.Companytype)
                .HasMaxLength(4000)
                .HasColumnName("companytype");
            entity.Property(e => e.Consignee)
                .HasMaxLength(4000)
                .HasColumnName("consignee");
            entity.Property(e => e.Fromordervalue).HasColumnName("fromordervalue");
            entity.Property(e => e.Fromordervolume).HasColumnName("fromordervolume");
            entity.Property(e => e.Fromorderweight).HasColumnName("fromorderweight");
            entity.Property(e => e.Orderpriority).HasColumnName("orderpriority");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(4000)
                .HasColumnName("ordertype");
            entity.Property(e => e.Policyid)
                .HasMaxLength(20)
                .HasColumnName("policyid");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Route)
                .HasMaxLength(4000)
                .HasColumnName("route");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("strategyid");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(4000)
                .HasColumnName("targetcompany");
            entity.Property(e => e.Unloadingtype)
                .HasMaxLength(20)
                .HasColumnName("unloadingtype");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("vehicletype");
        });

        modelBuilder.Entity<VRoutingpolicyvehicleallocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vROUTINGPOLICYVEHICLEALLOCATION");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allocatedvehicles).HasColumnName("ALLOCATEDVEHICLES");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Numvehicles).HasColumnName("NUMVEHICLES");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("strategyid");
            entity.Property(e => e.Totalvehicles).HasColumnName("TOTALVEHICLES");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRoutingpolicyvehicleallocationbase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vROUTINGPOLICYVEHICLEALLOCATIONBase");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Numvehicles).HasColumnName("NUMVEHICLES");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VRoutingrequirementsplaceUnrouted>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vROUTINGREQUIREMENTSPlaceUnrouted");

            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Pdtype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PDTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.ReqId)
                .HasMaxLength(20)
                .HasColumnName("ReqID");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("runid");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTATIONCLASS");
        });

        modelBuilder.Entity<VRoutingset>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingset");

            entity.Property(e => e.Activerunid)
                .HasMaxLength(10)
                .HasColumnName("ACTIVERUNID");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Distributiondate)
                .HasColumnType("datetime")
                .HasColumnName("DISTRIBUTIONDATE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Notpointed).HasColumnName("NOTPOINTED");
            entity.Property(e => e.Numoforders).HasColumnName("numoforders");
            entity.Property(e => e.Plandate)
                .HasColumnType("datetime")
                .HasColumnName("PLANDATE");
            entity.Property(e => e.Setid)
                .HasMaxLength(10)
                .HasColumnName("SETID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Trip)
                .HasMaxLength(20)
                .HasColumnName("TRIP");
        });

        modelBuilder.Entity<VRoutingsetUnassignedRequirement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingsetUnassignedRequirements");

            entity.Property(e => e.Activerunid)
                .HasMaxLength(10)
                .HasColumnName("ACTIVERUNID");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Unassigned).HasColumnName("UNASSIGNED");
        });

        modelBuilder.Entity<VRoutingsetUnassignedRequirements1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoutingsetUnassignedRequirements1");

            entity.Property(e => e.Activerunid)
                .HasMaxLength(10)
                .HasColumnName("ACTIVERUNID");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Unassigned).HasColumnName("UNASSIGNED");
        });

        modelBuilder.Entity<VSchedulerYardAppointment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSchedulerYardAppointments");

            entity.Property(e => e.Appointmentid)
                .HasMaxLength(20)
                .HasColumnName("APPOINTMENTID");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Reqid)
                .HasMaxLength(30)
                .HasColumnName("REQID");
            entity.Property(e => e.Scheduleid)
                .HasMaxLength(20)
                .HasColumnName("SCHEDULEID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Subject).HasMaxLength(472);
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
            entity.Property(e => e.YardLocation).HasMaxLength(20);
        });

        modelBuilder.Entity<VSerialManifest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSerialManifest");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Invoice)
                .HasMaxLength(42)
                .HasColumnName("INVOICE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<VShift>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSHIFT");

            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Scheduledendtime).HasColumnName("SCHEDULEDENDTIME");
            entity.Property(e => e.Scheduledstarttime).HasColumnName("SCHEDULEDSTARTTIME");
            entity.Property(e => e.Shiftcode)
                .HasMaxLength(10)
                .HasColumnName("SHIFTCODE");
            entity.Property(e => e.Shiftdescription)
                .HasMaxLength(20)
                .HasColumnName("SHIFTDESCRIPTION");
            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<VShiftCurrentPerformance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShiftCurrentPerformance");

            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.ShiftPerformance)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("shiftPerformance");
            entity.Property(e => e.Shiftcode)
                .HasMaxLength(10)
                .HasColumnName("shiftcode");
            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("shiftid");
            entity.Property(e => e.Shortenddate)
                .HasMaxLength(15)
                .HasColumnName("shortenddate");
            entity.Property(e => e.Shortstartdate)
                .HasMaxLength(15)
                .HasColumnName("shortstartdate");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.TaskDelaysTime).HasColumnType("decimal(38, 2)");
        });

        modelBuilder.Entity<VShiftPerformance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShiftPerformance");

            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.ShiftDescription).HasMaxLength(20);
            entity.Property(e => e.ShiftPerformance)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("shiftPerformance");
            entity.Property(e => e.Shiftcode)
                .HasMaxLength(10)
                .HasColumnName("shiftcode");
            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("shiftid");
            entity.Property(e => e.Shortenddate)
                .HasMaxLength(15)
                .HasColumnName("shortenddate");
            entity.Property(e => e.Shortstartdate)
                .HasMaxLength(15)
                .HasColumnName("shortstartdate");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.TaskDelaysTime).HasColumnType("decimal(38, 2)");
        });

        modelBuilder.Entity<VShiftPerformanceSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShiftPerformanceSummary");

            entity.Property(e => e.Actualtime).HasColumnName("ACTUALTIME");
            entity.Property(e => e.Avgstandarttime).HasColumnName("AVGSTANDARTTIME");
            entity.Property(e => e.Duration).HasColumnName("DURATION");
            entity.Property(e => e.Shiftdate)
                .HasColumnType("date")
                .HasColumnName("SHIFTDATE");
            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Standarttime).HasColumnName("STANDARTTIME");
            entity.Property(e => e.Users).HasColumnName("USERS");
        });

        modelBuilder.Entity<VShiftTaskPerformance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShiftTaskPerformance");

            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.IdleStarttime).HasColumnName("idleSTARTTIME");
            entity.Property(e => e.Indirectflag).HasColumnName("INDIRECTFLAG");
            entity.Property(e => e.ShiftCode).HasMaxLength(10);
            entity.Property(e => e.ShiftId)
                .HasMaxLength(10)
                .HasColumnName("ShiftID");
            entity.Property(e => e.ShiftPerformance)
                .HasColumnType("decimal(35, 13)")
                .HasColumnName("shiftPerformance");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.TaskDelaysTime).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaskId)
                .HasMaxLength(20)
                .HasColumnName("TaskID");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(20)
                .HasColumnName("tasktype");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VShiftUsersPerformance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShiftUsersPerformance");

            entity.Property(e => e.DirectTaskPerformance).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.IndirectTaskPerformance).HasColumnType("decimal(38, 13)");
            entity.Property(e => e.ShiftDescription).HasMaxLength(20);
            entity.Property(e => e.ShiftEndDate).HasColumnType("datetime");
            entity.Property(e => e.ShiftStartDate).HasColumnType("datetime");
            entity.Property(e => e.ShiftUserPerformance)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("shiftUserPerformance");
            entity.Property(e => e.Shiftcode)
                .HasMaxLength(10)
                .HasColumnName("shiftcode");
            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("shiftid");
            entity.Property(e => e.Shortenddate)
                .HasMaxLength(15)
                .HasColumnName("shortenddate");
            entity.Property(e => e.Shortstartdate)
                .HasMaxLength(15)
                .HasColumnName("shortstartdate");
            entity.Property(e => e.TaskDelaysTime).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VShipingManifestDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShipingManifestDetail");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Doctype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DOCTYPE");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(10)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Invstatdesc)
                .HasMaxLength(50)
                .HasColumnName("INVSTATDESC");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtyallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYALLOCATED");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
        });

        modelBuilder.Entity<VShipingManifestHeader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShipingManifestHeader");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Doctype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DOCTYPE");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VShipment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShipment");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Bol)
                .HasMaxLength(50)
                .HasColumnName("BOL");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Carriername)
                .HasMaxLength(50)
                .HasColumnName("CARRIERNAME");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(20)
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Scheddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDDATE");
            entity.Property(e => e.Scheduledate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDATE");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Startloadingdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTLOADINGDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Transportreference)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTREFERENCE");
            entity.Property(e => e.Transporttype)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTTYPE");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.YardAppointmentId).HasMaxLength(20);
        });

        modelBuilder.Entity<VShipmentAppointment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShipmentAppointments");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Appointmentid)
                .HasMaxLength(20)
                .HasColumnName("APPOINTMENTID");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Checkindate)
                .HasColumnType("datetime")
                .HasColumnName("CHECKINDATE");
            entity.Property(e => e.Delayreasoncode)
                .HasMaxLength(20)
                .HasColumnName("DELAYREASONCODE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(20)
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.EquipmentStatus).HasMaxLength(20);
            entity.Property(e => e.Equipmentid)
                .HasMaxLength(20)
                .HasColumnName("EQUIPMENTID");
            entity.Property(e => e.EstEndDate).HasColumnType("datetime");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.InpDuration).HasColumnName("inpDuration");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.ScheduleDoor).HasMaxLength(20);
            entity.Property(e => e.ScheduleStatus).HasMaxLength(20);
            entity.Property(e => e.Scheduledate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDATE");
            entity.Property(e => e.Scheduleid)
                .HasMaxLength(20)
                .HasColumnName("SCHEDULEID");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Tagnumber)
                .HasMaxLength(20)
                .HasColumnName("TAGNUMBER");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardlocation)
                .HasMaxLength(20)
                .HasColumnName("YARDLOCATION");
        });

        modelBuilder.Entity<VShipmentLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShipmentLoads");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
        });

        modelBuilder.Entity<VShipmentShippedNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShipmentShippedNotification");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Qtydiff)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("QTYDIFF");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippedon)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDON");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(100)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VShipmentSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShipmentSummary");

            entity.Property(e => e.NumSkus).HasColumnName("NumSKUs");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
        });

        modelBuilder.Entity<VShipmentUnloadingLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShipmentUnloadingLoads");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
        });

        modelBuilder.Entity<VShipmentassignment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSHIPMENTASSIGNMENT");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("company");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Fromdoor)
                .HasMaxLength(20)
                .HasColumnName("FROMDOOR");
            entity.Property(e => e.Fromroute)
                .HasMaxLength(20)
                .HasColumnName("FROMROUTE");
            entity.Property(e => e.Maxnumoforders).HasColumnName("MAXNUMOFORDERS");
            entity.Property(e => e.Orderstatus)
                .HasMaxLength(20)
                .HasColumnName("ORDERSTATUS");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(20)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Slassigned).HasColumnName("SLASSIGNED");
            entity.Property(e => e.Templatename)
                .HasMaxLength(20)
                .HasColumnName("TEMPLATENAME");
            entity.Property(e => e.Todoor)
                .HasMaxLength(20)
                .HasColumnName("TODOOR");
            entity.Property(e => e.Toroute)
                .HasMaxLength(20)
                .HasColumnName("TOROUTE");
            entity.Property(e => e.Transmethod)
                .HasMaxLength(20)
                .HasColumnName("TRANSMETHOD");
        });

        modelBuilder.Entity<VShippedFutureOutbound>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShippedFutureOutbound");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Date)
                .HasColumnType("date")
                .HasColumnName("DATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Status)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VShippedOutboundOrdersWeekly>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShippedOutboundOrdersWeekly");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Date)
                .HasColumnType("date")
                .HasColumnName("DATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Status)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VShippedOutboundWeekly>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShippedOutboundWeekly");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Date)
                .HasColumnType("date")
                .HasColumnName("DATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Status)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VShowCompContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShowCompContact");

            entity.Property(e => e.Address)
                .HasMaxLength(154)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(20)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Infowindow)
                .HasMaxLength(536)
                .HasColumnName("infowindow");
            entity.Property(e => e.Lat).HasColumnName("LAT");
            entity.Property(e => e.Lon).HasColumnName("LON");
            entity.Property(e => e.Pinned).HasColumnName("PINNED");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Tooltip)
                .HasMaxLength(337)
                .HasColumnName("tooltip");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<VShowRoute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShowRoutes");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Distround)
                .HasMaxLength(20)
                .HasColumnName("DISTROUND");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Routecost)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Territoryset)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSET");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.TripGroup).HasMaxLength(20);
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
            entity.Property(e => e.Vehiclevolume)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VEHICLEVOLUME");
            entity.Property(e => e.Vehicleweight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VEHICLEWEIGHT");
        });

        modelBuilder.Entity<VShowRouteInfoDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShowRouteInfoDetail");

            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Function1)
                .HasMaxLength(126)
                .HasColumnName("function1");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VShowRouteStatistic>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShowRouteStatistic");

            entity.Property(e => e.Distributiondate)
                .HasColumnType("datetime")
                .HasColumnName("DISTRIBUTIONDATE");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Plandate)
                .HasColumnType("datetime")
                .HasColumnName("PLANDATE");
            entity.Property(e => e.RouteSetStatus).HasMaxLength(10);
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
        });

        modelBuilder.Entity<VShowRoutingSet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShowRoutingSet");

            entity.Property(e => e.Activerunid)
                .HasMaxLength(10)
                .HasColumnName("ACTIVERUNID");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Currentindex).HasColumnName("CURRENTINDEX");
            entity.Property(e => e.Distributiondate)
                .HasColumnType("datetime")
                .HasColumnName("DISTRIBUTIONDATE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Plandate)
                .HasColumnType("datetime")
                .HasColumnName("PLANDATE");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Setid)
                .HasMaxLength(10)
                .HasColumnName("SETID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime).HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.Trip)
                .HasMaxLength(20)
                .HasColumnName("TRIP");
        });

        modelBuilder.Entity<VShowUnrouted>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShowUnrouted");

            entity.Property(e => e.Address).HasMaxLength(153);
            entity.Property(e => e.CloseHour)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Image)
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.Infowindow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("infowindow");
            entity.Property(e => e.Lat).HasColumnName("lat");
            entity.Property(e => e.Lon).HasColumnName("lon");
            entity.Property(e => e.OpenHour)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordervolume).HasColumnName("ORDERVOLUME");
            entity.Property(e => e.Orderweight).HasColumnName("ORDERWEIGHT");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("pointid");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("runid");
            entity.Property(e => e.ShadowImage)
                .HasMaxLength(19)
                .IsUnicode(false);
            entity.Property(e => e.Tooltip)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tooltip");
        });

        modelBuilder.Entity<VShowVehiclePosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vShowVehiclePosition");

            entity.Property(e => e.Infowindow)
                .HasMaxLength(177)
                .HasColumnName("infowindow");
            entity.Property(e => e.Latitude).HasColumnName("LATITUDE");
            entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
            entity.Property(e => e.Runid).HasColumnName("RUNID");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Tooltip)
                .HasMaxLength(32)
                .HasColumnName("tooltip");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
        });

        modelBuilder.Entity<VSku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSKU");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Baseitem)
                .HasMaxLength(10)
                .HasColumnName("BASEITEM");
            entity.Property(e => e.Classname)
                .HasMaxLength(10)
                .HasColumnName("CLASSNAME");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Counttolerance).HasColumnName("COUNTTOLERANCE");
            entity.Property(e => e.Cyclecountint).HasColumnName("CYCLECOUNTINT");
            entity.Property(e => e.Dailydemand)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DAILYDEMAND");
            entity.Property(e => e.Dailypicks)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DAILYPICKS");
            entity.Property(e => e.Defaultrecuom)
                .HasMaxLength(10)
                .HasColumnName("DEFAULTRECUOM");
            entity.Property(e => e.Defaultuom)
                .HasMaxLength(10)
                .HasColumnName("DEFAULTUOM");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fifoindifference).HasColumnName("FIFOINDIFFERENCE");
            entity.Property(e => e.Hazclass)
                .HasMaxLength(20)
                .HasColumnName("HAZCLASS");
            entity.Property(e => e.Hutype)
                .HasMaxLength(20)
                .HasColumnName("HUTYPE");
            entity.Property(e => e.Initialstatus)
                .HasMaxLength(10)
                .HasColumnName("INITIALSTATUS");
            entity.Property(e => e.Inventory).HasColumnName("INVENTORY");
            entity.Property(e => e.Lastcyclecount)
                .HasColumnType("datetime")
                .HasColumnName("LASTCYCLECOUNT");
            entity.Property(e => e.Lowlimitcount).HasColumnName("LOWLIMITCOUNT");
            entity.Property(e => e.Manufacturersku)
                .HasMaxLength(50)
                .HasColumnName("MANUFACTURERSKU");
            entity.Property(e => e.Newsku).HasColumnName("NEWSKU");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Onsitemax)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("ONSITEMAX");
            entity.Property(e => e.Onsitemin)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("ONSITEMIN");
            entity.Property(e => e.Oportunityrelpflag).HasColumnName("OPORTUNITYRELPFLAG");
            entity.Property(e => e.Othersku)
                .HasMaxLength(50)
                .HasColumnName("OTHERSKU");
            entity.Property(e => e.Overpickpct)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OVERPICKPCT");
            entity.Property(e => e.Overreceivepct)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OVERRECEIVEPCT");
            entity.Property(e => e.Picksortorder)
                .HasMaxLength(10)
                .HasColumnName("PICKSORTORDER");
            entity.Property(e => e.Picture)
                .HasMaxLength(10)
                .HasColumnName("PICTURE");
            entity.Property(e => e.Preflocation)
                .HasMaxLength(20)
                .HasColumnName("PREFLOCATION");
            entity.Property(e => e.Prefputregion)
                .HasMaxLength(10)
                .HasColumnName("PREFPUTREGION");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skucode)
                .HasMaxLength(50)
                .HasColumnName("SKUCODE");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Skugroup)
                .HasMaxLength(20)
                .HasColumnName("SKUGROUP");
            entity.Property(e => e.Skushortdesc)
                .HasMaxLength(50)
                .HasColumnName("SKUSHORTDESC");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Storageclass)
                .HasMaxLength(20)
                .HasColumnName("STORAGECLASS");
            entity.Property(e => e.Totalloads).HasColumnName("TOTALLOADS");
            entity.Property(e => e.Totallocations).HasColumnName("TOTALLOCATIONS");
            entity.Property(e => e.Totalunits)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("TOTALUNITS");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Unitprice).HasColumnName("UNITPRICE");
            entity.Property(e => e.Velocity)
                .HasMaxLength(10)
                .HasColumnName("VELOCITY");
            entity.Property(e => e.Vendorsku)
                .HasMaxLength(50)
                .HasColumnName("VENDORSKU");
        });

        modelBuilder.Entity<VSkuSubstitute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSkuSubstitute");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Multilevel).HasColumnName("MULTILEVEL");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Skuqty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SKUQTY");
            entity.Property(e => e.Substitutesku)
                .HasMaxLength(50)
                .HasColumnName("SUBSTITUTESKU");
            entity.Property(e => e.Substituteskuqty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SUBSTITUTESKUQTY");
            entity.Property(e => e.Substitutiontype)
                .HasMaxLength(20)
                .HasColumnName("SUBSTITUTIONTYPE");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
        });

        modelBuilder.Entity<VSkucode>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSKUCODE");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skucode)
                .HasMaxLength(50)
                .HasColumnName("SKUCODE");
        });

        modelBuilder.Entity<VSl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSL");

            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Locsortorder)
                .HasMaxLength(20)
                .HasColumnName("LOCSORTORDER");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<VSlplanner>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSLPlanner");

            entity.Property(e => e.Cubic).HasColumnName("CUBIC");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Status).HasColumnName("STATUS");
        });

        modelBuilder.Entity<VSnapShot>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSnapShot");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Qty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("QTY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<VSourceRoutingrequirement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSourceROUTINGREQUIREMENTS");

            entity.Property(e => e.Activerunid)
                .HasMaxLength(10)
                .HasColumnName("ACTIVERUNID");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Chkpnt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CHKPNT");
            entity.Property(e => e.Chkpntpointid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CHKPNTPOINTID");
            entity.Property(e => e.Companygroup)
                .HasMaxLength(20)
                .HasColumnName("COMPANYGROUP");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Currentindex).HasColumnName("CURRENTINDEX");
            entity.Property(e => e.DelType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Depot)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Distributiondate)
                .HasColumnType("datetime")
                .HasColumnName("DISTRIBUTIONDATE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("orderpriority");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordervalue).HasColumnName("ordervalue");
            entity.Property(e => e.Ordervolume).HasColumnName("ordervolume");
            entity.Property(e => e.Orderweight).HasColumnName("orderweight");
            entity.Property(e => e.Pdtype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PDTYPE");
            entity.Property(e => e.Plandate)
                .HasColumnType("datetime")
                .HasColumnName("PLANDATE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Setid)
                .HasMaxLength(10)
                .HasColumnName("SETID");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Strategy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("strategy");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(20)
                .HasColumnName("transportationclass");
            entity.Property(e => e.Trip)
                .HasMaxLength(20)
                .HasColumnName("TRIP");
        });

        modelBuilder.Entity<VTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vTasks");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Assigned).HasColumnName("ASSIGNED");
            entity.Property(e => e.Assignedtime)
                .HasColumnType("datetime")
                .HasColumnName("ASSIGNEDTIME");
            entity.Property(e => e.Assignmenttype)
                .HasMaxLength(20)
                .HasColumnName("ASSIGNMENTTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consolidation)
                .HasMaxLength(20)
                .HasColumnName("CONSOLIDATION");
            entity.Property(e => e.Countid)
                .HasMaxLength(20)
                .HasColumnName("COUNTID");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Documentline).HasColumnName("DOCUMENTLINE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Endtime)
                .HasColumnType("datetime")
                .HasColumnName("ENDTIME");
            entity.Property(e => e.Executionlocation)
                .HasMaxLength(20)
                .HasColumnName("EXECUTIONLOCATION");
            entity.Property(e => e.Executiontime).HasColumnName("EXECUTIONTIME");
            entity.Property(e => e.Fromcontainer)
                .HasMaxLength(20)
                .HasColumnName("FROMCONTAINER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Parallelpicklist)
                .HasMaxLength(10)
                .HasColumnName("PARALLELPICKLIST");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Replenishment)
                .HasMaxLength(20)
                .HasColumnName("REPLENISHMENT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Startlocation)
                .HasMaxLength(20)
                .HasColumnName("STARTLOCATION");
            entity.Property(e => e.Starttime)
                .HasColumnType("datetime")
                .HasColumnName("STARTTIME");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
            entity.Property(e => e.Stdtime)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("STDTIME");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Tasksubtype)
                .HasMaxLength(10)
                .HasColumnName("TASKSUBTYPE");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Tasktypedesc)
                .HasMaxLength(50)
                .HasColumnName("TASKTYPEDESC");
            entity.Property(e => e.Terminaltype)
                .HasMaxLength(20)
                .HasColumnName("TERMINALTYPE");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Yardmovementid)
                .HasMaxLength(20)
                .HasColumnName("YARDMOVEMENTID");
        });

        modelBuilder.Entity<VTaskPerformanceSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vTaskPerformanceSummary");

            entity.Property(e => e.Actualtime).HasColumnName("ACTUALTIME");
            entity.Property(e => e.Performance).HasColumnName("PERFORMANCE");
            entity.Property(e => e.Shiftdate)
                .HasMaxLength(10)
                .HasColumnName("SHIFTDATE");
            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Standarttime).HasColumnName("STANDARTTIME");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(20)
                .HasColumnName("TASKTYPE");
        });

        modelBuilder.Entity<VTodayDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vTodayDelivery");

            entity.Property(e => e.RoutesDate)
                .HasColumnType("date")
                .HasColumnName("routesDate");
            entity.Property(e => e.TotalStops).HasColumnName("totalStops");
            entity.Property(e => e.Totalroutes).HasColumnName("totalroutes");
            entity.Property(e => e.Totaltasks).HasColumnName("totaltasks");
        });

        modelBuilder.Entity<VUserPerformanceSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vUserPerformanceSummary");

            entity.Property(e => e.Actualtime).HasColumnName("ACTUALTIME");
            entity.Property(e => e.Performance).HasColumnName("PERFORMANCE");
            entity.Property(e => e.Shiftdate)
                .HasMaxLength(10)
                .HasColumnName("SHIFTDATE");
            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Standarttime).HasColumnName("STANDARTTIME");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<VUserTaskAssignment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vUserTaskAssignment");

            entity.Property(e => e.Hetype)
                .HasMaxLength(20)
                .HasColumnName("HETYPE");
            entity.Property(e => e.Mobility)
                .HasMaxLength(10)
                .HasColumnName("MOBILITY");
            entity.Property(e => e.Role)
                .HasMaxLength(20)
                .HasColumnName("ROLE");
            entity.Property(e => e.Skill)
                .HasMaxLength(20)
                .HasColumnName("SKILL");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<VUsersClockIn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vUsersClockIn");

            entity.Property(e => e.Hetype)
                .HasMaxLength(20)
                .HasColumnName("HETYPE");
            entity.Property(e => e.Inout)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("INOUT");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Shiftid)
                .HasMaxLength(10)
                .HasColumnName("SHIFTID");
            entity.Property(e => e.Shiftuserperformance)
                .HasMaxLength(30)
                .HasColumnName("SHIFTUSERPERFORMANCE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<VVehicleDriver>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVehicleDrivers");

            entity.Property(e => e.Driverid)
                .HasMaxLength(20)
                .HasColumnName("DRIVERID");
            entity.Property(e => e.Firstname)
                .HasMaxLength(50)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fullname)
                .HasMaxLength(50)
                .HasColumnName("FULLNAME");
            entity.Property(e => e.Lastname)
                .HasMaxLength(50)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletypename)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPENAME");
        });

        modelBuilder.Entity<VVehicleLastPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVehicleLastPos");

            entity.Property(e => e.Driverid)
                .HasMaxLength(20)
                .HasColumnName("DRIVERID");
            entity.Property(e => e.Fullname)
                .HasMaxLength(50)
                .HasColumnName("FULLNAME");
            entity.Property(e => e.Lastname)
                .HasMaxLength(50)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Latitude).HasColumnName("LATITUDE");
            entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("NAME");
            entity.Property(e => e.Runid).HasColumnName("RUNID");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
            entity.Property(e => e.Vehicletypename)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPENAME");
        });

        modelBuilder.Entity<VVehiclePosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVehiclePositions");

            entity.Property(e => e.Image)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Infowindow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("INFOWINDOW");
            entity.Property(e => e.Lat).HasColumnName("LAT");
            entity.Property(e => e.Lon).HasColumnName("LON");
            entity.Property(e => e.ShadowImage)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Tooltip)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TOOLTIP");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletypename)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPENAME");
        });

        modelBuilder.Entity<VVehiclePositionSearch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVehiclePositionSearch");

            entity.Property(e => e.Activitytime)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ACTIVITYTIME");
            entity.Property(e => e.Latitude).HasColumnName("LATITUDE");
            entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
            entity.Property(e => e.Runid)
                .ValueGeneratedOnAdd()
                .HasColumnName("RUNID");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
        });

        modelBuilder.Entity<VVehicleRoute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVehicleRoutes");

            entity.Property(e => e.ActivityTime)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MaxTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.MinTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
        });

        modelBuilder.Entity<VVehiclepositionsshvpGrid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVEHICLEPOSITIONSShvpGrid");

            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletypename)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPENAME");
        });

        modelBuilder.Entity<VWaveAssignOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWaveAssignOrders");

            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Doctype)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DOCTYPE");
            entity.Property(e => e.Hostorderid)
                .HasMaxLength(50)
                .HasColumnName("HOSTORDERID");
            entity.Property(e => e.Loadingseq)
                .HasMaxLength(20)
                .HasColumnName("LOADINGSEQ");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderpriority).HasColumnName("ORDERPRIORITY");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Requesteddate)
                .HasColumnType("datetime")
                .HasColumnName("REQUESTEDDATE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Routingset)
                .HasMaxLength(20)
                .HasColumnName("ROUTINGSET");
            entity.Property(e => e.Scheduleddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDDATE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shipto)
                .HasMaxLength(20)
                .HasColumnName("SHIPTO");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VWaveHeader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWaveHeader");

            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Numexceptionlines).HasColumnName("NUMEXCEPTIONLINES");
            entity.Property(e => e.Numexceptionsku).HasColumnName("NUMEXCEPTIONSKU");
            entity.Property(e => e.Numorderlines).HasColumnName("NUMORDERLINES");
            entity.Property(e => e.Numorders).HasColumnName("NUMORDERS");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Wavetype)
                .HasMaxLength(10)
                .HasColumnName("WAVETYPE");
            entity.Property(e => e.Wavetypedesc)
                .HasMaxLength(50)
                .HasColumnName("WAVETYPEDESC");
        });

        modelBuilder.Entity<VWaveOrderSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWaveOrderSummary");

            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("wave");
        });

        modelBuilder.Entity<VWavePicksSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWavePicksSummary");

            entity.Property(e => e.CompletedPct)
                .HasColumnType("decimal(21, 13)")
                .HasColumnName("CompletedPCT");
            entity.Property(e => e.EstimatedTimeOpenTotal)
                .HasMaxLength(63)
                .HasColumnName("Estimated Time (Open / Total)");
            entity.Property(e => e.PickLinesOpenTotal)
                .HasMaxLength(63)
                .HasColumnName("Pick Lines (Open / Total)");
            entity.Property(e => e.PickType)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("pickType");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Wave).HasMaxLength(20);
        });

        modelBuilder.Entity<VWaveProgressPerDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWaveProgressPerDay");

            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Picklistline).HasColumnName("PICKLISTLINE");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<VWaveReleasedNtf>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWaveReleasedNTF");

            entity.Property(e => e.Numexceptionlines).HasColumnName("NUMEXCEPTIONLINES");
            entity.Property(e => e.Numorderlines).HasColumnName("NUMORDERLINES");
            entity.Property(e => e.Numorders).HasColumnName("NUMORDERS");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.TotalFullpickpickLines)
                .HasMaxLength(30)
                .HasColumnName("TotalFULLPICKPickLines");
            entity.Property(e => e.TotalFullpickpickLists).HasColumnName("TotalFULLPICKPickLists");
            entity.Property(e => e.TotalNegativePickLines).HasMaxLength(30);
            entity.Property(e => e.TotalParallelPickLines).HasMaxLength(30);
            entity.Property(e => e.TotalPartialpickLines)
                .HasMaxLength(30)
                .HasColumnName("TotalPARTIALPickLines");
            entity.Property(e => e.TotalPartialpickLists).HasColumnName("TotalPARTIALPickLists");
            entity.Property(e => e.TotalWeight).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Wavetypedesc)
                .HasMaxLength(50)
                .HasColumnName("WAVETYPEDESC");
        });

        modelBuilder.Entity<VWaveassignment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWAVEASSIGNMENT");

            entity.Property(e => e.Breakbyshipment).HasColumnName("BREAKBYSHIPMENT");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Fromdoor)
                .HasMaxLength(20)
                .HasColumnName("FROMDOOR");
            entity.Property(e => e.Fromrequesteddeliverydate).HasColumnName("FROMREQUESTEDDELIVERYDATE");
            entity.Property(e => e.Fromroute)
                .HasMaxLength(20)
                .HasColumnName("fromroute");
            entity.Property(e => e.Fromvolume)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FROMVOLUME");
            entity.Property(e => e.Maxnumoforders).HasColumnName("MAXNUMOFORDERS");
            entity.Property(e => e.Orderstatus)
                .HasMaxLength(20)
                .HasColumnName("ORDERSTATUS");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(20)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Planmethod)
                .HasMaxLength(20)
                .HasColumnName("PLANMETHOD");
            entity.Property(e => e.Planmethoddesc)
                .HasMaxLength(50)
                .HasColumnName("PLANMETHODDESC");
            entity.Property(e => e.Slassigned).HasColumnName("SLASSIGNED");
            entity.Property(e => e.Templatename)
                .HasMaxLength(20)
                .HasColumnName("TEMPLATENAME");
            entity.Property(e => e.Todoor)
                .HasMaxLength(20)
                .HasColumnName("TODOOR");
            entity.Property(e => e.Torequesteddeliverydate).HasColumnName("TOREQUESTEDDELIVERYDATE");
            entity.Property(e => e.Toroute)
                .HasMaxLength(20)
                .HasColumnName("toroute");
            entity.Property(e => e.Tovolume)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOVOLUME");
            entity.Property(e => e.Transmethod)
                .HasMaxLength(20)
                .HasColumnName("TRANSMETHOD");
            entity.Property(e => e.Wavetype)
                .HasMaxLength(20)
                .HasColumnName("WAVETYPE");
            entity.Property(e => e.Wavetypedesc)
                .HasMaxLength(50)
                .HasColumnName("WAVETYPEDESC");
        });

        modelBuilder.Entity<VWhactivity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWHACTIVITY");

            entity.Property(e => e.Activity)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITY");
            entity.Property(e => e.Activitytime)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVITYTIME");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Hetype)
                .HasMaxLength(20)
                .HasColumnName("HETYPE");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<VWhactivityViewer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWHActivityViewer");

            entity.Property(e => e.Activity)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITY");
            entity.Property(e => e.Activityid)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYID");
            entity.Property(e => e.Activitytime)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVITYTIME");
            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Angle).HasColumnName("ANGLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Hetype)
                .HasMaxLength(20)
                .HasColumnName("HETYPE");
            entity.Property(e => e.Locationid)
                .HasMaxLength(20)
                .HasColumnName("LOCATIONID");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Objectid)
                .HasMaxLength(20)
                .HasColumnName("OBJECTID");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Status)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Templatename)
                .HasMaxLength(31)
                .HasColumnName("TEMPLATENAME");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Xposition).HasColumnName("XPOSITION");
            entity.Property(e => e.Yposition).HasColumnName("YPOSITION");
            entity.Property(e => e.Zposition).HasColumnName("ZPOSITION");
        });

        modelBuilder.Entity<VWhlocationsViewer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWHLocationsViewer");

            entity.Property(e => e.Aisle)
                .HasMaxLength(6)
                .HasColumnName("AISLE");
            entity.Property(e => e.Angle).HasColumnName("ANGLE");
            entity.Property(e => e.Bay)
                .HasMaxLength(6)
                .HasColumnName("BAY");
            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Loclevel).HasColumnName("LOCLEVEL");
            entity.Property(e => e.Objectid)
                .HasMaxLength(20)
                .HasColumnName("OBJECTID");
            entity.Property(e => e.Pickregion)
                .HasMaxLength(10)
                .HasColumnName("PICKREGION");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Status)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.Templatename)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("TEMPLATENAME");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Xposition).HasColumnName("XPOSITION");
            entity.Property(e => e.Yposition).HasColumnName("YPOSITION");
            entity.Property(e => e.Zposition).HasColumnName("ZPOSITION");
        });

        modelBuilder.Entity<VWhmapEdge>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWHMapEdges");

            entity.Property(e => e.Distance).HasColumnName("DISTANCE");
            entity.Property(e => e.Edgetype)
                .HasMaxLength(20)
                .HasColumnName("EDGETYPE");
            entity.Property(e => e.Sourceobjectid)
                .HasMaxLength(20)
                .HasColumnName("SOURCEOBJECTID");
            entity.Property(e => e.Targetobjectid)
                .HasMaxLength(20)
                .HasColumnName("TARGETOBJECTID");
        });

        modelBuilder.Entity<VWhmapNode>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWHMapNodes");

            entity.Property(e => e.Angle).HasColumnName("ANGLE");
            entity.Property(e => e.Objectid)
                .HasMaxLength(20)
                .HasColumnName("OBJECTID");
            entity.Property(e => e.Templatename)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("TEMPLATENAME");
            entity.Property(e => e.Xposition).HasColumnName("XPOSITION");
            entity.Property(e => e.Yposition).HasColumnName("YPOSITION");
            entity.Property(e => e.Zposition).HasColumnName("ZPOSITION");
        });

        modelBuilder.Entity<VWorkOrderBom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWorkOrderBom");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Partqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PARTQTY");
            entity.Property(e => e.Partsku)
                .HasMaxLength(50)
                .HasColumnName("PARTSKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("skudesc");
        });

        modelBuilder.Entity<VWorkOrderCompleteNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWorkOrderCompleteNotification");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Closedate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSEDATE");
            entity.Property(e => e.Completedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMPLETEDQTY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Documenttypedesc)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTTYPEDESC");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Inventorystatusdesc)
                .HasMaxLength(50)
                .HasColumnName("INVENTORYSTATUSDESC");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Modifiedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MODIFIEDQTY");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordertypedesc)
                .HasMaxLength(50)
                .HasColumnName("ORDERTYPEDESC");
            entity.Property(e => e.Originalqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ORIGINALQTY");
            entity.Property(e => e.Outboundorder)
                .HasMaxLength(20)
                .HasColumnName("OUTBOUNDORDER");
            entity.Property(e => e.Outboundorderline).HasColumnName("OUTBOUNDORDERLINE");
            entity.Property(e => e.Plannedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PLANNEDQTY");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
        });

        modelBuilder.Entity<VWorkOrderDisAssembleLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWorkOrderDisAssembleLoads");

            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Vaqty).HasColumnName("VAQTY");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VWorkOrderHeader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWorkOrderHeader");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Closedate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSEDATE");
            entity.Property(e => e.Completedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMPLETEDQTY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Documenttypedesc)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTTYPEDESC");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Inventorystatusdesc)
                .HasMaxLength(50)
                .HasColumnName("INVENTORYSTATUSDESC");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Modifiedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MODIFIEDQTY");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Ordertypedesc)
                .HasMaxLength(50)
                .HasColumnName("ORDERTYPEDESC");
            entity.Property(e => e.Originalqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ORIGINALQTY");
            entity.Property(e => e.Outboundorder)
                .HasMaxLength(20)
                .HasColumnName("OUTBOUNDORDER");
            entity.Property(e => e.Outboundorderline).HasColumnName("OUTBOUNDORDERLINE");
            entity.Property(e => e.Plannedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PLANNEDQTY");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("STATUSDESC");
        });

        modelBuilder.Entity<VWorkOrderLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWorkOrderLoads");

            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VWorkOrderSelectLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWorkOrderSelectLoads");

            entity.Property(e => e.Activitystatus)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Destinationlocation)
                .HasMaxLength(20)
                .HasColumnName("DESTINATIONLOCATION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.HandlingUnit).HasMaxLength(20);
            entity.Property(e => e.HandlingUnitType).HasMaxLength(20);
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Holdrc)
                .HasMaxLength(10)
                .HasColumnName("HOLDRC");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Lastcountdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTCOUNTDATE");
            entity.Property(e => e.Lastcountuser)
                .HasMaxLength(20)
                .HasColumnName("LASTCOUNTUSER");
            entity.Property(e => e.Lastmovedate)
                .HasColumnType("datetime")
                .HasColumnName("LASTMOVEDATE");
            entity.Property(e => e.Lastmoveuser)
                .HasMaxLength(20)
                .HasColumnName("LASTMOVEUSER");
            entity.Property(e => e.Laststatusdate)
                .HasColumnType("datetime")
                .HasColumnName("LASTSTATUSDATE");
            entity.Property(e => e.Laststatusrc)
                .HasMaxLength(10)
                .HasColumnName("LASTSTATUSRC");
            entity.Property(e => e.Laststatususer)
                .HasMaxLength(20)
                .HasColumnName("LASTSTATUSUSER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Pkey1)
                .HasMaxLength(20)
                .HasColumnName("PKEY1");
            entity.Property(e => e.Pkey2)
                .HasMaxLength(20)
                .HasColumnName("PKEY2");
            entity.Property(e => e.Pkey3)
                .HasMaxLength(20)
                .HasColumnName("PKEY3");
            entity.Property(e => e.Pkeytype)
                .HasMaxLength(10)
                .HasColumnName("PKEYTYPE");
            entity.Property(e => e.Prelimboloc)
                .HasMaxLength(20)
                .HasColumnName("PRELIMBOLOC");
            entity.Property(e => e.Prelimbostatus)
                .HasMaxLength(10)
                .HasColumnName("PRELIMBOSTATUS");
            entity.Property(e => e.Receipt)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Receiptline).HasColumnName("RECEIPTLINE");
            entity.Property(e => e.Receivedate)
                .HasColumnType("datetime")
                .HasColumnName("RECEIVEDATE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Sublocation)
                .HasMaxLength(20)
                .HasColumnName("SUBLOCATION");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Units4wallinv)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS4WALLINV");
            entity.Property(e => e.Unitsallocated)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSALLOCATED");
            entity.Property(e => e.Unitsavailable)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSAVAILABLE");
            entity.Property(e => e.Unitsinlimbo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINLIMBO");
            entity.Property(e => e.Unitsinprocess)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSINPROCESS");
            entity.Property(e => e.Unitsonhold)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSONHOLD");
            entity.Property(e => e.Unitspicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITSPICKED");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VWorkOrderValueAdded>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWorkOrderValueAdded");

            entity.Property(e => e.Batch)
                .HasMaxLength(50)
                .HasColumnName("BATCH");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("COLOR");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Expirydate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Harvest).HasColumnName("HARVEST");
            entity.Property(e => e.Kosher).HasColumnName("KOSHER");
            entity.Property(e => e.Loadid)
                .HasMaxLength(20)
                .HasColumnName("LOADID");
            entity.Property(e => e.Loaduom)
                .HasMaxLength(10)
                .HasColumnName("LOADUOM");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mfgdate)
                .HasColumnType("datetime")
                .HasColumnName("MFGDATE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Serial)
                .HasMaxLength(50)
                .HasColumnName("SERIAL");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .HasColumnName("SIZE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Units)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITS");
            entity.Property(e => e.Vaqty).HasColumnName("VAQTY");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<VYardAppointment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vYardAppointments");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Appointmentid)
                .HasMaxLength(20)
                .HasColumnName("APPOINTMENTID");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Checkindate)
                .HasColumnType("datetime")
                .HasColumnName("CHECKINDATE");
            entity.Property(e => e.Delayreasoncode)
                .HasMaxLength(20)
                .HasColumnName("DELAYREASONCODE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(20)
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.EquipmentStatus).HasMaxLength(20);
            entity.Property(e => e.Equipmentid)
                .HasMaxLength(20)
                .HasColumnName("EQUIPMENTID");
            entity.Property(e => e.EstEndDate).HasColumnType("datetime");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.ScheduleDoor).HasMaxLength(20);
            entity.Property(e => e.ScheduleStatus).HasMaxLength(20);
            entity.Property(e => e.Scheduledate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDATE");
            entity.Property(e => e.Scheduleid)
                .HasMaxLength(20)
                .HasColumnName("SCHEDULEID");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Tagnumber)
                .HasMaxLength(20)
                .HasColumnName("TAGNUMBER");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardlocation)
                .HasMaxLength(20)
                .HasColumnName("YARDLOCATION");
        });

        modelBuilder.Entity<VYardAppointmentsDoorResource>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vYardAppointmentsDoorResources");

            entity.Property(e => e.Yardlocation)
                .HasMaxLength(20)
                .HasColumnName("YARDLOCATION");
        });

        modelBuilder.Entity<VYardAppointmentsRequirement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vYardAppointmentsRequirements");

            entity.Property(e => e.Appointmentid)
                .HasMaxLength(20)
                .HasColumnName("APPOINTMENTID");
            entity.Property(e => e.Bol)
                .HasMaxLength(50)
                .HasColumnName("BOL");
            entity.Property(e => e.Comments).HasMaxLength(255);
            entity.Property(e => e.DisplayText).HasMaxLength(338);
            entity.Property(e => e.ReqType)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Reqid)
                .HasMaxLength(30)
                .HasColumnName("REQID");
            entity.Property(e => e.Scheduledate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDATE");
            entity.Property(e => e.Subject).HasMaxLength(30);
        });

        modelBuilder.Entity<VYardEquipmentDisplayTypesId>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vYardEquipmentDisplayTypesID");

            entity.Property(e => e.Equipmentid)
                .HasMaxLength(20)
                .HasColumnName("EQUIPMENTID");
            entity.Property(e => e.Equipmentiddisplay)
                .HasMaxLength(66)
                .HasColumnName("EQUIPMENTIDDisplay");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");
        });

        modelBuilder.Entity<VYardGatesActivityAudit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vYardGatesActivityAudit");

            entity.Property(e => e.Activitydate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVITYDATE");
            entity.Property(e => e.Activitytype)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITYTYPE");
            entity.Property(e => e.Auditid)
                .HasMaxLength(20)
                .HasColumnName("AUDITID");
            entity.Property(e => e.Fromloc)
                .HasMaxLength(20)
                .HasColumnName("FROMLOC");
            entity.Property(e => e.Fromstatus)
                .HasMaxLength(20)
                .HasColumnName("FROMSTATUS");
            entity.Property(e => e.Tagnumber)
                .HasMaxLength(20)
                .HasColumnName("TAGNUMBER");
            entity.Property(e => e.Toloc)
                .HasMaxLength(20)
                .HasColumnName("TOLOC");
            entity.Property(e => e.Tostatus)
                .HasMaxLength(20)
                .HasColumnName("TOSTATUS");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardlocation)
                .HasMaxLength(20)
                .HasColumnName("YARDLOCATION");
        });

        modelBuilder.Entity<VYardLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vYardLocations");

            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Locationid)
                .HasMaxLength(20)
                .HasColumnName("LOCATIONID");
            entity.Property(e => e.Objectid)
                .HasMaxLength(20)
                .HasColumnName("OBJECTID");
            entity.Property(e => e.Occupied)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("STATUS");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Xposition).HasColumnName("XPOSITION");
            entity.Property(e => e.Yardarea)
                .HasMaxLength(10)
                .HasColumnName("YARDAREA");
            entity.Property(e => e.Yardlocationtype)
                .HasMaxLength(10)
                .HasColumnName("YARDLOCATIONTYPE");
            entity.Property(e => e.Yposition).HasColumnName("YPOSITION");
        });

        modelBuilder.Entity<VYardMovement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vYardMovement");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromyardlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMYARDLOCATION");
            entity.Property(e => e.Movementid)
                .HasMaxLength(20)
                .HasColumnName("MOVEMENTID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Toyardlocation)
                .HasMaxLength(20)
                .HasColumnName("TOYARDLOCATION");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardequipmentid)
                .HasMaxLength(20)
                .HasColumnName("YARDEQUIPMENTID");
        });

        modelBuilder.Entity<VYardVehiclesPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vYardVehiclesPosition");

            entity.Property(e => e.Angle).HasColumnName("ANGLE");
            entity.Property(e => e.Locationid)
                .HasMaxLength(20)
                .HasColumnName("LOCATIONID");
            entity.Property(e => e.Objectid)
                .HasMaxLength(20)
                .HasColumnName("OBJECTID");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Xposition).HasColumnName("XPOSITION");
            entity.Property(e => e.Yardarea)
                .HasMaxLength(10)
                .HasColumnName("YARDAREA");
            entity.Property(e => e.Yposition).HasColumnName("YPOSITION");
        });

        modelBuilder.Entity<VZoneReplCurrentInventoryLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vZoneReplCurrentInventoryLevel");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("consignee");
            entity.Property(e => e.Putregion)
                .HasMaxLength(10)
                .HasColumnName("putregion");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("sku");
            entity.Property(e => e.Units).HasColumnType("decimal(38, 4)");
        });

        modelBuilder.Entity<VZoneReplenishment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vZoneReplenishment");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Allocatedqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("ALLOCATEDQTY");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Currentqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("CURRENTQTY");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Hotmaxreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTMAXREPLQTY");
            entity.Property(e => e.Hotminlevel)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTMINLEVEL");
            entity.Property(e => e.Hotreplpolicy)
                .HasMaxLength(20)
                .HasColumnName("HOTREPLPOLICY");
            entity.Property(e => e.Hotreplpolicydesc)
                .HasMaxLength(50)
                .HasColumnName("HOTREPLPOLICYDESC");
            entity.Property(e => e.Maxlevel).HasColumnName("MAXLEVEL");
            entity.Property(e => e.Minlevel).HasColumnName("MINLEVEL");
            entity.Property(e => e.Normalmaxreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("NORMALMAXREPLQTY");
            entity.Property(e => e.Pendingqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("PENDINGQTY");
            entity.Property(e => e.Putawaypolicy)
                .HasMaxLength(20)
                .HasColumnName("PUTAWAYPOLICY");
            entity.Property(e => e.Putawaypolicydesc)
                .HasMaxLength(50)
                .HasColumnName("PUTAWAYPOLICYDESC");
            entity.Property(e => e.Putregion)
                .HasMaxLength(20)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Replpolicy)
                .HasMaxLength(20)
                .HasColumnName("REPLPOLICY");
            entity.Property(e => e.Replpolicydesc)
                .HasMaxLength(50)
                .HasColumnName("REPLPOLICYDESC");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
        });

        modelBuilder.Entity<VZonereplinventorylevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vZONEREPLINVENTORYLEVEL");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Hotmaxreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTMAXREPLQTY");
            entity.Property(e => e.Hotminlevel)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTMINLEVEL");
            entity.Property(e => e.Hotreplpolicy)
                .HasMaxLength(20)
                .HasColumnName("HOTREPLPOLICY");
            entity.Property(e => e.Maxlevel).HasColumnName("MAXLEVEL");
            entity.Property(e => e.Minlevel).HasColumnName("MINLEVEL");
            entity.Property(e => e.Normalmaxreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("NORMALMAXREPLQTY");
            entity.Property(e => e.Putawaypolicy)
                .HasMaxLength(20)
                .HasColumnName("PUTAWAYPOLICY");
            entity.Property(e => e.Putregion)
                .HasMaxLength(20)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Replpolicy)
                .HasMaxLength(20)
                .HasColumnName("REPLPOLICY");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
        });

        modelBuilder.Entity<Vcomp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VCOMP");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1EMAIL");
            entity.Property(e => e.Contact1fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1FAX");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2email)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2EMAIL");
            entity.Property(e => e.Contact2fax)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2FAX");
            entity.Property(e => e.Contact2name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT2NAME");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Defaultcontact)
                .HasMaxLength(20)
                .HasColumnName("DEFAULTCONTACT");
            entity.Property(e => e.Objecttype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("OBJECTTYPE");
            entity.Property(e => e.Pointed).HasColumnName("POINTED");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<Vdepot>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VDEPOT");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Contact)
                .HasMaxLength(20)
                .HasColumnName("CONTACT");
            entity.Property(e => e.Depotname)
                .HasMaxLength(20)
                .HasColumnName("DEPOTNAME");
            entity.Property(e => e.Depottype)
                .HasMaxLength(10)
                .HasColumnName("DEPOTTYPE");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.Vehicleid).HasName("PK__VEHICLE__D4BD3E733333000C");

            entity.ToTable("VEHICLE");

            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Activitystatus)
                .HasMaxLength(50)
                .HasColumnName("ACTIVITYSTATUS");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Comment)
                .HasMaxLength(100)
                .HasColumnName("COMMENT");
            entity.Property(e => e.Driverid)
                .HasMaxLength(20)
                .HasColumnName("DRIVERID");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Licensethrudate)
                .HasColumnType("datetime")
                .HasColumnName("LICENSETHRUDATE");
            entity.Property(e => e.Manufacturedate)
                .HasColumnType("datetime")
                .HasColumnName("MANUFACTUREDATE");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("NAME");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
            entity.Property(e => e.Vehicletypename)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPENAME");
            entity.Property(e => e.Yardlocation)
                .HasMaxLength(20)
                .HasColumnName("YARDLOCATION");
        });

        modelBuilder.Entity<Vehiclecontainer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vehiclecontainer");

            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Containerid)
                .HasMaxLength(20)
                .HasColumnName("CONTAINERID");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Lowestuom)
                .HasMaxLength(10)
                .HasColumnName("lowestuom");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Orderline).HasColumnName("ORDERLINE");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Pickedqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("pickedqty");
            entity.Property(e => e.Qtyloaded)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYLOADED");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYMODIFIED");
            entity.Property(e => e.Qtyoriginal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYORIGINAL");
            entity.Property(e => e.Qtypicked)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYPICKED");
            entity.Property(e => e.Qtyshipped)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSHIPPED");
            entity.Property(e => e.Qtystaged)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QTYSTAGED");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("SHIPMENT");
            entity.Property(e => e.Shippeddate)
                .HasColumnType("datetime")
                .HasColumnName("SHIPPEDDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("SKUDESC");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Uomqty)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("uomqty");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<Vehicledriver>(entity =>
        {
            entity.HasKey(e => e.Driverid).HasName("PK__VEHICLED__5C38F30C63CBDD74");

            entity.ToTable("VEHICLEDRIVER");

            entity.Property(e => e.Driverid)
                .HasMaxLength(20)
                .HasColumnName("DRIVERID");
            entity.Property(e => e.Active)
                .HasDefaultValueSql("((1))")
                .HasColumnName("ACTIVE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Birthdate)
                .HasColumnType("datetime")
                .HasColumnName("BIRTHDATE");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Drivercontactid)
                .HasMaxLength(20)
                .HasColumnName("DRIVERCONTACTID");
            entity.Property(e => e.Drivergroup)
                .HasMaxLength(20)
                .HasColumnName("DRIVERGROUP");
            entity.Property(e => e.Driverlicensenumber)
                .HasMaxLength(20)
                .HasColumnName("DRIVERLICENSENUMBER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Employmentstartdate)
                .HasColumnType("datetime")
                .HasColumnName("EMPLOYMENTSTARTDATE");
            entity.Property(e => e.Firstname)
                .HasMaxLength(50)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fullname)
                .HasMaxLength(50)
                .HasColumnName("FULLNAME");
            entity.Property(e => e.Lastname)
                .HasMaxLength(50)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Licenseissuedate)
                .HasColumnType("datetime")
                .HasColumnName("LICENSEISSUEDATE");
            entity.Property(e => e.Licensevalidthrudate)
                .HasColumnType("datetime")
                .HasColumnName("LICENSEVALIDTHRUDATE");
            entity.Property(e => e.Objecttype)
                .HasMaxLength(20)
                .HasDefaultValueSql("('DRIVER')")
                .HasColumnName("OBJECTTYPE");
            entity.Property(e => e.Socialsecuritynumber)
                .HasMaxLength(20)
                .HasColumnName("SOCIALSECURITYNUMBER");
            entity.Property(e => e.Territoryid)
                .HasMaxLength(10)
                .HasColumnName("TERRITORYID");
        });

        modelBuilder.Entity<Vehiclelocation>(entity =>
        {
            entity.HasKey(e => new { e.Vehicletype, e.Location });

            entity.ToTable("VEHICLELOCATIONS");

            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Bay).HasColumnName("BAY");
            entity.Property(e => e.Depth).HasColumnName("DEPTH");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Level)
                .HasMaxLength(20)
                .HasColumnName("LEVEL");
            entity.Property(e => e.Side)
                .HasMaxLength(20)
                .HasColumnName("SIDE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Weightlimit).HasColumnName("WEIGHTLIMIT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<Vehicleposition>(entity =>
        {
            entity.HasKey(e => e.Runid).HasName("PK__VEHICLEP__8CDB8C704923ABAB");

            entity.ToTable("VEHICLEPOSITION");

            entity.Property(e => e.Runid).HasColumnName("RUNID");
            entity.Property(e => e.Latitude).HasColumnName("LATITUDE");
            entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("TIMESTAMP");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
        });

        modelBuilder.Entity<Vehicleroute>(entity =>
        {
            entity.HasKey(e => e.Vehiclerouteid).HasName("PK__VEHICLER__79BAF26E5277215D");

            entity.ToTable("VEHICLEROUTE");

            entity.Property(e => e.Vehiclerouteid)
                .ValueGeneratedNever()
                .HasColumnName("VEHICLEROUTEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Comment)
                .HasMaxLength(100)
                .HasColumnName("COMMENT");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Friday).HasColumnName("FRIDAY");
            entity.Property(e => e.Monday).HasColumnName("MONDAY");
            entity.Property(e => e.Predefined).HasColumnName("PREDEFINED");
            entity.Property(e => e.Routeend)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEEND");
            entity.Property(e => e.Routestart)
                .HasColumnType("datetime")
                .HasColumnName("ROUTESTART");
            entity.Property(e => e.Saturday).HasColumnName("SATURDAY");
            entity.Property(e => e.Sunday).HasColumnName("SUNDAY");
            entity.Property(e => e.Thursday).HasColumnName("THURSDAY");
            entity.Property(e => e.Tuesday).HasColumnName("TUESDAY");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Wednesday).HasColumnName("WEDNESDAY");
        });

        modelBuilder.Entity<Vehicleroutepoint>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VEHICLEROUTEPOINTS");

            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("DATE");
            entity.Property(e => e.Mappointid).HasColumnName("MAPPOINTID");
            entity.Property(e => e.Vehiclerouteid).HasColumnName("VEHICLEROUTEID");
        });

        modelBuilder.Entity<Vehicletype>(entity =>
        {
            entity.HasKey(e => e.Vehicletypename).HasName("PK__VEHICLET__6C6351CD1958B5AA");

            entity.ToTable("VEHICLETYPE");

            entity.Property(e => e.Vehicletypename)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPENAME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Costperday).HasColumnName("COSTPERDAY");
            entity.Property(e => e.Costperdistanceunit).HasColumnName("COSTPERDISTANCEUNIT");
            entity.Property(e => e.Costperhour).HasColumnName("COSTPERHOUR");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Drivingtimefactor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DRIVINGTIMEFACTOR");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edittuser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITTUSER");
            entity.Property(e => e.Equipementtype)
                .HasMaxLength(20)
                .HasColumnName("EQUIPEMENTTYPE");
            entity.Property(e => e.Manufacture)
                .HasMaxLength(20)
                .HasColumnName("MANUFACTURE");
            entity.Property(e => e.Maxroutesperday).HasColumnName("MAXROUTESPERDAY");
            entity.Property(e => e.Minpercentusage).HasColumnName("MINPERCENTUSAGE");
            entity.Property(e => e.Model)
                .HasMaxLength(20)
                .HasColumnName("MODEL");
            entity.Property(e => e.Totalunits)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTALUNITS");
            entity.Property(e => e.Totalvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTALVALUE");
            entity.Property(e => e.Totalvolume)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.Unloadingtype)
                .HasMaxLength(20)
                .HasColumnName("UNLOADINGTYPE");
            entity.Property(e => e.Vehicleweight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VEHICLEWEIGHT");
        });

        modelBuilder.Entity<Vehicletypebayheight>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VEHICLETYPEBAYHEIGHT");

            entity.Property(e => e.Bay).HasColumnName("BAY");
            entity.Property(e => e.Bayheight).HasColumnName("BAYHEIGHT");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<Vehicletypebaywidth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VEHICLETYPEBAYWIDTH");

            entity.Property(e => e.Bay).HasColumnName("BAY");
            entity.Property(e => e.Maxbaywidth).HasColumnName("MAXBAYWIDTH");
            entity.Property(e => e.Side)
                .HasMaxLength(20)
                .HasColumnName("SIDE");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<Vehicletypesidewidth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VEHICLETYPESIDEWIDTH");

            entity.Property(e => e.Side)
                .HasMaxLength(20)
                .HasColumnName("SIDE");
            entity.Property(e => e.Sidewidth).HasColumnName("SIDEWIDTH");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<Vehicletypetransportationclass>(entity =>
        {
            entity.HasKey(e => new { e.Vehicletypename, e.Transportationclass }).HasName("PK_VEHICLETYPESKUPARAMS");

            entity.ToTable("VEHICLETYPETRANSPORTATIONCLASS");

            entity.Property(e => e.Vehicletypename)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPENAME");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Maxcube).HasColumnName("MAXCUBE");
            entity.Property(e => e.Maxweight).HasColumnName("MAXWEIGHT");
            entity.Property(e => e.Mincube).HasColumnName("MINCUBE");
            entity.Property(e => e.Minweight).HasColumnName("MINWEIGHT");
        });

        modelBuilder.Entity<Vgeneraltask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VGENERALTASKS");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Contact1name)
                .HasMaxLength(30)
                .HasColumnName("CONTACT1NAME");
            entity.Property(e => e.Contact1phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT1PHONE");
            entity.Property(e => e.Contact2phone)
                .HasMaxLength(20)
                .HasColumnName("CONTACT2PHONE");
            entity.Property(e => e.Contactid)
                .HasMaxLength(20)
                .HasColumnName("CONTACTID");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Scheduledate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDATE");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Taskid)
                .HasMaxLength(20)
                .HasColumnName("TASKID");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(20)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Tasktypedesc)
                .HasMaxLength(50)
                .HasColumnName("TASKTYPEDESC");
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<Vrouteheader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VROUTEHEADER");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDDATE");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTDATE");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Feasibility)
                .HasColumnType("ntext")
                .HasColumnName("FEASIBILITY");
            entity.Property(e => e.Fullname)
                .HasMaxLength(50)
                .HasColumnName("FULLNAME");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Routestatus)
                .HasMaxLength(10)
                .HasColumnName("ROUTESTATUS");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Statusdesc)
                .HasMaxLength(50)
                .HasColumnName("statusdesc");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Territoryset)
                .HasMaxLength(20)
                .HasColumnName("TERRITORYSET");
            entity.Property(e => e.Totaldistance).HasColumnName("TOTALDISTANCE");
            entity.Property(e => e.Totaltime).HasColumnName("TOTALTIME");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.TripGroup).HasMaxLength(20);
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<VroutestopsHeader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vroutestops_header");

            entity.Property(e => e.Actualenddate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALENDdate");
            entity.Property(e => e.Actualstartdate)
                .HasColumnType("datetime")
                .HasColumnName("ACTUALSTARTdate");
            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Arrivaldate)
                .HasColumnType("datetime")
                .HasColumnName("ARRIVALdate");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("CITY");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("COMPANYNAME");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Departuredate)
                .HasColumnType("datetime")
                .HasColumnName("DEPARTUREdate");
            entity.Property(e => e.Depo)
                .HasMaxLength(10)
                .HasColumnName("DEPO");
            entity.Property(e => e.Documentid)
                .HasMaxLength(50)
                .HasColumnName("DOCUMENTID");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Driver)
                .HasMaxLength(20)
                .HasColumnName("DRIVER");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("ENDdate");
            entity.Property(e => e.Endpoint)
                .HasMaxLength(10)
                .HasColumnName("ENDPOINT");
            entity.Property(e => e.Numpacks).HasColumnName("NUMPACKS");
            entity.Property(e => e.Packtype)
                .HasMaxLength(10)
                .HasColumnName("PACKTYPE");
            entity.Property(e => e.Pointid)
                .HasMaxLength(10)
                .HasColumnName("POINTID");
            entity.Property(e => e.Routecost).HasColumnName("ROUTECOST");
            entity.Property(e => e.Routedate)
                .HasColumnType("datetime")
                .HasColumnName("ROUTEDATE");
            entity.Property(e => e.Routeid)
                .HasMaxLength(20)
                .HasColumnName("ROUTEID");
            entity.Property(e => e.Routename)
                .HasMaxLength(50)
                .HasColumnName("ROUTENAME");
            entity.Property(e => e.Routeset)
                .HasMaxLength(10)
                .HasColumnName("ROUTESET");
            entity.Property(e => e.Routestatus)
                .HasMaxLength(10)
                .HasColumnName("ROUTESTATUS");
            entity.Property(e => e.Runid)
                .HasMaxLength(10)
                .HasColumnName("RUNID");
            entity.Property(e => e.Schedualeddate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDUALEDDATE");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("STARTdate");
            entity.Property(e => e.Startpoint)
                .HasMaxLength(10)
                .HasColumnName("STARTPOINT");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopdetvalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVALUE");
            entity.Property(e => e.Stopdetvolume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETVOLUME");
            entity.Property(e => e.Stopdetweight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOPDETWEIGHT");
            entity.Property(e => e.Stopnumber).HasColumnName("STOPNUMBER");
            entity.Property(e => e.Stoptaskid).HasColumnName("STOPTASKID");
            entity.Property(e => e.Stoptaskname)
                .HasMaxLength(50)
                .HasColumnName("STOPTASKNAME");
            entity.Property(e => e.Stoptasktype)
                .HasMaxLength(20)
                .HasColumnName("STOPTASKTYPE");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Street1)
                .HasMaxLength(50)
                .HasColumnName("STREET1");
            entity.Property(e => e.Street2)
                .HasMaxLength(50)
                .HasColumnName("STREET2");
            entity.Property(e => e.Territory)
                .HasMaxLength(20)
                .HasColumnName("TERRITORY");
            entity.Property(e => e.Totalvolume).HasColumnName("TOTALVOLUME");
            entity.Property(e => e.Totalweight).HasColumnName("TOTALWEIGHT");
            entity.Property(e => e.Transportationclass)
                .HasMaxLength(10)
                .HasColumnName("TRANSPORTATIONCLASS");
            entity.Property(e => e.Vehicleid)
                .HasMaxLength(20)
                .HasColumnName("VEHICLEID");
            entity.Property(e => e.Vehicletype)
                .HasMaxLength(20)
                .HasColumnName("VEHICLETYPE");
        });

        modelBuilder.Entity<Vxdockdeliveryloc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VXDOCKDELIVERYLOC");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consigneename)
                .HasMaxLength(50)
                .HasColumnName("CONSIGNEENAME");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Sourcecompanytype)
                .HasMaxLength(10)
                .HasColumnName("SOURCECOMPANYTYPE");
            entity.Property(e => e.Sourcecompanytypedesc)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANYTYPEDESC");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanytype)
                .HasMaxLength(10)
                .HasColumnName("TARGETCOMPANYTYPE");
            entity.Property(e => e.Targetcompanytypedesc)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANYTYPEDESC");
        });

        modelBuilder.Entity<Warehousearea>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WAREHOUSEAREA");

            entity.Property(e => e.Totalloads).HasColumnName("TOTALLOADS");
            entity.Property(e => e.Totalunits)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("TOTALUNITS");
            entity.Property(e => e.Warehousearea1)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
        });

        modelBuilder.Entity<Warehousemapaisle>(entity =>
        {
            entity.HasKey(e => new { e.Aisle, e.Nodeid });

            entity.ToTable("WAREHOUSEMAPAISLES");

            entity.Property(e => e.Aisle)
                .HasMaxLength(20)
                .HasColumnName("AISLE");
            entity.Property(e => e.Nodeid)
                .HasMaxLength(20)
                .HasColumnName("NODEID");
            entity.Property(e => e.Accessin)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ACCESSIN");
            entity.Property(e => e.Accessout)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ACCESSOUT");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Warehousemapaislesedge>(entity =>
        {
            entity.HasKey(e => new { e.Aisle, e.Fromnodeid, e.Tonodeid });

            entity.ToTable("WAREHOUSEMAPAISLESEDGES");

            entity.Property(e => e.Aisle)
                .HasMaxLength(20)
                .HasColumnName("AISLE");
            entity.Property(e => e.Fromnodeid)
                .HasMaxLength(20)
                .HasColumnName("FROMNODEID");
            entity.Property(e => e.Tonodeid)
                .HasMaxLength(20)
                .HasColumnName("TONODEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Warehousemapedge>(entity =>
        {
            entity.HasKey(e => new { e.Fromnodeid, e.Tonodeid });

            entity.ToTable("WAREHOUSEMAPEDGES");

            entity.Property(e => e.Fromnodeid)
                .HasMaxLength(20)
                .HasColumnName("FROMNODEID");
            entity.Property(e => e.Tonodeid)
                .HasMaxLength(20)
                .HasColumnName("TONODEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Distance).HasColumnName("DISTANCE");
            entity.Property(e => e.Edgetype)
                .HasMaxLength(20)
                .HasColumnName("EDGETYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
        });

        modelBuilder.Entity<Warehousemapnode>(entity =>
        {
            entity.HasKey(e => e.Nodeid).HasName("PK__WAREHOUS__8EC5FA200CD954B8");

            entity.ToTable("WAREHOUSEMAPNODES");

            entity.Property(e => e.Nodeid)
                .HasMaxLength(20)
                .HasColumnName("NODEID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Xcoordinate).HasColumnName("XCOORDINATE");
            entity.Property(e => e.Ycoordinate).HasColumnName("YCOORDINATE");
            entity.Property(e => e.Zcoordinate).HasColumnName("ZCOORDINATE");
        });

        modelBuilder.Entity<Wave>(entity =>
        {
            entity.HasKey(e => e.Wave1).HasName("PK__WAVE__F931096CC1ADF583");

            entity.ToTable("WAVE");

            entity.Property(e => e.Wave1)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Closedate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSEDATE");
            entity.Property(e => e.Createdate)
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Wavetype)
                .HasMaxLength(10)
                .HasColumnName("WAVETYPE");
        });

        modelBuilder.Entity<WaveControlManager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WaveControlManager");

            entity.Property(e => e.Adjqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ADJQTY");
            entity.Property(e => e.Locmhtype)
                .HasMaxLength(10)
                .HasColumnName("LOCMHTYPE");
            entity.Property(e => e.Pickedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PICKEDQTY");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Pickmethod)
                .HasMaxLength(10)
                .HasColumnName("PICKMETHOD");
            entity.Property(e => e.Picktype)
                .HasMaxLength(10)
                .HasColumnName("PICKTYPE");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("ROUTE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Staginglane)
                .HasMaxLength(20)
                .HasColumnName("STAGINGLANE");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Strategyid)
                .HasMaxLength(20)
                .HasColumnName("STRATEGYID");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .HasColumnName("UOM");
            entity.Property(e => e.Warehousearea)
                .HasMaxLength(10)
                .HasColumnName("WAREHOUSEAREA");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<Waveassignment>(entity =>
        {
            entity.HasKey(e => e.Templatename);

            entity.ToTable("WAVEASSIGNMENT");

            entity.Property(e => e.Templatename)
                .HasMaxLength(20)
                .HasColumnName("TEMPLATENAME");
            entity.Property(e => e.Breakbyshipment).HasColumnName("BREAKBYSHIPMENT");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("COMPANYTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Fromdoor)
                .HasMaxLength(20)
                .HasColumnName("FROMDOOR");
            entity.Property(e => e.Fromrequesteddeliverydate).HasColumnName("FROMREQUESTEDDELIVERYDATE");
            entity.Property(e => e.Fromroute)
                .HasMaxLength(20)
                .HasColumnName("FROMROUTE");
            entity.Property(e => e.Fromvolume)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FROMVOLUME");
            entity.Property(e => e.Maxnumoforders).HasColumnName("MAXNUMOFORDERS");
            entity.Property(e => e.Orderstatus)
                .HasMaxLength(20)
                .HasColumnName("ORDERSTATUS");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(20)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Planmethod)
                .HasMaxLength(20)
                .HasColumnName("PLANMETHOD");
            entity.Property(e => e.Slassigned).HasColumnName("SLASSIGNED");
            entity.Property(e => e.Todoor)
                .HasMaxLength(20)
                .HasColumnName("TODOOR");
            entity.Property(e => e.Torequesteddeliverydate).HasColumnName("TOREQUESTEDDELIVERYDATE");
            entity.Property(e => e.Toroute)
                .HasMaxLength(20)
                .HasColumnName("TOROUTE");
            entity.Property(e => e.Tovolume)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOVOLUME");
            entity.Property(e => e.Transmethod)
                .HasMaxLength(20)
                .HasColumnName("TRANSMETHOD");
            entity.Property(e => e.Wavetype)
                .HasMaxLength(20)
                .HasColumnName("WAVETYPE");
        });

        modelBuilder.Entity<Waveexception>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WAVEEXCEPTION");

            entity.Property(e => e.AllocatedQty).HasColumnType("decimal(38, 4)");
            entity.Property(e => e.Availableqty)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("AVAILABLEQTY");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("company");
            entity.Property(e => e.Companyname)
                .HasMaxLength(100)
                .HasColumnName("companyname");
            entity.Property(e => e.Companytype)
                .HasMaxLength(10)
                .HasColumnName("companytype");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("consignee");
            entity.Property(e => e.ExceptionQty).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("orderid");
            entity.Property(e => e.Orderline).HasColumnName("orderline");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ordertype");
            entity.Property(e => e.Ordertypedesc)
                .HasMaxLength(50)
                .HasColumnName("ordertypedesc");
            entity.Property(e => e.Qtymodified)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("qtymodified");
            entity.Property(e => e.Route)
                .HasMaxLength(20)
                .HasColumnName("route");
            entity.Property(e => e.Shipment)
                .HasMaxLength(20)
                .HasColumnName("shipment");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("sku");
            entity.Property(e => e.Skudesc)
                .HasMaxLength(100)
                .HasColumnName("skudesc");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("wave");
        });

        modelBuilder.Entity<Wavetask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WAVETASKS");

            entity.Property(e => e.Adddate)
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Assigned).HasColumnName("ASSIGNED");
            entity.Property(e => e.Assignedtime)
                .HasColumnType("datetime")
                .HasColumnName("ASSIGNEDTIME");
            entity.Property(e => e.Assignmenttype)
                .HasMaxLength(20)
                .HasColumnName("ASSIGNMENTTYPE");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Consolidation)
                .HasMaxLength(20)
                .HasColumnName("CONSOLIDATION");
            entity.Property(e => e.Countid)
                .HasMaxLength(20)
                .HasColumnName("COUNTID");
            entity.Property(e => e.Document)
                .HasMaxLength(20)
                .HasColumnName("DOCUMENT");
            entity.Property(e => e.Documentline).HasColumnName("DOCUMENTLINE");
            entity.Property(e => e.Editdate)
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Endtime)
                .HasColumnType("datetime")
                .HasColumnName("ENDTIME");
            entity.Property(e => e.Executionlocation)
                .HasMaxLength(20)
                .HasColumnName("EXECUTIONLOCATION");
            entity.Property(e => e.Executiontime).HasColumnName("EXECUTIONTIME");
            entity.Property(e => e.Fromcontainer)
                .HasMaxLength(20)
                .HasColumnName("FROMCONTAINER");
            entity.Property(e => e.Fromload)
                .HasMaxLength(20)
                .HasColumnName("FROMLOAD");
            entity.Property(e => e.Fromlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMLOCATION");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Parallelpicklist)
                .HasMaxLength(10)
                .HasColumnName("PARALLELPICKLIST");
            entity.Property(e => e.Picklist)
                .HasMaxLength(10)
                .HasColumnName("PICKLIST");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Replenishment)
                .HasMaxLength(20)
                .HasColumnName("REPLENISHMENT");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Startlocation)
                .HasMaxLength(20)
                .HasColumnName("STARTLOCATION");
            entity.Property(e => e.Starttime)
                .HasColumnType("datetime")
                .HasColumnName("STARTTIME");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Task)
                .HasMaxLength(10)
                .HasColumnName("TASK");
            entity.Property(e => e.Tasktype)
                .HasMaxLength(10)
                .HasColumnName("TASKTYPE");
            entity.Property(e => e.Terminaltype)
                .HasMaxLength(20)
                .HasColumnName("TERMINALTYPE");
            entity.Property(e => e.Tocontainer)
                .HasMaxLength(20)
                .HasColumnName("TOCONTAINER");
            entity.Property(e => e.Toload)
                .HasMaxLength(20)
                .HasColumnName("TOLOAD");
            entity.Property(e => e.Tolocation)
                .HasMaxLength(20)
                .HasColumnName("TOLOCATION");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
            entity.Property(e => e.Wave)
                .HasMaxLength(20)
                .HasColumnName("WAVE");
        });

        modelBuilder.Entity<Wavetype>(entity =>
        {
            entity.HasKey(e => e.Wavetype1);

            entity.ToTable("WAVETYPE");

            entity.Property(e => e.Wavetype1)
                .HasMaxLength(20)
                .HasColumnName("WAVETYPE");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fullpick).HasColumnName("FULLPICK");
            entity.Property(e => e.Negpick).HasColumnName("NEGPICK");
            entity.Property(e => e.Partpick).HasColumnName("PARTPICK");
        });

        modelBuilder.Entity<Whactivity>(entity =>
        {
            entity.HasKey(e => e.Activityid).HasName("PK__WHACTIVI__915F0BB50F4A031A");

            entity.ToTable("WHACTIVITY");

            entity.Property(e => e.Activityid)
                .HasMaxLength(10)
                .HasColumnName("ACTIVITYID");
            entity.Property(e => e.Activity)
                .HasMaxLength(20)
                .HasColumnName("ACTIVITY");
            entity.Property(e => e.Activitytime)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVITYTIME");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('SYSTEM')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Hetype)
                .HasMaxLength(20)
                .HasColumnName("HETYPE");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Mheid)
                .HasMaxLength(20)
                .HasColumnName("MHEID");
            entity.Property(e => e.Shift)
                .HasMaxLength(10)
                .HasColumnName("SHIFT");
            entity.Property(e => e.Terminaltype)
                .HasMaxLength(20)
                .HasColumnName("TERMINALTYPE");
            entity.Property(e => e.Userid)
                .HasMaxLength(20)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<Workorderbom>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Orderid, e.Partsku });

            entity.ToTable("WORKORDERBOM");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Partsku)
                .HasMaxLength(50)
                .HasColumnName("PARTSKU");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Partqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PARTQTY");
        });

        modelBuilder.Entity<Workorderheader>(entity =>
        {
            entity.HasKey(e => new { e.Consignee, e.Orderid });

            entity.ToTable("WORKORDERHEADER");

            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Orderid)
                .HasMaxLength(20)
                .HasColumnName("ORDERID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Closedate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSEDATE");
            entity.Property(e => e.Completedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMPLETEDQTY");
            entity.Property(e => e.Createdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("CREATEDATE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Duedate)
                .HasColumnType("datetime")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Inventorystatus)
                .HasMaxLength(20)
                .HasColumnName("INVENTORYSTATUS");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Modifiedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MODIFIEDQTY");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Originalqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ORIGINALQTY");
            entity.Property(e => e.Outboundorder)
                .HasMaxLength(20)
                .HasColumnName("OUTBOUNDORDER");
            entity.Property(e => e.Outboundorderline).HasColumnName("OUTBOUNDORDERLINE");
            entity.Property(e => e.Plannedqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PLANNEDQTY");
            entity.Property(e => e.Referenceord)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORD");
            entity.Property(e => e.Referenceordline)
                .HasMaxLength(20)
                .HasColumnName("REFERENCEORDLINE");
            entity.Property(e => e.Releasedate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASEDATE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statustopick)
                .HasMaxLength(10)
                .HasDefaultValueSql("('AVAILABLE')")
                .HasColumnName("STATUSTOPICK");
        });

        modelBuilder.Entity<Xdockdeliveryloc>(entity =>
        {
            entity.HasKey(e => e.Priority).HasName("PK__XDOCKDEL__8AE25027BA6B56D2");

            entity.ToTable("XDOCKDELIVERYLOC");

            entity.Property(e => e.Priority)
                .ValueGeneratedNever()
                .HasColumnName("PRIORITY");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(10)
                .HasColumnName("DOCUMENTTYPE");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(10)
                .HasColumnName("ORDERTYPE");
            entity.Property(e => e.Sourcecompany)
                .HasMaxLength(50)
                .HasColumnName("SOURCECOMPANY");
            entity.Property(e => e.Sourcecompanytype)
                .HasMaxLength(10)
                .HasColumnName("SOURCECOMPANYTYPE");
            entity.Property(e => e.Targetcompany)
                .HasMaxLength(50)
                .HasColumnName("TARGETCOMPANY");
            entity.Property(e => e.Targetcompanytype)
                .HasMaxLength(10)
                .HasColumnName("TARGETCOMPANYTYPE");
        });

        modelBuilder.Entity<YardAppointmentsDoorTimeSlot>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("YardAppointmentsDoorTimeSlots");

            entity.Property(e => e.AppointmentId).HasMaxLength(20);
            entity.Property(e => e.Door).HasMaxLength(20);
            entity.Property(e => e.ScheduleDate).HasColumnType("date");
            entity.Property(e => e.TimeSlot)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.TimeSlotDisplay).HasMaxLength(4000);
        });

        modelBuilder.Entity<YardDoorsEndTimePerDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("YardDoorsEndTimePerDay");

            entity.Property(e => e.DayOfWeek)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dayOfWeek");
            entity.Property(e => e.EndTime).HasMaxLength(53);
            entity.Property(e => e.Paramcode)
                .HasMaxLength(20)
                .HasColumnName("paramcode");
        });

        modelBuilder.Entity<YardDoorsStartTimePerDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("YardDoorsStartTimePerDay");

            entity.Property(e => e.DayOfWeek)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dayOfWeek");
            entity.Property(e => e.Paramcode)
                .HasMaxLength(20)
                .HasColumnName("paramcode");
            entity.Property(e => e.StartTime).HasMaxLength(53);
        });

        modelBuilder.Entity<Yardappointment>(entity =>
        {
            entity.HasKey(e => e.Appointmentid).HasName("PK__YARDENTRY__4D7F7902");

            entity.ToTable("YARDAPPOINTMENT");

            entity.Property(e => e.Appointmentid)
                .HasMaxLength(20)
                .HasColumnName("APPOINTMENTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Carrier)
                .HasMaxLength(20)
                .HasColumnName("CARRIER");
            entity.Property(e => e.Checkindate)
                .HasColumnType("datetime")
                .HasColumnName("CHECKINDATE");
            entity.Property(e => e.Delayreasoncode)
                .HasMaxLength(20)
                .HasColumnName("DELAYREASONCODE");
            entity.Property(e => e.Door)
                .HasMaxLength(20)
                .HasColumnName("DOOR");
            entity.Property(e => e.Driver1)
                .HasMaxLength(20)
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(20)
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("NOTES");
            entity.Property(e => e.Scheduledate)
                .HasColumnType("datetime")
                .HasColumnName("SCHEDULEDATE");
            entity.Property(e => e.Seal1)
                .HasMaxLength(20)
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(20)
                .HasColumnName("SEAL2");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
        });

        modelBuilder.Entity<Yardcheckin>(entity =>
        {
            entity.HasKey(e => e.Checkinid);

            entity.ToTable("YARDCHECKIN");

            entity.Property(e => e.Checkinid)
                .HasMaxLength(20)
                .HasColumnName("CHECKINID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Checkindate)
                .HasColumnType("datetime")
                .HasColumnName("CHECKINDATE");
            entity.Property(e => e.Driver1)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Seal1)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("SEAL2");
            entity.Property(e => e.Trailer)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TRAILER");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardlocation)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("YARDLOCATION");
        });

        modelBuilder.Entity<Yardcheckout>(entity =>
        {
            entity.HasKey(e => e.Checkoutid);

            entity.ToTable("YARDCHECKOUT");

            entity.Property(e => e.Checkoutid)
                .HasMaxLength(20)
                .HasColumnName("CHECKOUTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Checkoutdate)
                .HasColumnType("datetime")
                .HasColumnName("CHECKOUTDATE");
            entity.Property(e => e.Driver1)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DRIVER1");
            entity.Property(e => e.Driver2)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DRIVER2");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Seal1)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("SEAL1");
            entity.Property(e => e.Seal2)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("SEAL2");
            entity.Property(e => e.Trailer)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TRAILER");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardlocation)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("YARDLOCATION");
        });

        modelBuilder.Entity<Yardequipment>(entity =>
        {
            entity.HasKey(e => e.Equipmentid);

            entity.ToTable("YARDEQUIPMENT");

            entity.Property(e => e.Equipmentid)
                .HasMaxLength(20)
                .HasColumnName("EQUIPMENTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Tagnumber)
                .HasMaxLength(20)
                .HasColumnName("TAGNUMBER");
            entity.Property(e => e.Trailer)
                .HasMaxLength(20)
                .HasColumnName("TRAILER");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .HasColumnName("VEHICLE");
            entity.Property(e => e.Yardlocation)
                .HasMaxLength(20)
                .HasColumnName("YARDLOCATION");
        });

        modelBuilder.Entity<Yardlocation>(entity =>
        {
            entity.HasKey(e => e.Yardlocation1);

            entity.ToTable("YARDLOCATION");

            entity.Property(e => e.Yardlocation1)
                .HasMaxLength(20)
                .HasColumnName("YARDLOCATION");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Checkdigits)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CHECKDIGITS");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Xcoordinate).HasColumnName("XCOORDINATE");
            entity.Property(e => e.Yardarea)
                .HasMaxLength(10)
                .HasColumnName("YARDAREA");
            entity.Property(e => e.Yardlocationtype)
                .HasMaxLength(10)
                .HasColumnName("YARDLOCATIONTYPE");
            entity.Property(e => e.Ycoordinate).HasColumnName("YCOORDINATE");
        });

        modelBuilder.Entity<Yardmovement>(entity =>
        {
            entity.HasKey(e => e.Movementid);

            entity.ToTable("YARDMOVEMENT");

            entity.Property(e => e.Movementid)
                .HasMaxLength(20)
                .HasColumnName("MOVEMENTID");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromyardlocation)
                .HasMaxLength(20)
                .HasColumnName("FROMYARDLOCATION");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("STATUS");
            entity.Property(e => e.Toyardlocation)
                .HasMaxLength(20)
                .HasColumnName("TOYARDLOCATION");
            entity.Property(e => e.Yardequipmentid)
                .HasMaxLength(20)
                .HasColumnName("YARDEQUIPMENTID");
        });

        modelBuilder.Entity<Yardparameter>(entity =>
        {
            entity.HasKey(e => e.Paramcode);

            entity.ToTable("YARDPARAMETERS");

            entity.Property(e => e.Paramcode)
                .HasMaxLength(20)
                .HasColumnName("PARAMCODE");
            entity.Property(e => e.Paramdesc)
                .HasMaxLength(100)
                .HasColumnName("PARAMDESC");
            entity.Property(e => e.Paramvalue)
                .HasMaxLength(50)
                .HasColumnName("PARAMVALUE");
        });

        modelBuilder.Entity<Zonereplinventorylevel>(entity =>
        {
            entity.HasKey(e => new { e.Putregion, e.Consignee, e.Sku });

            entity.ToTable("ZONEREPLINVENTORYLEVEL");

            entity.Property(e => e.Putregion)
                .HasMaxLength(20)
                .HasColumnName("PUTREGION");
            entity.Property(e => e.Consignee)
                .HasMaxLength(20)
                .HasColumnName("CONSIGNEE");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Adddate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ADDDATE");
            entity.Property(e => e.Adduser)
                .HasMaxLength(20)
                .HasColumnName("ADDUSER");
            entity.Property(e => e.Editdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("EDITDATE");
            entity.Property(e => e.Edituser)
                .HasMaxLength(20)
                .HasColumnName("EDITUSER");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("FROMDATE");
            entity.Property(e => e.Hotmaxreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTMAXREPLQTY");
            entity.Property(e => e.Hotminlevel)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HOTMINLEVEL");
            entity.Property(e => e.Hotreplpolicy)
                .HasMaxLength(20)
                .HasColumnName("HOTREPLPOLICY");
            entity.Property(e => e.Maxlevel).HasColumnName("MAXLEVEL");
            entity.Property(e => e.Minlevel).HasColumnName("MINLEVEL");
            entity.Property(e => e.Normalmaxreplqty)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("NORMALMAXREPLQTY");
            entity.Property(e => e.Putawaypolicy)
                .HasMaxLength(20)
                .HasColumnName("PUTAWAYPOLICY");
            entity.Property(e => e.Replpolicy)
                .HasMaxLength(20)
                .HasColumnName("REPLPOLICY");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODATE");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
